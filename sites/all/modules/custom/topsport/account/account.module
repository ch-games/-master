<?php
// $Id: account.module Exp $

define("SHOW_DISCOUNT_SYSTEM", true);
define("SHOW_LOYALITY_SYSTEM", true);
define("SHOW_BONUS_SYSTEM", true);

function account_page_alter(&$page){
	if($_GET['q'] == 'admin/people/people' OR $_GET['q'] == 'admin/people' OR strpos($_GET['q'], 'admin/people/search') !== FALSE){
		array_unshift($page['content']['system_main'], array('user_search' => account_search_elements()));
	}
}

function account_init(){
	global $user;
    require_once 'GeoGamesManager.php';
    GeoGamesManager::validatePage($user);

  if($user->uid > 0 AND isset($user->roles[12])){
	 drupal_goto('accounts/registracija-sekminga');
  }
  
    // adding custom GA tracking so know user types, IsLoggedin
    $ur_value = 'no';
    if(user_is_logged_in()){
        $ur_value = 'yes';
    }    
    $_SESSION['ga_push'][] = array('_setCustomVar', 1, 'IsLoggedin', $ur_value, 1);
    // adding condition to avoid a lot of request to back-end ttl now 15 secs
	$IsOldData = isset($_SESSION['userinfo_updateUser']) ? ($_SESSION['userinfo_updateUser'] > time() ? false : true) : true;
	if($user->uid > 0 AND strpos($_GET['q'], 'account') !== FALSE && $IsOldData){
		userinfo_updaterData();
		$_SESSION['userinfo_updateUser'] = strtotime('+15 sec');
	}

	if($user->uid > 0 AND isset($user->roles[variable_get('account_roles_topsport_paused')])){
		drupal_set_message(t(
    "Jūsų paskyra buvo laikinai sustabdyta, tai galėjo nutikti dėl keletos priežasčių:<br/>
    1. Gavome iš Valstybės Lošimų Priežiūros Komisijos Jūsų prašymą sustabdyti Jūsų sutartį;<br/>
    2. Kilo įtarimų dėl Jūsų sutarties teisėtumo;<br/>
    3. Kitos priežastys;<br/>
    Prašome susisiekti su mūsų klientų aptarnavimo tarnyba norint gauti daugiau informacijos telefonu +370 37 409409 arba el. paštu pagalba@topsport.lt"
    ), 'warning');
	}
	
	//GEMIUS RETARGETING: Gem_LT.TopSport.Aktyvacijos.2. Prisijungimas arba registracija
	if(isset($_SESSION['gemius'])){		
		if(in_array($_SESSION['gemius'], array('login','register'))){
			//Gem_LT.TopSport.Aktyvacijos.2. Prisijungimas arba registracija
			drupal_add_js("if(location.protocol.substr(0,4)=='http')document.write(unescape('%3C')+'script id=\"Gem_LT.TopSport.Aktyvacijos.2. Prisijungimas arba registracija\" src=\"'+location.protocol+'//lt.adocean.pl/_'+(new Date()).getTime()+'/ad.js?id=1J7hwg0HrNbM6UEf7NRx8UedngDwhHsqSu9hwtswk6f.A7/x='+screen.width+'/y='+screen.height+'\" type=\"text/javascript\"'+unescape('%3E%3C')+'/script'+unescape('%3E'));", 'inline');
		} elseif(in_array($_SESSION['gemius'], array('bet_placed'))){
			//Gem_LT.TopSport.Aktyvacijos.3. Pirkimas 
			drupal_add_js("if(location.protocol.substr(0,4)=='http')document.write(unescape('%3C')+'script id=\"Gem_LT.TopSport.Aktyvacijos.3. Pirkimas\" src=\"'+location.protocol+'//lt.adocean.pl/_'+(new Date()).getTime()+'/ad.js?id=CoRXxzQB54I5FeZ49lIoYpeDXPNgI8eHLb1V4wmtECH.T7/x='+screen.width+'/y='+screen.height+'\" type=\"text/javascript\"'+unescape('%3E%3C')+'/script'+unescape('%3E'));", 'inline');
		}
		unset($_SESSION['gemius']);
	}
	// GEMIUS RETARGETING: Gem_LT.TopSport.Aktyvacijos.1. Topsport.lt Aplankymas
	drupal_add_js("if(location.protocol.substr(0,4)=='http')document.write(unescape('%3C')+'script id=\"Gem_LT.TopSport.Aktyvacijos.1. Topsport.lt Aplankymas\" src=\"'+location.protocol+'//lt.adocean.pl/_'+(new Date()).getTime()+'/ad.js?id=Y4HgOsn1d97RWmdtzl2PVlA.wgyvoZ3Dk9C9wv2ndOj.t7/x='+screen.width+'/y='+screen.height+'\" type=\"text/javascript\"'+unescape('%3E%3C')+'/script'+unescape('%3E'));", 'inline');
}

function account_menu() {

	$items['account'] = array(
    'title' => 'Mano erdvė',
    'page callback' => 'account_account',
    'access callback' => TRUE,
    'file' => 'account.pages.inc',
    'weight' => -10,
    'menu_name' => 'user-menu',
	);

	$items['account/agreement'] = array(
    'title' => 'i-lažybų sutartis',
    'page callback' => 'drupal_goto',
    'page agruments' => array('accounts/registration-process'),
    'access callback' => 'account_access_agreement_page',
    // 'file' => 'account.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
	);

	$items['account/bets'] = array(
    'title' => 'Mano statymai',
	//'page callback' => 'account_page_bets',
	//'page arguments' => array(1),
    'access callback' => 'account_page_access',
    'access arguments' => array('access account bets'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'account.pages.inc',
    'weight' => 1,
	);

	$items['account/bets/standart'] = array(
    'title' => 'Klasikinių lažybų statymai',
    'page callback' => 'account_page_bets',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account bets'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'account.pages.inc',
    'weight' => 1,
	);

	$items['account/bets/standart/more/%'] = array(
    'title' => 'Klasikinių lažybų statymai',
    'page callback' => 'account_page_bets_more',
    'page arguments' => array(4),
    'access callback' => 'account_page_access',
    'access arguments' => array('access account bets'),
    'type' => MENU_CALLBACK,
    'file' => 'account.pages.inc',
	);

	$items['account/deposits'] = array(
    'title' => 'Sąskaitos papildymas',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account deposits'),
    'page callback' => 'account_page_deposits',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'account.pages.inc',
	);

	$items['account/deposits/accept'] = array(
    'title' => 'Sąskaitos papildymas Accept',
    'access callback' => TRUE,
    'page callback' => 'account_deposits_actions',
    'page arguments' => array('accept'),
    'weight' => 1,
    'type' => MENU_CALLBACK,
    'file' => 'account.pages.inc',
	);

	$items['account/deposits/cancel'] = array(
    'title' => 'Sąskaitos papildymas Cancel',
    'access callback' => TRUE,
    'page callback' => 'account_deposits_actions',
    'page arguments' => array('cancel'),
    'weight' => 1,
    'type' => MENU_CALLBACK,
    'file' => 'account.pages.inc',
	);

	$items['account/withdrawals'] = array(
    'title' => 'Pinigų išmokėjimas',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account withdrawals'),
    'page callback' => 'account_page_withdrawals',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'account.pages.inc',
	);

	$items['account/history'] = array(
    'title' => 'Sąskaitos istorija',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account history'),
    'page callback' => 'account_page_history',
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
    'file' => 'account.pages.inc',
	);

	$items['account/info'] = array(
    'title' => 'Mano duomenys',
    'page callback' => 'account_page_info',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account info'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'account.pages.inc',
	);

	$items['account/info/info'] = array(
    'title' => 'Mano duomenys',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account info'),
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'account.pages.inc',
	);

	$items['account/info/pins'] = array(
    'title' => 'Atsisiųsti kliento ir PIN kodų korteles',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account get pins'),
    'page callback' => 'account_page_getpins',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'account.pages.inc',
	);

	$items['account/preferences'] = array(
    'title' => 'Nustatymai',
    'access callback' => 'account_page_access',
    'access arguments' => array('access account preferences'),
    'page callback' => 'account_page_preferences',
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
    'file' => 'account.pages.inc',
	);

	$items['account/getusercard/%/%/%'] = array(
    'title' => 'Atsisiųsti kliento ir PIN kodų korteles',
    'page callback' => 'account_download_userCard',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'account.pages.inc',
	);

	$items['account/activation/%/%/%'] = array(
    'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('account_pass_reset', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'account.pages.inc',
	);

	$items['account/edit-password'] = array(
    'title' => 'Slaptažodžio keitimas',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('account_edit_password_form'),
    'access callback' => 'account_edit_password_access',
	// 'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
	);

	$items['admin/people/awaitingactivations'] = array(
	    'title' => 'Awaiting users',
	    //'description' => 'Laukiančiųjų aktyvacijos sąrašas',
	    'page callback' => 'account_admin_awaiting_ajax',
	   // 'access arguments' => array('awaiting activations'),	   
	    'access callback' => TRUE,
	    'type' => MENU_CALLBACK,
	    
	);
	
	$items['admin/people/activation'] = array(
    'title' => 'Vartotojų aktyvavimas',
    'description' => 'Laukiančiųjų aktyvacijos sąrašas',
    'access arguments' => array('access account activation'),
    'page callback' => 'account_admin_activation',
    'file' => 'account.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -20,
	);

	$items['admin/people/rejected'] = array(
    'title' => 'Atmesti vartotojai',
    'description' => 'Atmestų vartotojų sąrašas',
    'access arguments' => array('access account activation'),
    'page callback' => 'account_admin_rejected',
    'file' => 'account.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -15,
	);

	$items['admin/people/activation/%user'] = array(
    'title' => 'Vartotojų aktyvavimas',
    'description' => 'Laukiančiųjų aktyvacijos sąrašas',
    'access arguments' => array('access account activation'),
    'page callback' => 'account_admin_activate_user',
    'page arguments' => array(3),
    'file' => 'user.pages.inc',
    'file path' => drupal_get_path('module', 'user'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -20,
	);

	$items['user/activation'] = array(
    'title' => 'Gauti aktyvacijos nuorodą',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('account_resend_activation'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
	);

	$items['user/%user/switch'] = array(
    'title' => 'Switch user',
    'page callback' => 'account_switch_user',
    'page arguments' => array(1),
    'access arguments' => array('switch users'),
    'type' => MENU_LOCAL_TASK,
	);

	$items['admin/config/system/withdrawals'] = array(
    'title' => 'Išmokėjimų nustatymai',
    'description' => 'Pinigų išmokėjimų papildomi nustatymai',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('account_withdrawals_config', 'bank-transfer'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
	);

	$items['admin/config/system/withdrawals/bank-transfer'] = array(
    'title' => 'Bankinis pavedimas',
    'description' => 'Pinigų išmokėjimų papildomi nustatymai',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('account_withdrawals_config', 'bank-transfer'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
	);

	$items['admin/config/system/withdrawals/moneybookers'] = array(
    'title' => 'Moneybookers',
    'description' => 'Pinigų išmokėjimų papildomi nustatymai',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('account_withdrawals_config', 'moneybookers'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
	);
	
	$items['user/%user/blockpayment'] = array(
	    'title' => 'Block payments gateway',
	    'page callback' => 'account_deposit_block',
	    'page arguments' => array(1,3),
	    'access arguments' => array('access block payments gateways'),
	    'type' => MENU_LOCAL_TASK,
		'type' => MENU_LOCAL_TASK,
	    'weight' => -1,
	    'theme' => variable_get('admin_theme', 0),
	);

	return $items;
}

function account_admin_awaiting_ajax(){
	$r = db_query('select count(*) as cnt from {users} WHERE "data" LIKE \'%s:14:"agreement_step";i:4;%\'')->fetch();
	header('Content-type: application/json');
	header('Access-Control-Allow-Origin: *');
	print $r->cnt;
	exit;
}

function account_switch_user($account = NULL) {
	global $user;
	if(!empty($account) AND $account->uid != 1){
		if ($user->uid) {
			module_invoke_all('user_logout', $user);
		}
		if(!empty($account)) {
			$old_uid = $user->uid;
			$user = $account;
			$user->timestamp = time() - 9999;
			if (!$old_uid) {
				// Switch from anonymous to authorized.
				drupal_session_regenerate();
			}
			$edit = array();
			user_module_invoke('login', $edit, $user);
		}
		elseif ($user->uid) {
			session_destroy();
		}
	}
	drupal_goto();
}
/**
 * @deprecated: this should be removed 
 */
function account_google_utms(){
	return array('utm_source', 'utm_medium', 'utm_term', 'utm_content', 'utm_campaign');
}

function _menu_example_menu_page($content = NULL, $arg1 = NULL, $arg2 = NULL) {
	$output =  '<div>' . $content . '</div>';

	if (!empty($arg1)) {
		$output .= '<div>' . t('Argument 1=%arg', array('%arg' => $arg1)) . '</div>';
	}
	if (!empty($arg2)) {
		$output .= '<div>' . t('Argument 2=%arg', array('%arg' => $arg2)) . '</div>';
	}
	return $output;
}

function account_access_agreement_page($account = null){
	return account_need_agreement('access account agreement', $account);
}

function account_need_agreement($permission, $account = null){
	if($account === NULL){
		global $user; $account = clone $user;
	}
	return (user_access($permission, $account) && (!isset($account->data['tsuid']) || !$account->data['tsuid']) /*&& ($GLOBALS['user']->uid == $account->uid || user_access('administer users'))*/ && $account->uid > 0);
	//   return (user_access($permission, $account) && ($GLOBALS['user']->uid == $account->uid AND !user_access('access account bets')) || user_access('administer users')) && (!isset($account->data['tsuid']) || !$account->data['tsuid']) && $account->uid > 0;
}

function account_need_to_upload_agreement($account, $permission = 'access account agreement upload'){
	global $user; $account = clone $user;
	if(user_access($permission, $account)){
		if((isset($account->data['agreement_step']) AND (int)$account->data['agreement_step'] > 2)){
			if(isset($account->data['agreement_file']) AND $account->data['agreement_file']){
				return false;
			}
			return true;
		}
	}
	return false;
}

function account_need_to_upload_document($account){
	global $user; $account = clone $user;
	if(user_access('access account document upload', $account)){
		if(isset($account->data['agreement_step']) AND ($account->data['agreement_step'] > 2 AND $account->data['agreement_step'] < 5)){
			return true;
			if(isset($account->data['document_file']) AND $account->data['document_file']){
				return false;
			}
			return true;
		}
	}
	return false;
}

function account_page_access($permission){
	global $user; $account = clone $user;
	return (($GLOBALS['user']->uid == $account->uid || user_access('administer users')) && user_access($permission, $account))  && $account->uid > 0;

}

function account_edit_password_access(){
	global $user; $account = clone $user;
	return $pass_reset = isset($_SESSION['pass_reset_' . $account->uid]) && isset($_GET['pass-reset-token']) && ($_GET['pass-reset-token'] == $_SESSION['pass_reset_' . $account->uid]);

}

function account_menu_alter(&$callbacks) {

	$callbacks['user/reset/%/%/%']['page arguments'] = array('account_pass_reset', 2, 3, 4);
	$callbacks['user/reset/%/%/%']['file'] = 'account.pages.inc';
	$callbacks['user/reset/%/%/%']['module'] = 'account';

	$callbacks['user']['title'] = 'Mano erdvė';
	$callbacks['user']['title'] = 'account_menu_title';

	$callbacks['admin/reports/dblog']['page callback'] = 'account_dblog_overview';
}

function account_permission() {
	return array(
    'access account activation' => array(
      'title' => t('Aktyvuoti vartotojus'),
      'description' => t('Gali peržiūrėti laukiančiųjų aktyvacijos sąrašą ir aktyvuoti vartotoją'),
	),
    'access account bets' => array(
      'title' => t('Mano statymai'),
      'description' => t('Peržiūrėti statymus.'),
	),
    'access account agreement' => array(
      'title' => t('Pasirašyti sutartį'),
      'description' => t('Sutarties pasirašymo puslapis.'),
	),
    'access account attach agreement' => array(
      'title' => t('Priskirti sutartį'),
      'description' => t('Sutarties priskyrimo puslapis.'),
	),
    'access account document upload' => array(
      'title' => t('Dokumento įkėlimas'),
      'description' => t('Dokumento įkėlimo puslapis'),
	),
    'access account agreement upload' => array(
      'title' => t('Sutarties įkėlimas'),
      'description' => t('Sutarties įkėlimo puslapis'),
	),
    'access account deposits' => array(
      'title' => t('Saskaitos papildymas'),
      'description' => t('Leisti papildyti sąskaitą'),
	),
    'access account preferences' => array(
      'title' => t('Paskyros nustatymai'),
      'description' => t('Leisti keisti paskyros nustatymus'),
	),
    'access account withdrawals' => array(
      'title' => t('Pinigų įšmokėjimas'),
      'description' => t('Leisti išmokas'),
	),
    'access account info' => array(
      'title' => t('Mano duomenys'),
      'description' => t('Peržiūrėti ir koreguoti duomenis'),
	),
    'access account get pins' => array(
      'title' => t('Atsisiųsti kliento ir PIN kodų korteles'),
      'description' => t('Vartotojas gali gauti PIN kodų kortelę el. paštu'),
	),
    'access account history' => array(
      'title' => t('Sąskaitos istorija'),
      'description' => t('Peržiūrėti sąskaitos balanso istoriją'),
	),    
    'access private files' => array(
      'title' => t('Peržiūrėti įkeltus failus'),
      'description' => t('Gali peržiūrėti failus, įkeltus į privatų katalogą'),
	),			
	'access block payments gateways' => array(
			'title' => t('Apriboti vartotojų įmokų šaltinius'),
			'description' => t('Gali valdyti įmokų šaltinius kiekvienam vartotojui atskirai'),
	),
	);
}


function account_variable_info($options){
	$variables['account_mail_account_registered_subject'] = array(
    'title' => t('Paskyra užregistruota'),
    'description' => t('Laiško "Paskyra užregistruota" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_registered_body'] = array(
    'title' => t('Paskyra užregistruota'),
    'description' => t('Laiško "Paskyra užregistruota" turinys'),
    'type' => 'text',
	);

	$variables['account_mail_account_pending_approval_subject'] = array(
    'title' => t('Naujas vartotojas laukia patvirtinimo'),
    'description' => t('Laiško "Naujas vartotojas laukia patvirtinimo" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_pending_approval_body'] = array(
    'title' => t('Naujas vartotojas laukia patvirtinimo'),
    'description' => t('Laiško "Naujas vartotojas laukia patvirtinimo" turinys'),
    'type' => 'text',
	);

	$variables['account_mail_account_pending_approval_update_subject'] = array(
    'title' => t('Vartotojas atnaujino informaciją'),
    'description' => t('Laiško "Vartotojas atnaujino informaciją" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_pending_approval_update_body'] = array(
    'title' => t('Vartotojas atnaujino informaciją'),
    'description' => t('Laiško "Vartotojas atnaujino informaciją" turinys'),
    'type' => 'text',
	);


	$variables['account_mail_account_pending_approval_upload_document_subject'] = array(
    'title' => t('Vartotojas įkėlė naują dokumentą'),
    'description' => t('Laiško "Vartotojas įkėlė naują dokumentą" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_pending_approval_upload_document_body'] = array(
    'title' => t('Vartotojas įkėlė naują dokumentą'),
    'description' => t('Laiško "Vartotojas įkėlė naują dokumentą" turinys'),
    'type' => 'text',
	);


	$variables['account_mail_account_approval_confirm_subject'] = array(
    'title' => t('Vartotojas patvirtintas'),
    'description' => t('Laiško "Vartotojas patvirtintas" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_approval_confirm_body'] = array(
    'title' => t('Vartotojas patvirtintas'),
    'description' => t('Laiško "Vartotojas patvirtintas" turinys'),
    'type' => 'text',
	);

	$variables['account_mail_account_approval_reject_subject'] = array(
    'title' => t('Vartotojas atmestas'),
    'description' => t('Laiško "Vartotojas atmestas" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_approval_reject_body'] = array(
    'title' => t('Vartotojas atmestas'),
    'description' => t('Laiško "Vartotojas atmestas" turinys'),
    'type' => 'text',
	);


	$variables['account_mail_account_reject_incorrect_document_subject'] = array(
    'title' => t('Netinkamas dokumentas'),
    'description' => t('Laiško "Netinkamas dokumentas" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_reject_incorrect_document_body'] = array(
    'title' => t('Netinkamas dokumentas'),
    'description' => t('Laiško "Netinkamas dokumentas" turinys'),
    'type' => 'text',
	);

	$variables['account_mail_account_reject_update_personal_info_subject'] = array(
    'title' => t('Patikslinkite asmeninius duomenis'),
    'description' => t('Laiško "Patikslinkite asmeninius duomenis" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_reject_update_personal_info_body'] = array(
    'title' => t('Patikslinkite asmeninius duomenis'),
    'description' => t('Laiško "Patikslinkite asmeninius duomenis" turinys'),
    'type' => 'text',
	);

	$variables['account_mail_account_get_pins_subject'] = array(
    'title' => t('Vartotojo PIN kodai'),
    'description' => t('Laiško "Vartotojo PIN kodai" tema'),
    'type' => 'string',
	);
	$variables['account_mail_account_get_pins_body'] = array(
    'title' => t('Vartotojo PIN kodai'),
    'description' => t('Laiško "Vartotojo PIN kodai" turinys'),
    'type' => 'text',
	);

	$variables['account_currency_default'] = array(
    'title' => t('Pagrindinė valiuta'),
    'description' => t('Pagrindinė svetainėje naudojama valiuta'),
    'type' => 'string',
	);

	$variables['account_currency_enabled'] = array(
    'title' => t('Leidžiamos valiutos'),
    'description' => t('Valiutos, iš kurių vartotojas gali pasirinkti norimą'),
    'type' => 'string',
	);

	//   $variables['account_mail_account_registered_[mail_part]'] = array(
	//     'type' => 'user_mail',
	//     'title' => t('Laiškas - Paskyra užregistruota', array(), $options),
	//     'description' => 'TESTAS',
	//     'group' => 'user_mails',
	//   );
	return $variables;
}


function htmlmail_variable_info($options){
	$variables['htmlmail_header'] = array(
    'title' => t('Header HTML'),
    'description' => t('Laiško viršaus turinys'),
    'type' => 'text',
	);
	$variables['htmlmail_footer'] = array(
    'title' => t('Footer HTML'),
    'description' => t('Laiško apačios turinys'),
    'type' => 'text',
	);
	return $variables;
}

function account_file_download($uri){

	if(strpos($uri, 'private://') !== FALSE){
		if(user_access('access private files')) {
			$file = new stdClass();
			$file->filename = basename($uri);
			$file->uri = $uri;
			$file->filemime = file_get_mimetype($uri);
			$file->filesize = filesize($uri);
			return file_get_content_headers($file);
		}
		return -1;
	}

}

function account_menu_title() {
	return t('Mano erdvė');
}

function account_page_agreement_title(){

	return t('"@sitename" lažybų sutarties pasirašymas', array('@sitename' => variable_get('site_name')));

}

function account_theme() {
	$theme_hooks = array(
    'account_page' => array(
      'template' => 'account-page',
      'variables' => array('title' => NULL, 'content' => NULL),
	),
    'deposits_form' => array(
      'render element' => 'form'
      ),
    'deposits_methods' => array(
	'render element' => 'rows'
    ),
    'withdrawals_config_form' => array(
      'render element' => 'form'
      ),
      );
      return $theme_hooks;
}


/**
 * Implements hook_block_info().
 */
function account_block_info() {
	$blocks['user_bar'] = array(
      'info' => t('User bar'),
      'region' => 'top',
      'status' => 1,
      'visibility' => 0,
      'weight' => -4,
      'cache' => DRUPAL_NO_CACHE,
	);
	return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates a block containing the bet slip.
 */
function account_block_view($delta = ''){
	global $user;
	$output = '';
	if (!$user->uid) {
		$form = drupal_get_form('user_login_block');
		$form['links']['#weight'] = -20;
		$form['name']['#title_display'] = 'invisible';
		$form['name']['#value'] = t('El.paštas/Vartotojas');
		$form['name']['#attributes']['autocomplete'][] = 'off';
		$form['name']['#attributes']['onblur'][] = 'if (this.value == \'\') {this.value = \''.$form['name']['#value'].'\';}';
		$form['name']['#attributes']['onfocus'][] = 'if (this.value == \''.$form['name']['#value'].'\') {this.value = \'\';}';

		$form['pass']['#title_display'] = 'invisible';
		$form['pass']['#value'] = t('Slaptažodis');
		$form['pass']['#attributes']['autocomplete'][] = 'off';
		$form['pass']['#attributes']['onblur'][] = 'if (this.value == \'\') {this.value = \''.t('Slaptažodis').'\';}';
		$form['pass']['#attributes']['onfocus'][] = 'if (this.value == \''.t('Slaptažodis').'\') {this.value = \'\';}';
		/*$form['action_submit'] = array(
		 '#type' => 'submit',
		 '#value' => t('Log in'),
		 '#weight' => '20',
		 );
		 unset($form['actions']);
		 */
		unset($form['links']);
		$output = '<span class="top_area register">'.l(t('Registracija'), 'user/register', array('title' => t('Registracija'), 'html' => true)).'</span>';
		$output .= '<span class="top_area lost-password">'.l(t('Pamiršau slaptažodį'), 'user/password', array('title' => t('Pamiršau slaptažodį'), 'html' => true)).'</span>';

		$output .= drupal_render($form);
		
		$output .= '<button class="top_area" title="'.t('Prisijungti su Paysera paskyra').'" onclick="document.location=\'/account/login/paysera\';" style="background:#666 linear-gradient(to bottom, #999 0%, #777 50%,#666 100%);color:#eee;border:1px solid #ddd;border-radius:3px;margin-top:5px;height:23px;line-height:19px;font-size:11px;padding:0 5px 2px; cursor:pointer;margin-left:-5px">'.t('Paysera').'</button>';
	}else{
		$is_deposit_promo = false;
        $Wallets = account_user_data($user->uid);
        $user_home = 'account';
        if(account_page_access('access account deposits')){
			$user_home = 'account/deposits';
		}
		$output .= '<ul class="nav navbar-nav navbar-right user-menu">';
        $output .= '<li class="my-account">'.l((isset($user->data['firstname']) ? '<u>'.$user->data['firstname'].' '.$user->data['middlename'].' '.$user->data['surname'].'</u>' : '-'), $user_home, array('title' => t('My account'), 'html' => true)).'</li>';
		if(account_page_access('access account history')){
			$output .= '<li class="my-balance">'.l(($user->data['firstname'] == '' ? '-' : account_balance_string()), 'account/history', array('html' => true)).'</li>';
            // adding Discount vizualization to user front-end
            if(SHOW_DISCOUNT_SYSTEM && isset($Wallets->discount_amount)){
            	//@todo: calc much more accurate
            	$is_deposit_promo = false;
                $title = '<span class="popup">'.t('<strong>Jūsų nuolaidos sąlygos:</strong><br> 
                            Galioja iki: @ValidUntil<br>
                            Statymo nuolaida: @DiscountPercent%<br>
                            Min. koef.: @MinOdds<br>
                            Išnaudota statymų: <span id="account_balance_discount_UsedCount">@UsedCount</span>/@MaxUsedCount<br><span class="small" style="line-height:normal">Nuolaidos galioja sporto įvykiams iki varžybų pradžios. <br>Nuolaidų sąlygas bendrovė pasilieka teisę keisti be įspėjimo.</span>'
                        ,  array('@DiscountPercent' => $Wallets->discount_max_cover_percent, '@MinOdds' => $Wallets->discount_min_total_coef, '@ValidUntil' => $Wallets->discount_valid_to, '@UsedCount' => $Wallets->discount_used_count, '@MaxUsedCount' => $Wallets->discount_max_used_count))
                        .'</span>';
                $output .= '<li class="my-discount">'.l('<span id="account_balance_discount_string" style="color:gold;">'. account_balance_discount_string($Wallets->discount_current_amount).'</span>'.$title, '#', array('html' => true, 'attributes' => array('onclick' => 'return false;'))).'</li>';
            }
            // adding Loyality vizualization to user front-end
            if(SHOW_LOYALITY_SYSTEM && isset($Wallets->tp_amount))$output .= '<li class="my-goldens">'.l($Wallets->tp_amount.' '.$Wallets->tp_currency, 'account/history', array('html' => true)).'</li>';
		}
		if(account_page_access('access account deposits')){
			$deposit_attr = array(
				'attributes' => array('title' => t('Papildyti sąskaitą')),
				'html' => true
			);
			$deposit_query = array();
			if($is_deposit_promo){
				$deposit_attr['attributes']['title']   = t('<span style="color:gold;">Kaip gauti <strong>@Percent%</strong> nuolaidą?</span>', array('@Percent' => $Wallets->discount_max_cover_percent)); 
				$deposit_attr['query']['promo']        = 'discount';
				$deposit_attr['attributes']['onclick'] = '_gaq.push([\'_trackEvent\', \'Promotion\', \'Discount\', \''. $Wallets->discount_max_cover_percent.'%-'. $Wallets->discount_amount.'LTL\'])';
			}			
			$output .= '<li class="deposits">'.l($deposit_attr['attributes']['title'], 'account/deposits', $deposit_attr).'</li>';
		}
		if(account_access_agreement_page()){
			$output .= '<li class="agreement">'.l(t('i-lažybų sutartis'), 'account/agreement', array('title' => t('i-lažybų sutartis'))).'</li>';
		}
		$output .= '<li class="logout">'.l(t('Atsijungti'), 'user/logout/', array('attributes' => array('class' => 'button'))).'</li>';
		$output .= '</ul>';
	}
	$block['subject'] = '';
	$block['content'] = '<div id="top-login">'.$output.'</div>';
	return $block;
}

function account_user_view($account){
	if(user_access('administer users')){
		drupal_goto('user/'.$account->uid.'/edit');
	}else{
		drupal_goto('account');
	}
}



/* ACCOUNT DEFAULTS BEGIN */

function account_weight_sort($a, $b) {
	if ($a['weight'] == $b['weight']) {
		return 0;
	}

	return ($a['weight'] > $b['weight']) ? 1 : -1;
}

function account_history_types(){
	return array(
    'all' => t('Visi mokėjimai'),
    'income' => t('Įmoka'),
    'outcome' => t('Išmoka'),
	);
}

function account_history_months(){
	return array(
    'today' => t('Šiandien'),
    'yesterday' => t('Vakar'),
    '7days' => t('7 dienų'),
    '30days' => t('30 dienų'),
    '1' => t('Sausis'),
    '2' => t('Vasaris'),
    '3' => t('Kovas'),
    '4' => t('Balandis'),
    '5' => t('Gegužė'),
    '6' => t('Birželis'),
    '7' => t('Liepa'),
    '8' => t('Rugpjūtis'),
    '9' => t('Rugsėjis'),
    '10' => t('Spalis'),
    '11' => t('Lapkritis'),
    '12' => t('Gruodis'),
	);
}

function account_pdf_month($month = false){

	$months = array(
    '01' => t('sausio'),
    '02' => t('vasario'),
    '03' => t('kovo'),
    '04' => t('balandžio'),
    '05' => t('gegužės'),
    '06' => t('birželio'),
    '07' => t('liepos'),
    '08' => t('rugpjūčio'),
    '09' => t('rugsėjo'),
    '10' => t('spalio'),
    '11' => t('lapkričio'),
    '12' => t('gruodžio'),
	);
	if($month){
		return $months[$month];
	}
	return $months;
}

function account_mail($key, &$message, $params) {
	$language = $message['language'];
	$variables = array('user' => $params['account']);
	$message['subject'] .= _account_mail_text($key . '_subject', $language, $variables);
	$message['body'][] = _account_mail_text($key . '_body', $language, $variables);
}

function _account_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
	$langcode = isset($language) ? $language->language : NULL;

	//   if ($admin_setting = variable_get('account_mail_' . $key, FALSE)) {
	if ($admin_setting = i18n_variable_get('account_mail_' . $key, $langcode, FALSE)) {
		// An admin setting overrides the default string.
		$text = $admin_setting;
	}
	else {
		// No override, return default string.
		switch ($key) {
			case 'account_pending_approval_subject':
				$text = t('Naujas vartotojas laukiantis patvirtinimo svetainėje [site:name]', array(), array('langcode' => $langcode));
				break;
			case 'account_pending_approval_body':
				$text = t("
Vartotojas [user:firstname] [user:surname] ([user:mail]) įkėlė savo dokumentą ir laukia patvirtinimo

--  [site:name] team", array(), array('langcode' => $langcode));
				break;
			case 'account_approval_confirm_subject':
				$text = t('Administratorius patvirtino jus svetainėje [site:name]', array(), array('langcode' => $langcode));
				break;
			case 'account_approval_confirm_body':
				$text = t("
[user:firstname] [user:surname],
Jūsų paskyra ([user:mail]) buvo patvirtinta.

--  [site:name] team", array(), array('langcode' => $langcode));
				break;
			case 'account_approval_reject_subject':
				$text = t('Administratorius atmetė jūsų dokumentą svetainėje [site:name]', array(), array('langcode' => $langcode));
				break;
			case 'account_approval_reject_body':
				$text = t("
[user:firstname] [user:surname],
Jūsų įkeltas dokumentas buvo atmestas.

Atmetimo komentatas: [user:reject_comment]

Prisijungti prie sistemos ir įkelkite naują dokumentą.

--  [site:name] team", array(), array('langcode' => $langcode));
				break;
			
			case 'account_birthday_subject':
				$text = t("Su gimimo diena! [site:name]",array(), array('langcode' => $langcode));
				break;
			case 'account_birthday_body':
			$text = '<img src="https://static.topsport.lt/sites/all/modules/topsport/account/automailer/files/red_balloons.jpg" style="float:right;" />'.t("
[user:firstname] [user:surname],
Sveikiname su gimimo diena.


--  [site:name] team", array(), array('langcode' => $langcode));
				break;	
			
			case 'account_inactive3m_subject':
				$text = t("Jau 3 mėnesius jūs nesilankėte svetainėje [site:name]",array(), array('langcode' => $langcode));
				break;
			
			case 'account_inactive1m_subject':
				$text = t("Jau mėnesį jūs nesilankėte svetainėje [site:name]",array(), array('langcode' => $langcode));
				break;
						
				
			case 'account_inactive2w_subject':
				$text = t("Jau dvi savaites jūs nesilankėte svetainėje [site:name]",array(), array('langcode' => $langcode));
				break;
			
			
			case 'account_inactive3d_subject':
				$text = t("Jau 3 dienas jūs nesilankėte svetainėje [site:name]",array(), array('langcode' => $langcode));
				break;
			
			case 'account_inactive3m_body':
			case 'account_inactive2w_body':
			case 'account_inactive3d_body':
			case 'account_inactive1m_body':
				
				if(array_key_exists(12, $variables['user']->roles)) // non-authenticated
				{
					$args['!notifyinactive'] = t("
Norėtume priminti, kad jūs dar nepatvirtinote savo el.pašto adreso. Tai galite padaryti paspaudę šią nuorodą: 

!url

",array('!url'=>  account_activation_url($variables['user'])), array('langcode' => $langcode));
				}
				elseif(array_key_exists(7, $variables['user']->roles)) // naujai registruotas klientas
				{
					$args['!notifyinactive'] = t("
Norėtume priminti, kad dar nebaigėti registracijos procedūros - neužpildėte reikiamos informacijos.
",array(), array('langcode' => $langcode));
				}
				elseif(array_key_exists(8, $variables['user']->roles)) // klientas pasirašęs sutartį
				{
					$args['!notifyinactive'] = t("
Norėtume priminti, kad dar neatsiuntėte asmens tapatybę patvirtinančio dokumento skenuotos kopijos. 

",array(), array('langcode' => $langcode));
				}
				elseif(array_key_exists(4, $variables['user']->roles)) // pilnateisis klientas
				{
					$args['!notifyinactive'] = '';
				}
				else
					$args['!notifyinactive'] = '';
					
				
				if($key == 'account_inactive3d_body')
				$text = t("
[user:firstname] [user:surname],

Jau tris dienas nesilankėte [site:name] svetainėje. Galbūt iškilo klausimų ar problemų? Su malonumu padėtume Jums jas išspręsti.

!notifyinactive

--  [site:name] team",$args, array('langcode' => $langcode));
				
				elseif($key == 'account_inactive2w_body')
					$text = t("
[user:firstname] [user:surname],

Jau dvi savaites nesilankėte [site:name] svetainėje. Galbūt iškilo klausimų ar problemų? Su malonumu padėtume Jums jas išspręsti.

!notifyinactive

--  [site:name] team",$args, array('langcode' => $langcode));
				
				elseif($key == 'account_inactive1m_body')
					$text = t("
[user:firstname] [user:surname],

Jau mėnesį nesilankėte [site:name] svetainėje. Galbūt iškilo klausimų ar problemų? Su malonumu padėtume Jums jas išspręsti.

!notifyinactive

--  [site:name] team",$args, array('langcode' => $langcode));
				
				elseif($key == 'account_inactive3m_body')
					$text = t("
[user:firstname] [user:surname],

Jau tris mėnesius nesilankėte [site:name] svetainėje. Galbūt iškilo klausimų ar problemų? Su malonumu padėtume Jums jas išspręsti.

!notifyinactive

--  [site:name] team",$args, array('langcode' => $langcode));
				
				break;
			default:
				$text = '';
				break;
		}
	}
	if ($replace) {
		return token_replace($text, $variables, array('language' => $language, 'callback' => 'account_mail_tokens', 'sanitize' => FALSE));
	}
	return $text;
}

function account_mail_tokens(&$replacements, $data, $options) {
	global $base_url;
	if (isset($data['user'])) {
        $first_name = isset($data['user']->data['firstname']) ? $data['user']->data['firstname'] : '';
        $middlename = isset($data['user']->data['middlename']) ? $data['user']->data['middlename'] :'';
        $surname = isset($data['user']->data['surname']) ? $data['user']->data['surname'] :'';
		$replacements['[user:firstname]']          = $first_name.' '.$middlename;
        $replacements['[user:firstname.toLT]']     = _account_convert_subject_to_lithuania($first_name);
		$replacements['[user:surname]']            = $surname;
        $replacements['[user:name]']               = $data['user']->name;
		$replacements['[user:reject_comment]']     = (isset($data['user']->data['agreement_reject_comment']) ? $data['user']->data['agreement_reject_comment'] : '');
		$replacements['[user:one-time-login-url]'] = account_activation_url($data['user']);
		$replacements['[user:get-user-card-url]']  = account_getusercard_url($data['user']);
		$replacements['[user:admin-approve-link]'] = 'https://www.topsport.lt/control/is/cms.php?u=admin/people/activation/'.$data['user']->uid;
	}
}

/**
 * This function returning in lithuanian customer eg First name
 * @param string $name
 * @return string 
 */
function _account_convert_subject_to_lithuania($name){
    $name = trim($name);    
    if(substr($name, strlen($name)-2) == 'as'){
        $name = substr($name, 0,strlen($name)-2) . 'ai';
    }elseif(substr($name, strlen($name)-2) == 'is'){
        $name = substr($name, 0,strlen($name)-2) . 'i';
    }elseif(substr($name, strlen($name)-2) == 'us'){
        $name = substr($name, 0,strlen($name)-2) . 'au';
    }elseif(substr($name, strlen($name)-3) == 'ius'){
        $name = substr($name, 0,strlen($name)-3) . 'iau';
    }elseif(substr($name, strlen($name)-2) == 'ys'){
        $name = substr($name, 0,strlen($name)-2) . 'į';
    }elseif(substr($name, strlen($name)-2) == 'ė'){
        $name = substr($name, 0,strlen($name)-2) . 'e';
    }        
    return (ucfirst(strtolower($name)));
}

function account_activation_url($account) {
	$timestamp = REQUEST_TIME;
	return url("account/activation/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
}

function account_getusercard_url($account) {
	$timestamp = REQUEST_TIME;
	return url("account/getusercard/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
}

function account_generatePinCardPDF($account, $download = false){  
	watchdog('pincard', 'Vartotojui %name sugeneruota PIN kodų kortelė.', array('%name' => $account->name));
	account_log($account->uid, 'pin kodų kortelė', 'Vartotojui %name sugeneruota PIN kodų kortelė.', array('%name' => $account->name));
	$pin_card_number = $account->data['PinCardNumber'];
	$pass_key = md5(strval($account->data['tsuid']).'3646E6A3-CF61-4C4A-9AAF-096A0BE693B2'.strval($account->data['PinCardNumber']));
	$user_pins = topsport_getPins($pin_card_number, $pass_key);
	if(empty($user_pins)){ 
	  watchdog('getPins', 'Nepavyko sugeneruoti PIN kodų kortelės %pincardnr' , array('%pincardnr'=>$pin_card_number));
	  //drupal_set_message(t('Nepavyko sugeneruoti PIN kodų kortelės'), 'error'); 
	  return false; 
	}
	require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'account') . '/account.pdf.class.inc');
	$pdf = new AccountPDF();
	$pdf->SetMargins(0, 0, 0);
	$pdf->SetAutoPageBreak(false, 0);
	$pdf->setFontSubsetting(false);
	$pdf->setSourceFile(DRUPAL_ROOT . '/sites/all/libraries/pincard.pdf');
	$pdf->AddPage();
	$pdf->useTemplate($pdf->importPage(1));

	$pdf->SetFillColor(255, 255, 255);
	$pdf->SetXY(10, 10);
	$pdf->Cell(50, 20, '', 0, 0, 'C', true);

	$pdf->SetTextColor(48, 85, 162);
	$pdf->SetFont("freeserifb", "", 28);
	$pdf->SetXY(0, 21);
	$pdf->Cell(210, 0, t('KLIENTO DUOMENYS'), 0, 1, "C");

	$pdf->SetFont("freeserifb", "", 18);
	$pdf->SetXY(0, 34);
	$pdf->Cell(210, 0, '('.mb_strtoupper($account->data['firstname'].' '.$account->data['middlename'].' '.$account->data['surname'], 'UTF-8').')', 0, 1, "C");

	$pdf->SetFont("freeserifb", "", 35);
	$pdf->SetXY(55, 116);
	$pdf->Write(0, $account->data['UserCardNumber']);

	$pdf->SetTextColor(0, 0, 0);
	$pdf->SetFont("freeserifb", "", 14);
	$cordX = 51;
	$cordY = 130;
	$k = 0;
	foreach($user_pins as $key => $pin){
		$k++;
		$pdf->SetXY($cordX, $cordY + (10 * $k));
		$pdf->Write(0, $key.') '.$pin);
		if($k == 6){
			$k = 0;
			$cordX += 30;
		}
	}
	$pdf->SetFont("freeserifb", "", 8);
	$pdf->SetXY(153, 197);
	$pdf->Write(0, $pin_card_number);

	$pdf->SetFont("freeserifb", "", 11);
	$pdf->SetXY(0, 234);
	$pdf->Cell(210, 0, t('Ši informacija Jums bus reikalinga atlikti kai kurias operacijas.'), 0, 1, "C");
	$pdf->SetXY(0, 238);
	$pdf->Cell(210, 0, t('Šiame dokumente yra Jums išduota kliento kortelė (Nr.: @cardNumber) ir PIN kodų kortelė (Nr.: @pinNumber)', array('@cardNumber' => $account->data['UserCardNumber'], '@pinNumber' => $pin_card_number)), 0, 1, "C");
	$pdf->SetFont("freeserifb", "", 9);
	$pdf->SetTextColor(255, 0, 0);
	$pdf->SetXY(0, 243);
	$pdf->Cell(210, 0, t('Pateiktus duomenis rekomenduojame laikyti saugiai ir neperduoti tretiesiems asmenims.'), 0, 1, "C");

	if($download){
		$pdf->Output('pinCard.pdf', 'D');exit;
	}else{
		$filecontent = $pdf->Output('pinCard.pdf', 'S');
		$directory = 'private://pdfs/';
		if (!file_prepare_directory($directory, FILE_MODIFY_PERMISSIONS | FILE_CREATE_DIRECTORY)) {
			watchdog('file', t('Failed to create %directory.', array('%directory' => $directory)), WATCHDOG_ERROR);
		}
		$filename = $directory.md5($account->uid.REQUEST_TIME.'pincard').'.pdf';
		$filename = file_unmanaged_save_data($filecontent, $filename, FILE_EXISTS_RENAME);
		return $filename;
	}
}

function _account_mail_notify($op, $account, $language = NULL) {
	$params['account'] = $account;
	$language = $language ? $language : user_preferred_language($account);
	if(in_array($op, array('account_approval_confirm', 'account_get_pins'))){
		$filename = account_generatePinCardPDF($account);
		if(!$filename){ 
		  watchdog('PinCardPDF', 'Nepavyksta sukurti  prisegtuko el. laiškui su pin kodų informacija. Pavadinimas: %filename', array('%filename' => $filename));
		  return false; 
		}
		$params['attachments'][] = array(
      'filepath' => $filename,
      'filecontent' =>  null,
      'filename' => 'PinCard.pdf',
      'filemime' => null,
		);
	}
	if(in_array($op, array('account_pending_approval', 'account_pending_approval_upload_document', 'account_pending_approval_update'))) {
		$mail = drupal_mail('account', $op, variable_get('account_administrator_mail', variable_get('site_mail')), language_default(), $params);
		//     $mail['to'] = 'info@topsport.lt'; drupal_mail_system('account', $op)->mail($mail);
		//     $mail['to'] = 'test@webpartners.lt'; drupal_mail_system('account', $op)->mail($mail);
	}elseif($op == 'account_registered'){
		$mail = drupal_mail('account', $op, $account->mail, $language, $params, 'noreplay@topsport.lt');
	}else{
		$mail = drupal_mail('account', $op, $account->mail, $language, $params);
	}
	if(in_array($op, array('account_approval_confirm', 'account_get_pins')) AND isset($filename)){
		file_unmanaged_delete($filename);
	}
	return empty($mail) ? NULL : $mail['result'];
}


function account_cardStatuses($statusNr){
	$statuses = array(
    '2' => array(0, 1, 2),// laukiama
    '3' => array(3, 13, 21),// laimeta
    '5' => array(5),// pralaimeta
	);

	return (isset($statuses[$statusNr]) ? $statuses[$statusNr] : array());
}

function account_cardStatusesClass($statusNr){

	switch($statusNr){
		case 0:
		case 1:
		case 2:
			return 'waiting';
			break;
		case 3:
		case 13:
		case 21:
			return 'won';
			break;
		case 5:
			return 'lost';
			break;
        case 4:
			return 'avoided';
			break;
		default:
			return '';
	}
}

/* ACCOUNT DEFAULTS END */



/* ACCOUNT FORMS BEGIN*/

function account_ucfirst($string, $e ='utf-8') {
	if (function_exists('mb_strtoupper') && function_exists('mb_substr') && !empty($string)) {
		//string = mb_strtolower($string, $e);
		$upper = mb_strtoupper($string, $e);
		preg_match('#(.)#us', $upper, $matches);
		$string = $matches[1] . mb_substr($string, 1, mb_strlen($string, $e), $e);
	} else {
		$string = ucfirst($string);
	}
	return $string;
}

function account_form_first_upper($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		$value = account_ucfirst($element['#value']);
		form_set_value($element, $value, $form_state);
	}
}
function account_form_remove_spaces($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		$value = preg_replace('/\s\s+/', ' ', trim($element['#value']));
		form_set_value($element, $value, $form_state);
	}
}
function account_form_first_upper_remove_spaces($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		$value = preg_replace('/\s\s+/', ' ', trim($element['#value']));
		$value = account_ucfirst($value);
		form_set_value($element, $value, $form_state);
	}
}
function account_form_validate_isGenericName($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		if(!preg_match('/^[^<>;=#{}]*$/ui', $element['#value'])){
			form_error($element, t('%name laukelio reikšmė neteisinga', array('%name' => $element['#title'])));
		}
	}
	return $element;
}
function account_form_validate_isName($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		if(!preg_match('/^[^0-9!<>,;?=+()@#"°{}_$%:]*$/ui', $element['#value'])){
			form_error($element, t('%name laukelio reikšmė neteisinga', array('%name' => $element['#title'])));
		}
	}
	return $element;
}
function account_form_validate_isAddress($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		if(!preg_match('/^[^!<>?=+@{}_$%]*$/ui',  $element['#value'])){
			form_error($element, t('%name laukelio reikšmė neteisinga', array('%name' => $element['#title'])));
		}
	}
	return $element;
}
function account_form_validate_isCityName($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		if(!preg_match('/^[^!<>;?=+@#"°{}_$%]*$/ui',  $element['#value'])){
			form_error($element, t('%name laukelio reikšmė neteisinga', array('%name' => $element['#title'])));
		}
	}
	return $element;
}
function account_form_validate_isPhoneNumber($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		if(!preg_match('/^[+0-9. ()-]*$/ui',  $element['#value'])){
			form_error($element, t('%name laukelio reikšmė neteisinga', array('%name' => $element['#title'])));
		}
	}
	return $element;
}
function account_form_validate_isPostCode($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		if(!preg_match('/^[a-z 0-9-]+$/ui',  $element['#value'])){
			form_error($element, t('%name laukelio reikšmė neteisinga', array('%name' => $element['#title'])));
		}
	}
	return $element;
}
function account_form_validate_isPersonalId($element, &$form_state) {
	if(isset($element['#value']) AND $element['#value']){
		if(isset($form_state['values']['data']['personal_country']) AND $form_state['values']['data']['personal_country'] == 'LT'){
            if(!user_access('administer users')){
                if(!account_is_valid_personal_id($element['#value'])){
                    form_error($element, t('%name laukelio reikšmė neteisinga', array('%name' => $element['#title'])));
                }
            }
		}
	}
	return $element;
}
function account_current_pass_validate($element, &$form_state) {
	form_error($element, t("Slaptažodis neteisingas"));
	if(isset($form_state['user']) AND $element['#value']){
		$account = $form_state['user'];
		if (isset($form_state['values']['current_pass'])) {
			require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
			$current_pass_failed = empty($form_state['values']['current_pass']) || !user_check_password($form_state['values']['current_pass'], $account);
			if ($current_pass_failed) {
				form_error($element, t("Slaptažodis neteisingas"));
			}
		}
	}
}
function account_validate_username($element, &$form_state){
	if(isset($element['#value']) AND $element['#value']){
		if (drupal_strlen($element['#value']) < 2) {
			form_error($element, t("Vartotojo vardas turi būti bent iš 2 simbolių"));
		}

	}
}
function account_validate_password($element, &$form_state){
	if(isset($element['#value']) AND $element['#value']){
		if (drupal_strlen($element['#value']) < 5) {
			form_error($element, t("Slaptažodis turi būti bent iš 5 simbolių"));
		}
	}
}
function account_validate_mail_blacklist($element, &$form_state){
	if(isset($element['#value']) AND $element['#value']){
		$list = explode('@', $element['#value']);
		list($mail, $provider) = explode('@', drupal_strtolower($element['#value']));
		$blacklist = variable_get('account_blacklisted_mail', '');
		$blacklist = explode(',', str_replace(' ', '', $blacklist));
		if (in_array(drupal_strtolower($provider), array_map('drupal_strtolower', $blacklist))){
			form_error($element, t('Jūsų naudojamas el. pašto tiekėjas yra nepatikimas, rekomenduojame naudoti patikimas ir nemokamas pašto aptarnavimo tarnybas (pvz.: <a href="https://www.google.com/accounts/NewAccount?service=mail" title="Gmail" target="_blank">gmail.com</a>, <a href="https://na.edit.yahoo.com/registration" title="Yahoo" target="_blank">yahoo.com</a>, <a href="https://signup.live.com/" title="Hotmail" target="_blank">hotmail.com</a> ar kitą).'));
		}
	}
}
function account_validate_email_exists($element, &$form_state){
	if(isset($element['#value']) AND $element['#value']){
		list($user, $domain) = explode('@', $element['#value']);
		if(!checkdnsrr($domain, 'MX')){
			form_error($element, t('The e-mail address %mail is not valid.', array('%mail' => $element['#value'])));
		}
		//     require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'account') . '/smtp-validate-email.php');
		//     $from = variable_get('site_mail');
		//     $mail = $element['#value'];
		//     $validator = new SMTP_Validate_Email($mail, $from);
		//     $smtp_results = $validator->validate();
		//     if(!$smtp_results[$mail]){
		//       form_error($element, t('The e-mail address %mail is not valid.', array('%mail' => $mail)));
		//     }
		}
}
function account_validate_pin_value($element, &$form_state){
	if(isset($element['#value']) AND $element['#value']){
		if(drupal_strlen($element['#value']) != 6){/* OR strval(intval($element['#value'])) !== strval($element['#value'])*/
			form_error($element, t('Neteisingas PIN kodas'));
		}
	}
}
function account_is_valid_personal_id($s){
	if (!is_numeric($s) || strlen($s) != 11) {
		return false;
	}
	$d=0; $e=0; $b=1; $c=3;
	for ($i=0;$i<10;$i++) {
		$a=$s[$i];
		$d=$d+($b*$a);
		$e=$e+($c*$a);
		$b++; if ($b==10) $b=1;
		$c++; if ($c==10) $c=1;
	}
	$d=$d % 11;
	$e=$e % 11;
	if ($d==10) {
		$i = ($e == 10) ? 0 : $e;
	} else {
		$i = $d;
	}
	return ($s[10]==$i) ? true : false;
}


function account_form_user_login_alter(&$form, &$form_state) {
	drupal_set_title(t('Prisijungimas'));    
	$form['name']['#description'] = '';
    if(isset($_COOKIE['ts_username']) && strlen($_COOKIE['ts_username']) > 1){
        //@todo: security check input from user cookies
        $form['name']['#default_value'] = $_COOKIE['ts_username'];
    }
    $form['name']['#attributes'] = array('placeholder' => t('Vartotojo el.paštas'));
	$form['pass']['#description'] = '';
    $form['pass']['#attributes'] = array('placeholder' => t('Slaptažodis'));
	$form['name']['#element_validate'][] = 'account_user_login_validate';
	$form['#submit'][] = 'account_form_user_login_redirect';
    $form['actions']['#weight'] = 50;    
    $form['actions']['submit']['#attributes']['class'] = array('btn-primary');    
    $form['lost-password'] = array(
      '#type' => 'markup',
      '#markup' => t('Pamiršote slaptažodį?').' '.l(t('Spauskite čia!'),'user/password'),
      '#weight' => 59,
      '#prefix' => '<div class="lost-password">',
      '#suffix' => '</div>',
    );
    $form['oauths'] = array(
      '#type'  => 'markup',
      '#markup' => l('<span>'.t('Prisijungti per').'</span><img src="/sites/all/themes/topsport2/files/images/mokejimai.png" alt="Mokėjimai.lt">','account/login/paysera', array('html' => true,'attributes'=> array('class'=> array('btn btn-paysera'),'title' => t('Jei turite mokejimai.lt sistemos prisijungimus, galite su jais prisijungti čia.'), 'data-toggle' => 'tooltip'))),
      '#weight' => 60,
    );
    $form['register']= array(
      '#type' => 'link',
      '#href' => url('user/register'),
      '#title' => t('Registruokis dabar'),
      '#attributes' => array('class'=> array('btn btn-default btn-register')),
      '#weight'=> 70
    );
    
}

function account_form_user_login_redirect(&$form, &$form_state){    
	if(!empty($form_state['uid'])){
		$account = user_load($form_state['uid']);
		if(account_access_agreement_page($account)){
			$_GET['destination'] = 'account/agreement/reset';
		}
	}
    $_GET['destination'] = 'odds-overview';
	$destination = drupal_get_destination();
	$form_state['redirect'] = $destination['destination'];
	$_SESSION['gemius'] = 'login';   
    setcookie('IsLogged', true, strtotime('+ 1 year'), '/'); 
}

function account_form_user_login_block_alter(&$form, &$form_state) {
	$form['name']['#element_validate'][] = 'account_user_login_validate';
	$form['#submit'][] = 'account_form_user_login_redirect';
}

function account_user_login_validate($element, &$form_state) {
	if (isset($form_state['values']['name'])) {
		if ($name = db_query('SELECT name FROM {users} WHERE (LOWER(mail) = LOWER(:name) OR LOWER(name) = LOWER(:name) OR (user_card_number IS NOT NULL AND user_card_number = LOWER(:name)) )', array(':name' => $form_state['values']['name']))->fetchField()) {
			$form_state['values']['name'] = $name;
            setcookie('ts.username', $name, strtotime('+ 1 year'));               
		}
	}
}

function account_form_user_pass_alter(&$form, &$form_state) {

	$form['info_pass'] = array(
    '#markup' => '<p>'.t('Jei norite iš naujo nustatyti slaptažodį, įrašykite visą el. pašto adresą, kurį naudojate prisijungdami prie "@sitename" paskyros. Jei nepamenate ir el. pašto adreso įveskite slapyvardį, kurį naudojote registracijos metu.', array('@sitename' => variable_get('site_name'))).'</p>',
    '#weight' => -50,
	);

	$form['text_required'] = array(
    '#markup' => '<div class="form-item form-required-text"><span class="form-required">*</span> '.t(' - privalomi laukai').'</div>',
    '#weight' => 10,
	);

	$form['info_pass2'] = array(
    '#markup' => '<div class="form-item"><p>'.t('Jei neturite "@sitename" paskyros, galite !register.', array('@sitename' => variable_get('site_name'), '!register' => l(t('sukurti ją dabar'), 'user/register'))).'</p></div>',
    '#weight' => 500,
	);

	drupal_set_title(t('Mano erdvė, pamiršau slaptažodį'));
}

/* account register form */
function account_form_user_register_form_alter(&$form, &$form_state) {
	account_account_form($form, $form_state);
	$form['info_register'] = array(
    '#markup' => '<p>'.t('Norint naudotis visomis "@sitename" lažybų svetainės teikiamomis paslaugomis privalote užsiregistruoti, forma pateikta žemiau.
    <br />Jeigu jau turite "@sitename" sąskaitą, galite !login.', array('@sitename' => variable_get('site_name'), '!login' => l(t('prisijungti'), 'user/login'))).'</p>',
    '#weight' => -50,
	);
	$form['info_required'] = array(
    '#markup' => '<h3>'.t('"@sitename" paskyrai būtina informacija', array('@sitename' => variable_get('site_name'))).'</h3>',
    '#weight' => -49,
	);
	$form['account']['mail']['#element_validate'][] = 'account_validate_mail_blacklist';
	$form['account']['mail']['#element_validate'][] = 'account_validate_email_exists';
	$form['#validate'][] = 'account_register_form_validate';
	$form['#submit'] = array('account_register_form_submit');
	$form['actions']['submit']['#attributes']['class'][] = 'form-submit-long';
	drupal_set_message(t('Ankščiau užsiregistravę klientai (turintys lažybų sutartį) svetainėje (www.topsport.lt) gali prisijungti tai pačiais prisijungimo duomenimis. Jei nepavyksta prisijungti, susisiekite.  Tel.: +370 37 409409 E-paštas: info@topsport.lt'), 'warning');
	drupal_set_title(t('Mano erdvė, sukurti paskyrą'));
}

function account_register_form_validate(&$form, &$form_state) {

	if(isset($form_state['values']['data']['birthday']) and is_string($form_state['values']['data']['birthday'])){
		if(strtotime($form_state['values']['data']['birthday']) > strtotime('- 18 years')){
			form_set_error('', t('Registruotis galima tik sulaukus 18 metų'));
		}
	}

	if(isset($form_state['values']['pass']) and $form_state['values']['pass']){
		if (drupal_strlen($form_state['values']['pass']) < 5) {
			form_set_error('pass', t("Slaptažodis turi būti bent iš 5 simbolių"));
		}
	}
}

/**
 * Submit handler for the user registration form.
 *
 * This function is shared by the installation form and the normal registration form,
 * which is why it can't be in the user.pages.inc file.
 *
 * @see user_register_form()
 */
function account_register_form_submit($form, &$form_state) {
	$admin = user_access('administer users');

	$pass = $form_state['values']['pass'];

	$notify = !empty($form_state['values']['notify']);

	// Remove unneeded values.
	form_state_values_clean($form_state);

	$form_state['values']['pass'] = $pass;
	$form_state['values']['init'] = $form_state['values']['mail'];

	$account = $form['#user'];

	entity_form_submit_build_entity('user', $account, $form, $form_state);

	// Populate $edit with the properties of $account, which have been edited on
	// this form by taking over all values, which appear in the form values too.
	$edit = array_intersect_key((array) $account, $form_state['values']);

	if(!$admin){
		$edit['status'] = 0;
		//$account = user_save($account, $edit);
	}
	$account = user_save($account, $edit);

	// Terminate if an error occurred during user_save().
	if (!$account) {
		drupal_set_message(t("Error saving user account."), 'error');
		$form_state['redirect'] = '';
		return;
	}
	$form_state['user'] = $account;
	$form_state['values']['uid'] = $account->uid;

	watchdog('user', 'New user: %name (%email).', array('%name' => $form_state['values']['name'], '%email' => $form_state['values']['mail']), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));

	// Add plain text password into user account to generate mail tokens.
	$account->password = $pass;

	// New administrative account without notification.
	$uri = entity_uri('user', $account);
	if ($admin && !$notify) {
		drupal_set_message(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url($uri['path'], $uri['options']), '%name' => $account->name)));
	}elseif ($account->status || (!$account->status && !$account->access) || $notify){
		$op = $notify ? 'register_admin_created' : 'account_registered';//: 'status_activated';
		if ($notify) {
			_user_mail_notify($op, $account);
			drupal_set_message(t('A welcome message with further instructions has been e-mailed to the new user <a href="@url">%name</a>.', array('@url' => url($uri['path'], $uri['options']), '%name' => $account->name)));
		}else {
			_account_mail_notify($op, $account);
			$form_state['redirect'] = 'user/register/done';
			$_SESSION['#user'] = $account;
		}
	}
}

function account_form_user_profile_form_alter(&$form, &$form_state) {
	account_account_form($form, $form_state);

	$form['text_required'] = array(
        '#markup' => '<div class="form-item form-required-text"><span class="form-required">*</span> '.t(' - privalomi laukai').'</div>',
        '#weight' => 50,
	);
  
   
	if(isset($form_state['build_info']['args']['2'])){
		switch($form_state['build_info']['args']['2']){
			case 'account-activation':
				account_activation_form($form, $form_state);
				break;
			case 'account_agreement_form_update':
				account_agreement_form_update($form, $form_state);
				break;
		}
	}

	if(user_access('administer users')){
		drupal_add_css(drupal_get_path('module', 'account') . '/account.css', array('every_page' => FALSE));
        $account = &$form['#user'];
        $form['third_party_info'] = array(
            '#type' => 'fieldset',
            '#title' => t('Partnerių sistemų informacija'),
            '#weight' => -1,
            '#collapsible' => FALSE,
            '#collapsed' => TRUE,
            '#tree' => TRUE,
            ''
        );
        $provaiders = new stdClass();
        if(isset($account->data['tsuid']) && strlen($account->data['tsuid']) > 0){
        	$form += account_deposit_blocked_show($account);
            $provaiders = db_query("SELECT 
                (SELECT id FROM ts_consumer_users_map WHERE tsuid = :tsuid and consumer_id = 1) as provaider_betgamestv,
                (SELECT id FROM ts_consumer_users_map WHERE tsuid = :tsuid and consumer_id = 2) as provaider_betconstruct,
                (SELECT id FROM ts_consumer_users_map WHERE tsuid = :tsuid and consumer_id = 3) as provaider_gammatrix", 
            (array(':tsuid' => (string)$account->data['tsuid'])))
            ->fetch();
        }
        
        $form['third_party_info']['data']['matrix'] = array(
        '#markup' => '<div class="form-item"><strong>'.t('Lažybos gyvai(OddsMatrix)').'</strong><br /><a href="http://support.everymatrix.com/visitor/index.php?/LiveChat/Chat/Request/_sessionID=mxz7adegpzhhmdgie6ceudicp9z9rdk5/_proactive=0/_filterDepartmentID=/_randomNumber=17/_fullName=/_email=pagalba@topsport.lt/_promptType=chat" target="_blank"><img src="https://support.everymatrix.com/__swift/themes/client_default/images/staffonline.png" border="0" alt="Click Here for Live Chat" title="Click Here for Live Chat"></a>
            <br />Pagalbos skyriaus paštas: support@everymatrix.com<br /> Account manager: Alin Manole, skype: alexandrucp, e-mail: am@everymatrix.com '.(isset($account->data['tsuid']) ? '<p> Kliento identifikacija LIVE sistemoje:  44-'.$account->data['tsuid'].'</p>' : '').
                (isset($account->data['tsuid']) && isset($provaiders->provaider_gammatrix) ? '<p> Kliento identifikacija CASINO sistemoje: ts'.$provaiders->provaider_gammatrix.'</p>' : '').'</div>',
        '#weight' => 1,
        );
        
        $form['third_party_info']['data']['spotoption'] = array(
        '#markup' => '<div class="form-item"><strong>'.t('Finansų lažybos(SpotOption)').'</strong>
            <br />Pagalbos skyriaus paštas: support@spotoption.com, skype: RmSpotoption <br /> Business account manager: Anastacia Veselov, skype: Anastacia.veselov1, e-mail: anastaciav@spotoption.com'.(isset($account->data['tsuid']) ? '<p> Kliento identifikacija partnerių sistemoje: '.$account->data['tsuid'].'@bettopsport.com</p>' : '').'</div>',
        '#weight' => 2,
        );
        
        $form['third_party_info']['data']['betgamestv'] = array(
        '#markup' => '<div class="form-item"><strong>'.t('Live lottery(BetGamesTV)').'</strong>
            <br />Problemas sprendžia Leonid Titkov paštas: leonid@betgames.tv, skype: leonid_ntsg'.(isset($account->data['tsuid']) && isset($provaiders->provaider_betgamestv) ? '<p> Kliento identifikacija partnerių sistemoje: '.$provaiders->provaider_betgamestv.'</p>' : '<br />Klientas šia paslauga nesinaudojęs').'</div>',
        '#weight' => 3,
        );
        
        $form['third_party_info']['data']['betconstruct'] = array(
        '#markup' => '<div class="form-item"><strong>'.t('Lažybos gyvai (BET CONSTRUCT)').'</strong>
            <br />Bookmakeriai: Arthur skype: arturito06, Sargis skype: sargis-v   <br /> Account manager: Anahit Grigoryan skype: Anahit_Grigoryan.BetConstruct, email: a.grigoryan@betconstruct.com '.(isset($account->data['tsuid']) && isset($provaiders->provaider_betconstruct) ? '<p> Kliento identifikacija partnerių sistemoje: '.$provaiders->provaider_betconstruct.'</p>' : '<br />Klientas šia paslauga nesinaudojęs').'</div>',
        '#weight' => 4,
        );
        
        
        $form['third_party_info']['data']['lastupdate'] = array(
        '#markup' => '<p style="text-align:right;"><i>Informacija atnaujinta: 2014-03-21 11:37</i></p>',
         '#weight' => 999,         
        );        
        
	}
	return $form;
}


function account_edit_password_form($form, &$form_state){
	global $user; $account = clone $user;
	$form['#user'] = $account;
	$form['account_pass'] = array(
  '#markup' => '<h3>'.t('Slaptažodžio keitimas').'</h3>',
	);
	$form['account']['pass'] = array(
    '#type' => 'password_confirm',
    '#size' => 38,
    '#description' => t('To change the current user password, enter the new password in both fields.'),
  '#required' => TRUE,
	);

	$form['actions_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
	);

	return $form;
}
function account_edit_password_form_submit(&$form, &$form_state){

	$account = $form['#user'];
	form_state_values_clean($form_state);
	$account_unchanged = clone $account;
	entity_form_submit_build_entity('user', $account, $form, $form_state);
	$edit = array_intersect_key((array) $account, $form_state['values']);
	user_save($account_unchanged, $edit);

	unset($_SESSION['pass_reset_'. $account->uid]);
	drupal_set_message(t('Slaptažodis pakeistas sėkmingai.'));

	drupal_goto('account');
}


function account_resend_activation($form, &$form_state){
	global $user;
	include_once drupal_get_path('module', 'user') . '/user.pages.inc';
	$form['info_pass'] = array(
    '#markup' => '<p>'.t('Jei norite iš naujo gauti paskyros aktyvavimo nuorodą, įrašykite visą el. pašto adresą arba slapyvardį, kurį naudojote registracijos metu.').'</p>',
    '#weight' => -50,
	);
	$form['#attributes']['id'] = 'user-pass';
	$form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username or e-mail address'),
    '#default_value' => isset($_SESSION['#user']) ? $_SESSION['#user']->mail : '',
    '#size' => 60,
    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
    '#required' => TRUE,
	);

	$form['actions'] = array('#type' => 'actions');
	$form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Gauti aktyvacijos nuorodą'),
    '#attributes' => array(
      'class' => array('form-submit-long'),
	),
	);

	$form['text_required'] = array(
    '#markup' => '<div class="form-item form-required-text"><span class="form-required">*</span> '.t(' - privalomi laukai').'</div>',
    '#weight' => 10,
	);

	$form['info_pass2'] = array(
    '#markup' => '<div class="form-item"><p>'.t('Jei neturite "@sitename" paskyros, galite !register.', array('@sitename' => variable_get('site_name'), '!register' => l(t('sukurti ją dabar'), 'user/register'))).'</p></div>',
    '#weight' => 500,
	);

	drupal_set_title(t('Mano erdvė, gauti aktyvacijos nuorodą'));

	return $form;
}

function account_resend_activation_validate($form, &$form_state){
	$name = trim($form_state['values']['name']);
	// Try to load by email.
	$users = user_load_multiple(array(), array('mail' => $name));
	$account = reset($users);
	if (!$account) {
		// No success, try to load by name.
		$users = user_load_multiple(array(), array('name' => $name));
		$account = reset($users);
	}
	if (isset($account->uid)) {
		form_set_value(array('#parents' => array('account')), $account, $form_state);
		if($account->status != 0 AND $account->access != 0){
			form_set_error('name', t('Jūsų paskyra jau yra aktyvi. Jeigu užmiršote slaptažodį pasinaudokite <a href="@url">slaptažodžio priminimo funkcija</a>.', array('@url' => url('user/password'))));
		}
	}else {
		form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name)));
	}

}
function account_resend_activation_submit($form, &$form_state){
	global $language;

	$account = $form_state['values']['account'];
	// Mail one time login URL and instructions using current language.
	_account_mail_notify('account_registered', $account, $language);
	watchdog('user', 'Account activation instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
	drupal_set_message(t('Aktyvavimo nuoroda buvo iššiųsta Jūsų el. pašto adresu.'));
	$form_state['redirect'] = 'user';
	return;
}

/* account form */
function account_account_form(&$form, &$form_state){
	global $user;
	$account = &$form['#user'];
	$register = ($account->uid > 0 ? FALSE : TRUE);
	$tpuser = ((isset($account->data['tsuid']) && $account->data['tsuid'] != '') ? TRUE : FALSE);

	$admin = (user_access('administer users') AND $user->uid != $account->uid);
	$field_disabled = (($admin AND $tpuser) OR (!$tpuser AND (isset($account->data['agreement_step']) AND $account->data['agreement_step'] > 1)));

	if(!$register){
		userinfo_updateUser($account);
		$form['#user'] = $account;
		$form['account']['mail']['#default_value'] = $account->mail;
		$user_data = $account->data;
	}
	$form['account']['mail']['#disable'] = $field_disabled;
	$form['data']['#weight'] = 0;
	$form['data']['#tree'] = TRUE;
	$form['data']['#collapsible'] = TRUE;

	$form['data']['betamount'] = array('#type' => 'value', '#value' => (isset($account->data['betamount']) ? $account->data['betamount'] : '0.00'));
	//$form['data']['europeview'] = array('#type' => 'value', '#value' => (isset($account->data['europeview']) ? $account->data['europeview'] : null));
	$form['data']['UserCardNumber'] = array('#type' => 'value', '#value' => (isset($account->data['UserCardNumber']) ? $account->data['UserCardNumber'] : '000000'));
	$form['data']['PinCardNumber'] = array('#type' => 'value', '#value' => (isset($account->data['PinCardNumber']) ? $account->data['PinCardNumber'] : '000000'));
	$form['data']['ContractIdentifier'] = array('#type' => 'value', '#value' => (isset($account->data['ContractIdentifier']) ? $account->data['ContractIdentifier'] : ''));
	$form['data']['ContractDate'] = array('#type' => 'value', '#value' => (isset($account->data['ContractDate']) ? $account->data['ContractDate'] : ''));
	$form['data']['tsuid'] = array('#type' => 'value', '#value' => (isset($account->data['tsuid']) ? $account->data['tsuid'] : ''));
	$form['data']['agreement_step'] = array('#type' => 'value', '#value' => (isset($account->data['agreement_step']) ? $account->data['agreement_step'] : FALSE));
	$form['data']['document_file'] = array('#type' => 'value', '#value' => (isset($account->data['document_file']) ? $account->data['document_file'] : FALSE));
	$form['data']['agreement_file'] = array('#type' => 'value', '#value' => (isset($account->data['agreement_file']) ? $account->data['agreement_file'] : FALSE));
	
	$form['account']['name']['#title'] = t('Slapyvardis');
	$form['account']['mail']['#size'] = 40;
	$form['account']['name']['#size'] = 40;
	$form['account']['pass']['#size'] = 40;
	$form['account']['name']['#element_validate'][] = 'account_validate_username';
	$form['account']['pass']['#element_validate'][] = 'account_validate_password';
	$form['account']['#type'] = 'fieldset';
	$form['account']['#title'] = t('Paskyros informacija');
	$form['account']['#collapsible'] = TRUE;
	$form['account']['#collapsed'] = FALSE;
	if(isset($form['account']['roles'])){
		if(in_array(3, $form['account']['roles']['#default_value'])){
			$form['account']['roles']['3'] = array(
        '#type' => 'checkbox',
        '#title' => $form['account']['roles']['#options']['3'],
        '#default_value' => TRUE,
        '#disabled' => TRUE,
        '#access' => false,
			);
		}
		unset($form['account']['roles']['#options']['3']);
		if($admin){
			$form['account']['roles']['#access'] = true;
		}
	}

	$form['personal_info'] = array(
  '#type' => 'fieldset',
    '#title' => t('Asmeninė informacija'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
    'data' => array(
      '#tree' => TRUE,
	),
	);
	$form['address_info'] = array(
  '#type' => 'fieldset',
    '#title' => t('Gyvenamoji vieta'),
    '#weight' => 2,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
    '#access' => (!$register),
    'data' => array(
      '#tree' => TRUE,
	),
	);
	$form['topsport_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('i-lažybų sutarties informacija'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
    '#access' => (!$register),
    'data' => array(
      '#tree' => TRUE,
	),
	);

	$form['confirm_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Duomenų patvirtinimas'),
    '#weight' => 4,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
    '#access' => (!$register && !$admin),
    'data' => array(
      '#tree' => TRUE,
	),
	);

	$form['account']['data']['#tree'] = TRUE;

	$currency_list = currency_api_get_list();
	$currency_enabled = explode(',', variable_get('account_currency_enabled', 'LTL'));
	foreach($currency_list as $key => $desc){
		if(!in_array($key, $currency_enabled)){
			unset($currency_list[$key]);
		}
	}

	$form['account']['data']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Valiuta'),
    '#default_value' => (isset($user_data['currency']) ? $user_data['currency'] : variable_get('account_currency_default', 'LTL')),
    '#options' => $currency_list,
    '#description' => t('Visos piniginės operacijos vykdomos LTL valiuta.'),
	);

	if($admin){
		$form['account']['data']['betdoneemail'] = array(
      '#type' => 'radios',
      '#title' => t('Siųsti statymų patvirtinimus į mano el. paštą'),
      '#default_value' => (isset($user->data['betdoneemail']) ? $user->data['betdoneemail'] : 1),
      '#options' => array(1 => t('Taip'), 0 => t('Ne')),
      '#suffix' => '<div class="clearfix"></div>',
		);
	}


	$sex_options = array('1' => t('Mr.'), '2' => t('Ms.'));
	$default_sex_options = ((!$register && isset($user_data['sex'])) ? $user_data['sex'] : 1);
	if(!$register && !isset($user_data['sex'])){
		$sex_options['0'] = t('Nenurodyta');
		$default_sex_options = 0;
	}

	$form['personal_info']['data']['sex'] = array(
    '#type' => 'radios',
    '#title' => t('Lytis'),
    '#default_value' => $default_sex_options,
    '#options' => $sex_options,
    '#required' => (!$admin),
    '#disabled' => $field_disabled,
	);

	$form['personal_info']['data']['personalId'] = array(
    '#type' => 'textfield',
    '#title' => t('Asmens kodas'),
    '#default_value' => (isset($user_data['personalId']) ? $user_data['personalId'] : ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => (!$admin),
    '#access' => FALSE,
    '#element_validate' => array('account_form_validate_isGenericName', 'account_form_validate_isPersonalId'),
	);

	$form['personal_info']['data']['firstname'] = array(
    '#type' => 'textfield',
    '#title' => t('Vardas'),
    '#default_value' => (!$register ? $user_data['firstname'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => (!$admin),
    '#disabled' => ((($register || !$tpuser) AND !$field_disabled) ? false : true),
    '#element_validate' => array('account_form_first_upper_remove_spaces', 'account_form_validate_isName'),
    '#attributes' => array(
      'title' => array(t('Vardą būtina įvesti taisyklingai. Blogai įvedus vardą įmokėjimas nebus įskaitytas.')),
	),
	);
	$form['personal_info']['data']['middlename'] = array(
    '#type' => 'textfield',
    '#title' => t('Antras vardas'),
    '#default_value' => ((!$register AND isset($user_data['middlename'])) ? $user_data['middlename'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#disabled' => ((($register || !$tpuser) AND !$field_disabled) ? false : true),
    '#element_validate' => array('account_form_first_upper_remove_spaces', 'account_form_validate_isName'),
    '#attributes' => array(
      'title' => array(t('Įveskite tik tuomet jei dokumente yra antras vardas. Neveskite krikšto vardo.')),
	),
	);
	$form['personal_info']['data']['surname'] = array(
    '#type' => 'textfield',
    '#title' => t('Pavardė'),
    '#default_value' => (!$register ? $user_data['surname'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => (!$admin),
    '#disabled' => ((($register || !$tpuser) AND !$field_disabled) ? false : true),
    '#element_validate' => array('account_form_first_upper_remove_spaces', 'account_form_validate_isName'),
    '#attributes' => array(
      'title' => array(t('Pavardę būtina įvesti taisyklingai. Blogai įvedus pavardę įmokėjimas nebus įskaitytas.')),
	),
	);

	if($register || (!$tpuser AND !$field_disabled)){
		$form['personal_info']['data']['birthday'] = array(
      '#type' => 'date_select',
      '#title' => t('Gimimo data'),
      '#default_value' => (!$register ? $user_data['birthday'] : ''),
      '#date_label_position' => 'within',
      '#date_format' => 'Y-m-d',
      '#date_year_range' => '-100:-18',
      '#date_year_sort' => 'DESC',
      '#required' => (!$admin),
		);
	}else{
		$form['personal_info']['data']['birthday'] = array(
      '#type' => 'textfield',
      '#title' => t('Gimimo data'),
      '#default_value' => $user_data['birthday'],
      '#size' => 40,
      '#maxlength' => 255,
      '#required' => FALSE,
      '#disabled' => TRUE,
		);
	}

	$form['personal_info']['data']['personal_country'] = array(
    '#type' => 'select',
    '#title' => t('Valstybės pilietis'),
    '#default_value' => (isset($user_data['personal_country']) ? $user_data['personal_country'] : (isset($user_data['country']) ? $user_data['country'] : '')),
    '#options' => country_get_list(),
    '#required' => (!$admin),
    '#access' => FALSE,
    '#empty_value' => '',
	);

	$form['personal_info']['data']['mobile_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Telefono numeris'),
    '#default_value' => (!$register ? $user_data['mobile_number'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => (!$admin),
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_remove_spaces', 'account_form_validate_isPhoneNumber'),
	);
	$form['personal_info']['data']['home_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Namų telefonas'),
    '#default_value' => (!$register ? $user_data['home_number'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_remove_spaces', 'account_form_validate_isPhoneNumber'),
	);
	$form['personal_info']['data']['work_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Darbo telefonas'),
    '#default_value' => (!$register ? $user_data['work_number'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_remove_spaces', 'account_form_validate_isPhoneNumber'),
	);


	$form['address_info']['data']['street'] = array(
    '#type' => 'textfield',
    '#title' => t('Gatvė'),
    '#default_value' => (!$register ? $user_data['street'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#access' => (!$register),
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_first_upper_remove_spaces', 'account_form_validate_isAddress'),
	);

	$form['address_info']['data']['house'] = array(
    '#type' => 'textfield',
    '#title' => t('Namo numeris'),
    '#default_value' => ((!$register AND isset($user_data['flat'])) ? $user_data['house'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#access' => (!$register),
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_remove_spaces', 'account_form_validate_isAddress'),
	);

	$form['address_info']['data']['flat'] = array(
    '#type' => 'textfield',
    '#title' => t('Buto numeris'),
    '#default_value' => ((!$register AND isset($user_data['flat'])) ? $user_data['flat'] : ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
    '#access' => (!$register),
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_remove_spaces', 'account_form_validate_isAddress'),
	);

	$form['address_info']['data']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Pašto kodas'),
    '#default_value' => (!$register ? $user_data['zip'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => (!$admin),
    '#access' => (!$register),
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_remove_spaces', 'account_form_validate_isPostCode'),
	);

	$form['address_info']['data']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('Miestas'),
    '#default_value' => (!$register ? $user_data['city'] : '' ),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => (!$admin),
    '#access' => (!$register),
    '#disabled' => $field_disabled,
    '#element_validate' => array('account_form_first_upper_remove_spaces', 'account_form_validate_isCityName'),
	);
	$form['address_info']['data']['country'] = array(
    '#type' => 'select',
    '#title' => t('Valstybė'),
    '#default_value' => (!$register ? $user_data['country'] : ''),
    '#options' => country_get_list(),
    '#required' => (!$admin),
    '#access' => (!$register),
    '#disabled' => $field_disabled,
    '#empty_value' => '',
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'account_account_form_betting_center_callback',
      'wrapper' => 'betting_centers',
      'effect' => 'none',
      'progress' => array('type' => null),
      'keypress' => TRUE,
	),
	);

	if($tpuser && account_page_access('access account info')){
		$form['topsport_info']['items']['ContractIdentifier'] = array(
      '#type' => 'item',
      '#title' => t('Sutarties numeris'),
      '#markup' => '<span>'.((isset($account->data['ContractIdentifier']) AND $account->data['ContractIdentifier']) ? $account->data['ContractIdentifier'] : '-').'</span>',
		);
		$form['topsport_info']['items']['UserCardNumber'] = array(
      '#type' => 'item',
      '#title' => t('Kliento kortelės numeris'),
      '#markup' => '<span>'.((isset($account->data['UserCardNumber']) AND $account->data['UserCardNumber'] != '000000') ? $account->data['UserCardNumber'] : '-').'</span>',
		);
	}

	if($admin){
		unset($form['data']['tsuid']);
		$form['topsport_info']['data']['tsuid'] = array(
      '#type' => 'textfield',
      '#title' => t('Kliento ID'),
      '#default_value' => (isset($account->data['tsuid']) ? $account->data['tsuid'] : ''),
      '#size' => 40,
      '#maxlength' => 255,
		);
		/*
		 $form['data']['betamount'] = array('#type' => 'value', '#value' => (isset($account->data['betamount']) ? $account->data['betamount'] : '0.00'));
		 $form['data']['UserCardNumber'] = array('#type' => 'value', '#value' => (isset($account->data['UserCardNumber']) ? $account->data['UserCardNumber'] : '000000'));
		 $form['data']['PinCardNumber'] = array('#type' => 'value', '#value' => (isset($account->data['PinCardNumber']) ? $account->data['PinCardNumber'] : '000000'));
		 $form['data']['ContractIdentifier'] = array('#type' => 'value', '#value' => (isset($account->data['ContractIdentifier']) ? $account->data['ContractIdentifier'] : ''));
		 $form['data']['ContractDate'] = array('#type' => 'value', '#value' => (isset($account->data['ContractDate']) ? $account->data['ContractDate'] : ''));
		 $form['data']['tsuid'] = array('#type' => 'value', '#value' => (isset($account->data['tsuid']) ? $account->data['tsuid'] : ''));
		 $form['data']['agreement_step'] = array('#type' => 'value', '#value' => (isset($account->data['agreement_step']) ? $account->data['agreement_step'] : FALSE));
		 $form['data']['document_file'] = array('#type' => 'value', '#value' => (isset($account->data['document_file']) ? $account->data['document_file'] : FALSE));
		 $form['data']['agreement_file'] = array('#type' => 'value', '#value' => (isset($account->data['agreement_file']) ? $account->data['agreement_file'] : FALSE));
		 */
    if(isset($account->data['PartialMatch']) AND $account->data['PartialMatch']){
      $form['topsport_info']['items']['PartialMatch'] = array(
        '#type' => 'item',
        '#title' => t('PartialMatch'),
        '#markup' => t('Aptikta'),
      );
    }
		$form['topsport_info']['items']['ContractIdentifier'] = array(
      '#type' => 'item',
      '#title' => t('Sutarties numeris'),
      '#markup' => ((isset($account->data['ContractIdentifier']) AND $account->data['ContractIdentifier']) ? $account->data['ContractIdentifier'] : '-'),
		);
		$form['topsport_info']['items']['ContractDate'] = array(
      '#type' => 'item',
      '#title' => t('Sutarties data'),
      '#markup' => ((isset($account->data['ContractDate']) AND $account->data['ContractDate']) ? $account->data['ContractDate'] : '-'),
		);
		$form['topsport_info']['items']['balance'] = array(
      '#type' => 'item',
      '#title' => t('Balansas'),
      '#markup' => account_balance_string($account->uid),
		);
		$form['topsport_info']['items']['UserCardNumber'] = array(
      '#type' => 'item',
      '#title' => t('Kliento kortelės numeris'),
      '#markup' => ((isset($account->data['UserCardNumber']) AND $account->data['UserCardNumber'] != '000000') ? $account->data['UserCardNumber'] : '-'),
		);
	}
	$form['topsport_info']['data']['betcenter'] = array(
    '#prefix' => '<div id="betting_centers" class="hide">',
    '#suffix' => '</div>',
	);

	$form['data']['betcenter'] = array('#type' => 'value', '#value' => (isset($user_data['betcenter']) ? $user_data['betcenter'] : FALSE));
	if($admin || (!empty($form_state['values']['data']['country']) && $form_state['values']['data']['country'] == 'LT') || (empty($form_state['values']['data']['country']) && $form['address_info']['data']['country']['#default_value'] == 'LT')) {
		$bettingCenterOptions = array();
		if(isset($user_data['betcenter']) AND $user_data['betcenter'] == '101'){
			$bettingCenterOptions = array('101' => t('-- Testinis --'));
		}
		$cities = betting_center_cities();
		foreach($cities as $city){
			$centers = betting_center_centers(null, $city->bccid, null, !($tpuser OR $field_disabled));
			foreach($centers as $center){
				$bettingCenterOptions[$center->tpoid] = $city->title.', '.$center->address;
			}
		}
		$form['topsport_info']['data']['betcenter'] = array(
      '#prefix' => '<div id="betting_centers">',
      '#suffix' => '</div>',
      '#type' => 'select',
      '#title' => t('Aptarnaujantis lažybų punktas'),
      '#default_value' => ((!$register AND isset($user_data['betcenter'])) ? $user_data['betcenter'] : 0),
      '#options' => $bettingCenterOptions,
      '#description' => ($register ? t('Pasirinkite jums patogiausią lažybų punktą') : ''),
      '#required' => !($admin OR ($tpuser OR $field_disabled)),
      '#disabled' => ($tpuser OR $field_disabled),//($tpuser ? true : false),
      '#access' => (!$register),
      '#empty_value' => '',
		);
		unset($form['data']['betcenter']);
	}

	if(isset($form['locale'])){
		$form['locale']['#weight'] = 2;
	}

	$form['terms_of_use'] = array(
    '#type' => 'checkbox',
    '#title' => t('Patvirtinu, kad man daugiau nei 18 metų, esu susipažinęs su "@sitename" bendrovės !reglamentu ir !taisyklėmis.', array('@sitename' => variable_get('site_name'), '!reglamentu' => l(t('reglamentu'), 'lazybu-reglamentas', array('attributes' => array('target' => '_blank'))), '!taisyklėmis' => l(t('taisyklėmis'), 'taisykles', array('attributes' => array('target' => '_blank'))))),
    '#default_value' => 0,
    '#required' => (!$admin),
    '#weight' => 5,
    '#access' => $register,
	);
	$form['get_info'] = array(
    '#type' => 'checkbox',
    '#title' => t('Aš patvirtinu, kad noriu gauti informacinio pobūdžio pranešimus iš "@sitename"', array('@sitename' => variable_get('site_name'))),
    '#default_value' => 0,
    '#required' => (!$admin),
    '#weight' => 10,
    '#access' => $register,
	);
	$form['text_required'] = array(
    '#markup' => '<div class="form-item form-required-text"><span class="form-required">*</span> '.t(' - privalomi laukai').'</div>',
    '#weight' => 50,
	);

	$form['account']['name']['#description'] = '';
	$form['account']['mail']['#description'] = '';
	$form['account']['pass']['#description'] = '';
	$form['account']['current_pass']['#description'] = '';
	unset( $form['account']['current_pass'] );
	if(isset($form['#validate'])){
		$user_validate_current_pass_key = array_search('user_validate_current_pass', $form['#validate']);
		if($user_validate_current_pass_key){
			unset($form['#validate'][$user_validate_current_pass_key]);
		}
	}

	if(!$register && $tpuser){
		//     $form['#submit'] = array('account_updateClientUserInfo');
		if(!$admin){
			if(!isset($_SESSION['pin_index'])){
				$_SESSION['pin_index'] = rand(1, 24);
			}
			//$_SESSION['pin_index'] = 1;
			$form['confirm_info']['pin'] = array(
        '#tree' => TRUE,
        '#weight' => 6,
			);
			$form['confirm_info']['pin']['index'] = array(
        '#type' => 'value',
        '#value' => $_SESSION['pin_index'],
			);
			$form['confirm_info']['pin']['value'] = array(
        '#type' => 'password',
        '#title' => t('PIN kodo nr. %index reikšmė', array('%index' => $form['confirm_info']['pin']['index']['#value'])),
        '#default_value' => '',
        '#size' => 40,
        '#maxlength' => 255,
        '#required' => TRUE,
        '#weight' => 6,
        '#element_validate' => array('account_validate_pin_value'),
			);
		}else{
			$form['confirm_info']['pin'] = array('#tree' => TRUE);
			$form['confirm_info']['pin']['index'] = array('#type' => 'value', '#value' => '0');
			$form['confirm_info']['pin']['value'] = array('#type' => 'value', '#value' => '000000');
		}
	}/*
	if(!$register && !$admin){
	$form['confirm_info']['current_pass'] = array(
	'#type' => 'password',
	'#title' => t('Dabartinis slaptažodis'),
	'#default_value' => '',
	'#size' => 40,
	'#maxlength' => 255,
	'#required' => TRUE,
	'#weight' => 6,
	'#element_validate' => array('account_current_pass_validate'),
	);
	}*/
	if($admin){
		//     $form['account']['pass']['#access'] = FALSE;
		$form['account']['last access'] = array('#type' => 'item', '#title' => t('Last access'), '#markup' => $account->access ? t('@time ago', array('@time' => format_interval(REQUEST_TIME - $account->access))) : t('never'), '#weight' => 10);
		$form['account']['member for'] = array('#type' => 'item', '#title' => t('Member for'), '#markup' => format_interval(REQUEST_TIME - $account->created), '#weight' => 10);

		$form['document_info'] = array(
      '#type' => 'fieldset',
      '#title' => t('Įkelti dokumentai'),
      '#weight' => 5,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => FALSE,
		);
		if(isset($account->data['document_file']) AND $account->data['document_file']){
			$doc_file = file_load($account->data['document_file']);
			$path = file_create_url($doc_file->uri);
			$document_file = l(t('Peržiūrėti dokumentą'), $path, array('attributes' => array('target' => '_blank')));
			if(strpos($doc_file->filemime, 'image') !== FALSE){
				//         $image_info = image_get_info($doc_file->uri);
				//         $width = $image_info['width'];
				//         if($width > 300){ $width = 300; }
				$document_file .= '<br />'.theme('image', array('path'=> $path, 'width' => '100%'));
			}
		}else{
			$document_file = t('Dokumentas neįkeltas');
		}
		$form['document_info']['document_file'] = array( '#type' => 'item', '#title' => t('Dokumentas'), '#markup' => $document_file, );
		/*
		 if(isset($account->data['agreement_file']) AND $account->data['agreement_file'] AND !($account->data['agreement_file'] === TRUE)){
		 $doc_file = file_load($account->data['agreement_file']);
		 $agreement_file = l(t('Peržiūrėti sutartį'), file_create_url($doc_file->uri), array('attributes' => array('target' => '_blank')));
		 }else{
		 $agreement_file = t('Sutartis neįkelta');
		 }
		 $form['document_info']['agreement_file'] = array('#type' => 'item', '#title' => t('Sutartis'), '#markup' => $agreement_file, );
		 */
	}

	if(variable_get('account_roles_topsport_paused', '') AND isset($account->roles[variable_get('account_roles_topsport_paused', '')])){
		$form['resume'] = array(
      '#type' => 'fieldset',
      '#title' => t('Atšaukti apribojimą'),
      '#weight' => 10,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      'pause_button' => array(
        '#type' => 'submit',
        '#value' => t('Atšaukti apribojimą'),
        '#validate' => array('user_account_form_validate', 'user_profile_form_validate'),
        '#submit' => array('account_account_form_submit', 'account_resume_submit'),
		),
		);
	}
	$form['#submit'] = array('account_account_form_submit');
	//   $form['#validate'][] = 'account_account_form_validate';
}

// function account_account_form_validate($form, &$form_state) {
//   entity_form_field_validate('user', $form, $form_state);
// }
function account_account_form_submit($form, &$form_state) {
	$account = $form_state['user'];
	$category = $form['#user_category'];
	// Remove unneeded values.
	form_state_values_clean($form_state);

	// Before updating the account entity, keep an unchanged copy for use with
	// user_save() later. This is necessary for modules implementing the user
	// hooks to be able to react on changes by comparing the values of $account
	// and $edit.
	$account_unchanged = clone $account;

	entity_form_submit_build_entity('user', $account, $form, $form_state);
	// if($form_state['user']->pass === ''){
	//   $form_state['user']->pass = $account_unchanged->pass;
	// }

	// Populate $edit with the properties of $account, which have been edited on
	// this form by taking over all values, which appear in the form values too.
	$edit = array_intersect_key((array) $account, $form_state['values']);

	$form_state['update_status'] = false;
	if(isset($account_unchanged->data['tsuid']) AND $account_unchanged->data['tsuid']){
		$xml = account_makeClientUpdateXML($form_state['values']);
		$result = topsport_updateClientUserInfo($xml);
		if(isset($result['Succeed']) AND $result['Succeed'] == 'true'){
			$form_state['update_status'] = true;
		}else{
			if(isset($result['Errors']['Error'])){
				if(isset($result['Errors']['Error']['ErrorId'])){
					$result['Errors']['Error'] = array($result['Errors']['Error']);
				}
				foreach($result['Errors']['Error'] as $error){
					drupal_set_message($error['ErrorMessage'], 'error');
				}
			}else{
				drupal_set_message(t('Pakeitimų išsaugoti nepavyko, pamėginkite dar kartą.'), 'error');
			}
		}
	}else{
		$form_state['update_status'] = true;
	}

	if($form_state['update_status']){
		$account = user_save($account_unchanged, $edit, $category);
		/*$updated_data = array_diff_assoc($account->data, $account_unchanged->data);
		if(!empty($updated_data)){
			account_log($account->uid, 'duomenų atnaujinimas', 'Vartotojo duomenų pasikeitimas. Duomenys: <pre>!data</pre>', array('!data' => print_r($updated_data, true)), WATCHDOG_NOTICE);
		}*/
		$form_state['values']['uid'] = $account->uid;
		userinfo_updateUser($account);
		drupal_set_message(t('The changes have been saved.'));
	}

	$form_state['user'] = $account;

	if ($category == 'account' && !empty($edit['pass'])) {
		// Remove the password reset tag since a new password was saved.
		unset($_SESSION['pass_reset_' . $account->uid]);
	}

	if(isset($_SESSION['pin_index'])){
		unset($_SESSION['pin_index']);
	}
	// Clear the page cache because pages can contain usernames and/or profile information:
	//   cache_clear_all();
}

function account_admin_activate_user($account){
	if($account->data['agreement_step'] != 4){ drupal_goto('admin/people/activation'); }
	include_once drupal_get_path('module', 'user') . '/user.pages.inc';
	$form = drupal_get_form('user_profile_form', $account, 'account', 'account-activation');
	if(isset($form['locale'])){ $form['locale']['#access'] = FALSE; }
	if(isset($form['timezone'])){ $form['timezone']['#access'] = FALSE; }
	return $form;
}

function account_activation_form(&$form, &$form_state){
	$account = $form['#user'];

	$form['account']['pass']['#access'] = FALSE;
	$form['account']['roles']['#access'] = FALSE;

	$form['personal_info']['data']['sex']['#disabled'] = FALSE;
	$form['personal_info']['data']['personalId']['#access'] = TRUE;
	$form['personal_info']['data']['personalId']['#disabled'] = TRUE;
	$form['personal_info']['data']['firstname']['#disabled'] = TRUE;
	$form['personal_info']['data']['middlename']['#disabled'] = TRUE;
	$form['personal_info']['data']['surname']['#disabled'] = TRUE;
	$form['personal_info']['data']['birthday']['#disabled'] = TRUE;
	$form['personal_info']['data']['personal_country']['#disabled'] = TRUE;
	$form['personal_info']['data']['personal_country']['#access'] = TRUE;
	$form['personal_info']['data']['mobile_number']['#disabled'] = FALSE;
	$form['personal_info']['data']['home_number']['#disabled'] = FALSE;
	$form['personal_info']['data']['work_number']['#disabled'] = FALSE;

	$form['address_info']['data']['street']['#disabled'] = FALSE;
	$form['address_info']['data']['house']['#disabled'] = FALSE;
	$form['address_info']['data']['flat']['#disabled'] = FALSE;
	$form['address_info']['data']['zip']['#disabled'] = FALSE;
	$form['address_info']['data']['city']['#disabled'] = FALSE;
	$form['address_info']['data']['country']['#disabled'] = FALSE;

	$form['topsport_info']['data']['tsuid']['#access'] = FALSE;
	$form['topsport_info']['data']['betcenter']['#disabled'] = FALSE;
	$form['topsport_info']['data']['betcenter']['#access'] = TRUE;

	$form['reject'] = array(
    '#type' => 'fieldset',
    '#title' => t('Atmetimas'),
    '#weight' => 8,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
	);
	$form['reject']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Atmetimo tipas'),
    '#default_value' => 'incorrect_document',
    '#options' => array('update_personal_info' => t('Patikslinkite asmeninius duomenis'), 'incorrect_document' => t('Netinkamas dokumentas'), ),
	);

	$lang_list = language_list();
	$langOptions = array();
	foreach($lang_list as $key => $lang){
		if($lang->enabled){
			$langOptions[$key] = $lang->name;
		}
	}
	$template_lang = $account->language;
	$form['reject']['template_lang'] = array(
    '#type' => 'select',
    '#title' => t('Šablono kalba'),
    '#default_value' => $template_lang,
    '#options' => $langOptions,
    '#prefix' => '<div style="float: none; clear: both;">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'account_activation_form_template_lang',
      'wrapper' => 'replace_template_div',
	//       'effect' => 'fade',
      'progress' => array('type' => null),
	),
	);

	if(!empty($form_state['values']['reject']['template_lang'])){
		$template_lang = $form_state['values']['reject']['template_lang'];
	}

	$nids = db_select('node', 'n')
	->addTag('node_access')
	->fields('n', array('nid', 'nid'))
	->condition('type', 'atmetimo_sablonai')
	->condition('language', $template_lang)
	->orderBy('title', 'ASC')
	->execute()
	->fetchAllKeyed();
	$nodes = node_load_multiple($nids);
	$rejectTemplates = array();
	foreach($nodes as $key => $node){
		$rejectTemplates[$key] = $node->title;
	}
	$form['reject']['template'] = array(
    '#type' => 'select',
    '#title' => t('Šablonas'),
    '#default_value' => '',
    '#options' => $rejectTemplates,
    '#empty_value' => '',
    '#prefix' => '<div id="replace_template_div" style="float: none; clear: both;">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'account_activation_form_template',
	//       'wrapper' => 'comment_field',
	//       'effect' => 'fade',
      'progress' => array('type' => null),
	),
	);

	$form['reject']['comment'] = array(
    '#prefix' => '<div id="comment_field" style="float: none; clear: both;">',
    '#suffix' => '</div>',
    '#type' => 'text_format',
    '#title' => t('Komentaras').' <span class="form-required">*</span>',
    '#default_value' => '',
    '#size' => 100,
	);

	$form['reject']['reject_button'] = array(
    '#type' => 'submit',
    '#value' => t('Atmesti'),
    '#validate' => array('user_account_form_validate', 'user_profile_form_validate', 'account_reject_validate'),
    '#submit' => array('account_account_form_submit', 'account_reject_submit'),
	);

	$form['approve'] = array(
    '#type' => 'fieldset',
    '#title' => t('Patvirtinimas'),
    '#weight' => 9,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
	//     'pin_id' => array(
	//       '#type' => 'textfield',
	//       '#title' => t('PIN ID').' <span class="form-required">*</span>',
	//       '#size' => 10,
	//     ),
	//     'card_id' => array(
	//       '#type' => 'textfield',
	//       '#title' => t('Kortelės ID').' <span class="form-required">*</span>',
	//       '#size' => 10,
	//     ),
    'approve_button' => array(
      '#type' => 'submit',
      '#value' => t('Patvirtinti'),
      '#validate' => array('user_account_form_validate', 'user_profile_form_validate'/*, 'account_approve_validate'*/),
      '#submit' => array('account_account_form_submit', 'account_approve_submit'),
	),
	);

	$form['pause'] = array(
    '#type' => 'fieldset',
    '#title' => t('Laikinai apriboti'),
    '#weight' => 10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    'pause_button' => array(
      '#type' => 'submit',
      '#value' => t('Apriboti'),
      '#validate' => array('user_account_form_validate', 'user_profile_form_validate'),
      '#submit' => array('account_account_form_submit', 'account_pause_submit'),
	),
	);
	$form['actions']['#access'] = FALSE;
	unset($form['text_required']);
}
function account_activation_form_template_lang(&$form, &$form_state){
	return $form['reject']['template'];
}
function account_activation_form_template(&$form, &$form_state){
	$commands = array();
	$comment_default = '';
	if(!empty($form_state['values']['reject']['template'])){
		$comment = node_load($form_state['values']['reject']['template']);
		$comment_default = $comment->body[$form_state['values']['reject']['template_lang']]['0']['value'];
	}
	$commands[] = ajax_command_invoke('#comment_field textarea', 'val', array($comment_default));
	return array('#type' => 'ajax', '#commands' => $commands);
}

function account_account_form_betting_center_callback(&$form, &$form_state){
	return $form['topsport_info']['data']['betcenter'];
}

function account_form_user_cancel_confirm_form_alter(&$form, &$form_state, $account){
	$form['user_cancel_confirm']['#access'] = false;
}


/* account attach agreement form*/
function account_attach_agreement_form($form, $form_state, $account){

	$form['#user'] = $account;

	if(!isset($_SESSION['pin_index']) or !$_SESSION['pin_index']){
		$_SESSION['pin_index'] = rand(1, 24);
	}

	$form['info_text'] = array(
    '#prefix' => '<p>',
    '#markup' => t('Norėdami aktyvuoti i-lažybų sutartį pasirašytą lažybų punkte,suveskite duomenis į formą ir galėsite naudotis visomis i-lažybų galimybėmis.'),
    '#suffix' => '</p>',
    '#weight' => -50,
	);
	$form['agreement_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Sutarties numeris'),
    '#default_value' => '',
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#weight' => 1,
    '#element_validate' => array('account_form_validate_isGenericName'),
	);
	$form['agreement_date'] = array(
    '#type' => 'date_select',
    '#title' => t('Sutarties data'),
    '#default_value' => '',
    '#date_label_position' => 'within',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-10:0',
    '#required' => TRUE,
    '#weight' => 2,
	);
	$form['pin'] = array(
    '#tree' => TRUE,
    '#weight' => 3,
	);
	$form['pin']['index'] = array(
    '#type' => 'value',
    '#value' => $_SESSION['pin_index'],
	);
	$form['pin']['value'] = array(
    '#type' => 'password',
    '#title' => t('PIN kodo nr. %index reikšmė', array('%index' => $form['pin']['index']['#value'])),
    '#default_value' => '',
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#element_validate' => array('account_validate_pin_value'),
	);

	$form['text_required'] = array(
    '#markup' => '<div class="form-item form-required-text"><span class="form-required">*</span> '.t(' - privalomi laukai').'</div>',
    '#weight' => 10,
	);
	$form['cancel_action'] = array(
    '#type' => 'submit',
    '#value' => t('Atgal'),
    '#weight' => 10,
    '#submit' => array('account_agreement_intro_reset'),
    '#attributes' => array('class' => array('reset', 'btn btn-default btn-back')),
    '#limit_validation_errors' => array(),
	);
	$form['submit_action'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
    '#weight' => 10
	);

	return $form;
}
function account_attach_agreement_form_submit(&$form, &$form_state){
	unset($_SESSION['pin_index']);
	$xml = '<?xml version="1.0" encoding="UTF-8" ?>
  <UserInfo>
    <ContractIdentifier>'.$form_state['values']['agreement_number'].'</ContractIdentifier>
    <ContractDate>'.$form_state['values']['agreement_date'].'</ContractDate>
    <Pin>
      <Index>'.$form_state['values']['pin']['index'].'</Index>
      <Value>'.$form_state['values']['pin']['value'].'</Value>
  </Pin>
  </UserInfo>';

	$response = topsport_bindUserInfo($xml);
	if(empty($response)){
		drupal_set_message(t('Sutartis nerasta arba blogas PIN kodas'), 'error');
	}else{
		if(isset($response['UserID']) AND isset($response['UserStateID']) AND $response['UserStateID'] == 1){
			$used_agreement_number = db_query('select * from {users} WHERE "data" LIKE \'%s:18:"ContractIdentifier";s:'.drupal_strlen($form_state['values']['agreement_number']).':"'.$form_state['values']['agreement_number'].'";%\'')->fetchObject();
			if(!$used_agreement_number){
				$account = $form['#user'];
				$edit['data']['tsuid'] = $response['UserID'];
				$edit['data']['agreement_file'] = true;
				$edit['data']['agreement_reject_comment'] = '';
				$edit['data']['agreement_step'] = 5;
				$edit['roles'] = array(variable_get('account_roles_topsport_full', '') => 1);
				$account = user_save($account, $edit);
				acccount_updateUser($account);
				drupal_set_message(t('Sutartis priskirta sėkmingai'));
				drupal_goto('account');
			}else{
				drupal_set_message(t('Sutarties priskirti negalima, nes ji jau yra priskirta kitam vartotojui'), 'error');
			}
		}else{
			drupal_set_message(t('Sutarties priskirti negalima, nes ji nebegaliojanti'), 'error');
		}
	}
}


/* agreement prepage */
function account_agreement_intro_form($form, $form_state, $account){

	$form['#user'] = $account;

	$form['question'] = array(
    '#markup' => t('Ar turite pasirašę i-lažybų sutartį?'),
    '#prefix' => '<div class="agreement-question">',
    '#suffix' => '</div>',
	);

	$form['has_agreement'] = array(
    '#prefix' => '<div class="has-agreement">',
    '#suffix' => '</div>',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Taip, sutartį turiu'),
      '#name' => 'op',
	),
    'info' => array(
      '#prefix' => '<p>',
      '#markup' => t('Pasirinkite šį variantą, jeigu jau turite ankščiau pasirašęs i-lažybų sutartį lažybų punkte arba internetine forma.'),
      '#suffix' => '</p>',
	),
	);

	$form['new_agreement'] = array(
    '#prefix' => '<div class="new-agreement">',
    '#suffix' => '</div>',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Ne, sutarties neturiu'),
      '#name' => 'op',
	),
    'info' => array(
      '#prefix' => '<p>',
      '#markup' => t('Jeigu dar nesate sudaręs i-lažybų sutarties, sudarykite ją patogia internetine forma.'),
      '#suffix' => '</p>',
	),
	);

	if(empty($form_state['input'])){
		drupal_set_message(t('Asmuo gali turėti pasirašęs tik vieną i-lažybų sutartį!'), 'warning', FALSE);
	}

	return $form;
}
function account_agreement_intro_reset(&$form, &$form_state){
	$account = $form['#user'];
	account_agreement_reset($account);
}
function account_agreement_reset($account = null){
	global $user;
	$edit['data']['agreement_step'] = 0;
	if(!$account){
		$account = $user;
	}
	user_save($account, $edit);
	drupal_goto('account/agreement');
}
function account_agreement_intro_form_submit(&$form, &$form_state){
	$edit['data']['agreement_step'] = 0;
	$account = $form['#user'];
	switch($form_state['values']['op']){
		case t('Ne, sutarties neturiu'):
			$edit['data']['agreement_step'] = 1;
			break;
		case t('Taip, sutartį turiu'):
			$edit['data']['agreement_step'] = 100;
			break;
	}
	user_save($account, $edit);
}

/* account agreement form */
function account_agreement_form($form, $form_state, $account){

	$form['#user'] = $account;
	account_account_form($form, $form_state);

	$user_data = $form['#user']->data;

	$form['info_text'] = array(
    '#type' => 'markup',
    '#markup' => '<p>'.t('Norėdami naudotis lažybų svetaine ir atlikti statymus naudojantis "%sitename" lažybų svetaine, Jums reikia pasirašyti sutartį internetu ir galėsite naudotis visomis teikiamomis svetainės paslaugomis. Sutarties pasirašymo forma pateikta žemiau.', array('%sitename' => variable_get('site_name'))).'</p>',
    '#weight' => -20,
	);
	$form['account']['#access'] = false;
	$form['personal_info']['data']['personalId']['#access'] = TRUE;
	$form['personal_info']['data']['personal_country']['#access'] = TRUE;
	$form['personal_info']['data']['sex']['#access'] = false;
	$form['confirm_info']['#access'] = false;
	$form['confirm_info']['current_pass']['#access'] = false;
	$form['actions']['#type'] = 'actions';
	$form['actions']['cancel_action'] = array(
    '#type' => 'submit',
    '#value' => t('Atgal'),
    '#weight' => 20,
    '#submit' => array('account_agreement_intro_reset'),
    '#attributes' => array('class' => array('reset', 'btn btn-default btn-back'), 'style' => 'float: left'),
    '#limit_validation_errors' => array(),
	);
	$form['actions']['submit_action'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
    '#weight' => 15
	);
	$form['topsport_info']['data']['betcenter']['#ajax'] = array(
    'callback' => 'account_agreement_form_betting_center_callback',
    'wrapper' => 'betting_centers_info',
    'effect' => 'none',
    'progress' => array(
      'type' => 'throbber',
      'message' => '',
	),
	);
	$form['topsport_info']['data']['betcenter']['#suffix'] = '<div id="betting_centers_info"></div></div>';
	$form['#submit'] = array('account_agreement_form_submit');
	return $form;
}
function account_agreement_form_betting_center_callback(&$form, &$form_state){
	$betCenter = betting_center_centers(null, null, $form_state['values']['data']['betcenter']);
	$betCenterCity = reset(betting_center_cities($betCenter->bccid));
	$betCenterWorkhours = betting_center_workhours($betCenter->bcid);
	$workhours = array();
	foreach($betCenterWorkhours as $day){
		$workhours[] = array(
		betting_center_weekdays($day->week_day),
		array(
        'data' => t('@from:00 - @till:00', array('@from' => $day->from, '@till' => $day->till)),
        'class' => array('text-right'),
		),
		);
	}
	$html = t('Šiuo metu Jūsų pasirinktame lažybų punkte (@address) <strong>lažybų kortelių spausdinimas ir laimėjimų pervedimas į balansą vyskta tik darbo metu</strong>.', array('@address' => $betCenter->address.', '.$betCenterCity->title)).'<br/>';
	$html .= t('Lažybų punkto darbo grafikas pateiktas žemiau:').'<br /><br />';
	$html .= theme('table', array('header' => array(), 'rows' => $workhours, 'empty' => t('Darbo laiko nėra')));
	drupal_set_message($html, 'info');
	return '<div id="betting_centers_info"></div>';
}
function account_agreement_form_validate(&$form, &$form_state){
	global $language;
	$personal_country = country_GetIdByCode($form_state['values']['data']['personal_country']);
	if($form_state['values']['data']['personalId']){
		$rez = topsport_checkClientUserUniqueness($form_state['values']['data']['personalId'], $personal_country, $language->language);
		if($rez){
			if(!empty($rez['CompleteMatch']) OR !empty($rez['PartialMatch'])){
				form_set_error('', t('Jūs jau turite pasirašytą i-lažybų sutartį.'));
			}
		}else{
			form_set_error('', t('Nepavyko nusiųsti duomenų. Pabandykite dar kartą.'));
		}
	}
}
function account_agreement_form_submit(&$form, &$form_state){
	global $language;

	$account = $form['#user'];
	$category = 'account';

	form_state_values_clean($form_state);
	$account_unchanged = clone $account;
	if($form_state['values']['data']['country'] != 'LT'){
		$betting_centers = betting_center_centers(null, null, null, true);
		$rand = rand(0, count($betting_centers) - 1);
		$form_state['values']['data']['betcenter'] = $betting_centers[$rand]->tpoid;
	}
	if(!$form_state['values']['data']['ContractIdentifier']){
		$ContractIdentifier = account_generateContractIdentifier($form_state['values']['data']['betcenter']);
		$form_state['values']['data']['ContractIdentifier'] = $ContractIdentifier;
	}
	$form_state['values']['data']['ContractDate'] = date('Y-m-d');
	entity_form_submit_build_entity('user', $account, $form, $form_state);
	$edit = array_intersect_key(  (array) $account, $form_state['values']);
	$account = user_save($account_unchanged, $edit, $category);
	$xml = account_createContractXML($account);
	$rez = topsport_validateNewContractData($xml);
	if(isset($rez['Succeed']) && $rez['Succeed'] == 'true'){
		$edit['data']['agreement_step'] = 2;
		$account = user_save($account_unchanged, $edit, $category);
	}elseif(isset($rez['Errors']['Error'])){
		if(isset($rez['Errors']['Error']['ErrorMessage'])){
			drupal_set_message($rez['Errors']['Error']['ErrorMessage'], 'error');
		}else{
			foreach($rez['Errors']['Error'] as $error){
				drupal_set_message($error['ErrorMessage'], 'error');
			}
		}
	}else{
		drupal_set_message(t('Nepavyko nusiųsti duomenų. Pabandykite dar kartą.'), 'error');
	}
}

/* account agreement confirm form */
function account_agreement_form_confirm($form, &$form_state, $account){
	global $language;
	$form['#user'] = $account;

	switch($language->language){
		case 'en':
		case 'en-gb':
			$form['markup'][] = array(
      '#type' => 'markup',
      '#markup' => '
  <div style="height: 200px;overflow-y: scroll;border: 1px solid #DDD;padding: 10px;"><p align="center"><br />
    <span style="border-bottom: 1px dotted;padding: 0 5px;">201'.substr($account->data['ContractDate'], 3, 1).'</span>  metų <span style="border-bottom: 1px dotted;padding: 0 5px;">'.account_pdf_month(format_date(strtotime($account->data['ContractDate']), 'custom', 'm')).'</span> mėnesio <span style="border-bottom: 1px dotted;padding: 0 5px;">'.format_date(strtotime($account->data['ContractDate']), 'custom', 'd').'</span> diena<br />
    UAB TOP SPORT, company code  235787510, address S. Dariaus ir S. Girėno g. 31A, Kaunas, website address <a href="http://www.topsport.lt/">www.topsport.lt</a>, represented by Dainius Gulbinas, Director of the Company, acting on the basis of the articles of association of the Company, hereinafter the Bookmaker,<br />
    <strong>and</strong><br />
    Bettor <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['firstname'].' '.$account->data['middlename'].' '.$account->data['surname'].'</span>,  born  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['birthday'].'</span>,<br />
    living at <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['street'].' '.$account->data['house'].($account->data['flat'] ? '-'.$account->data['flat'] : '').', '.$account->data['city'].'</span>,  tel./e-mail  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['mobile_number'].' / '.$account->mail.'</span>, <br />
    have concluded the following Betting Contract at the betting shop of the UAB TOP SPORT, located at <span style="border-bottom: 1px dotted;padding: 0 250px 0 100px;"> </span>:</p>
  <ol>
  <li>By means of the present Contract the Bookmaker grants to the Bettor a right to participate in betting by making advance payments and transmitting information about desired predictions over a computer network and (or) phone, while the Bookmaker undertakes to accept advance bets and to count them as bets concerning ending of events indicated by the Bettor over a computer network and (or) phone in the manner provided for under the present Contract and the Regulations.</li>
  <li>The procedure for transmission of information over a computer network and (or) phone, acceptance of bets and payment of wins is established in the Regulation of the Bookmaker.</li>
  <li>By signing the present Contract, the Bettor confirms his consent for the Bookmaker to manage and store the data provided by him/her.</li>
  <li>By signing the present Contract, the Bettor confirms that it is known to him/her and s/he does not object that the Bookmaker accepts bets over a computer network and (or) phone only until the end of working hours of the Bookmaker.</li>
  <li>By signing the present Contract, the Bettor agrees that the bets based on the information transmitted by him/her will not be accepted if odds concerning the event indicated by the Bettor or other parameters defining the event indicated by the Bettor are changed prior to registration of bet information in the database of the Company.</li>
  <li>By signing the present Contract, the Bettor confirms that it is known to him/her that all bets are registered at the odds set in the computer program of the Company and indicated in the betting card. The Bettor knows and consents to that betting odds advertised on betting offer boards and the website of the Company are not binding and bets of the Bettor may be registered at odds other than those indicated on betting offer boards.</li>
  <li>By signing the present Contract, the Bettor confirms that s/he assumes all responsibility for keeping secret all codes and passwords known to him/her. The Bookmaker does not assume any liability for damages resulting from use of codes and passwords known to the Bettor, if codes and passwords known to the Bettor have been used without a fault of the Bookmaker.</li>
  <li>By signing the present Contract, the Bettor confirms that s/he has completely and duly read the Regulations of the Bookmaker and that all provisions of the betting Regulations are comprehensible and acceptable to him/her.</li>
  <li>By signing the present Contract, the Bettor confirms that s/he has received all necessary codes and passwords, including the Code Card No.  .</li>
  <li>By signing the present Contract, the Bettor states whether s/he wishes / does not wish (strike out the irrelevant option) to receive the information concerning registration of his/her bet and confirmation of registration of a bet shall be sent to his/her e-mail address, if the Bettor bets via a computer network. In case of change in the e-mail address, the Bettor must inform the Company thereof immediately.</li>
  <li>Up till the deadline for collection of winnings the Bettor has a right to connect to the webpage www.topsport.lt and print out a betting card formed on the basis of his/her bet.</li>
  <li>The Bettor agrees that if s/he participates in bets, where information is provided to the Organization of Betting by phone, bet registration confirmation will also be provided by phone.</li>
  <li>The Bettor knows and consents that when he participates in betting by providing information to the Bookmaker by phone, his/her phone conversation of a clerk of the Bookmaker is recorded and the recorded conversation is stored by the Bookmaker. The Bettor does not object that in case of a dispute between the Bettor and the Bookmaker, the record of the conversation may be used as evidence.</li>
  <li>The Bettor agrees to make advance payments for betting only from his personal accounts and undertakes to indicate in payment orders his/her account number, personal identification number necessary for banking purposes, and the purpose of payment.</li>
  <li>The Bettor agrees that all non-cash winnings are paid to the personal account indicated by the Bettor.</li>
  <li>By signing the present Contract the Bookmaker undertakes to keep confidential the information known to him in relation to performance of the present Contract to third parties, save for the cases when it is mandated by valid laws of the Republic of Lithuania.</li>
  <li>The present Contract becomes effective from the day of its signing and has open-ended validity period.</li>
  <li>The present Contract replaces without any separate document signed by the Parties all agreements between the Bettor and the Betting Organizer concerning transmission over a computer network and (or) phone of information for making bets.</li>
  <li>The present Contract may be terminated at an initiative of any of the Parties with a written notice given to the other Party given no less than 7 days in advance.</li>
  <li>All disputes concerning performance of the present Contract shall be solved in the manner provided by laws of the Republic of Lithuania at the jurisdiction of the domicile of the Bookmaker.</li>
  <li>Performance of the present Contract may be completely or partially suspended due to force majeure circumstances, as provided under the Government of the Republic of Lithuania Resolution No. 840 Concerning Approval of the Rules for Release from Liability in Case of Force Majeure Circumstances.</li>
  <li>The present Contract is executed in two copies, one for each of the Parties.</li>
  <li>Signatures of the Parties to the Contract:</li>
  </ol>
  <p><span style="padding: 0 225px 0 5px;">Bookmaker</span>                   Bettor <br />
    <span style="border-bottom: 1px dotted;padding: 0 215px 0 5px;">Dainius Gulbinas </span>           <span style="border-bottom: 1px dotted;padding: 0 70px 0 5px;">'.$account->data['firstname'].' '.$account->data['middlename'].' '.$account->data['surname'].'</span> <br />
    <span style="padding: 0 205px 0 5px;">First name, last name</span>         First name, last name </p></div>',
			);
			break;
		case 'ru':
			$form['markup'][] = array(
      '#type' => 'markup',
      '#markup' => '
  <div style="height: 200px;overflow-y: scroll;border: 1px solid #DDD;padding: 10px;"><p align="center"><br />
    <span style="border-bottom: 1px dotted;padding: 0 5px;">201'.substr($account->data['ContractDate'], 3, 1).'</span>  metų <span style="border-bottom: 1px dotted;padding: 0 5px;">'.account_pdf_month(format_date(strtotime($account->data['ContractDate']), 'custom', 'm')).'</span> mėnesio <span style="border-bottom: 1px dotted;padding: 0 5px;">'.format_date(strtotime($account->data['ContractDate']), 'custom', 'd').'</span> diena<br />
    ЗАО &bdquo;TOP SPORT&ldquo;, к.пр.  235787510, адр. ул. С.Даряус и С.Гирено 31А, Каунас, адрес Интернетного сайта <a href="http://www.topsport.lt/">www.topsport.lt</a>,в лице директора общества Дайнюса Гулбинаса, действующего на основании устава общества, далее в тексте договора «Организатор пари»,<br />
    <strong>и</strong><br />
    Игрок <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['firstname'].' '.$account->data['middlename'].' '.$account->data['surname'].'</span>,  дата рождения  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['birthday'].'</span>,<br />
    прож.  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['street'].' '.$account->data['house'].($account->data['flat'] ? '-'.$account->data['flat'] : '').', '.$account->data['city'].'</span>,  тел./эл.почта  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['mobile_number'].' / '.$account->mail.'</span>, <br />
    в букмекерском пункте ЗАО „TOP SPORT“, находящемся <span style="border-bottom: 1px dotted;padding: 0 250px 0 100px;"> </span> ,  заключили настоящий договор-пари:</p>
  <ol>
  <li>Настоящим договором Организатор пари предоставляет Игроку право на участие в соревнованиях, посредством внесения платежей авансом и передачи информации об угадываемых событиях через компьютерную сеть и/или по телефону, а Организатор пари обязуется в порядке, установленном в настоящем договоре и Регламенте, принять авансом совершаемые ставки и  за Игрока через компьютерную сеть и/или по телефону зачесть их как ставки на исход указанных событий.</li>
  <li>Порядок передачи информации по компьютерной сети и/или телефону, принятия ставок и выдачи выигрышей установлен в Регламенте Организатора пари.</li>
  <li>Игрок, подписывая настоящий договор, подтверждает, что он согласен, чтобы предъявленными им данными распоряжался и их хранил Организатор пари.</li>
  <li>Ирок, подписывая настоящий договор, подтверждает, что ему известно, и он не возражает, чтобы Организатор пари принимал информацию через компьютерную сеть и/или по телефону только до окончания рабочего времени Организатора пари.</li>
  <li>Игрок, подписывая настоящий договор, согласен, что его ставки, передаваемые на основании информации, не засчитываются, если до попадания информации для зачета ставок в базу данных общества меняется коэффициент указанного игроком события или другие параметры, определяющие указанное игроком событие.</li>
  <li>Игрок, подписывая настоящий договор, подтверждает, что ему известно, что все ставки засчитываются по коэффициенту, который установлен в компьютерной программе общества и который указывается в букмекерской карточке. Игрок знает и согласен, что букмекерские коэффициенты, объявляемые в выписках предложения пари на досках предложения и на Интернетном сайте  общества, не являются обязательными, поэтому ставки игрока могут засчитываться с иным коэффициентом, чем указано в выписках предложения пари.</li>
  <li>Игрок, подписывая настоящий договор, подтверждает, что он принимает всю ответственность за сохранение секретности всех ему известных кодов и паролей. Организатор пари не несет никакой ответственности за понесенный игроком ущерб из-за использования известных игроку кодов и паролей, если известными игроку кодами и паролями воспользовались не по вине Организатора пари.</li>
  <li>Игрок, подписывая настоящий договор, подтверждает, что с регламентом пари Организатора пари он полностью и надлежащим образом ознакомился, все положения регламента пари ему понятны и приемлемы.</li>
  <li>Подписывая настоящий договор игрок подтверждает, что получил все необходимые коды и пароли, в том числе и № карточки кодов.</li>
  <li>Подписывая настоящий договор, игрок указывает, что он желает/не желает (ненужное вычеркнуть) получить информацию о зачислении его ставки, а подтверждение о зачислении его ставки должно высылаться ему по адресу, если игрок участвует в пари передавая информацию через компьютерную сеть. Если меняется адрес его электронной почты, игрок обязан немедленно информировать об этом общество.</li>
  <li>Игрок до окончания срока получения выигрышей имеет право, подключившись к сайту www.topsport.lt, отпечатать букмекерскую карточку, сформированную на основе его сделанной ставки.</li>
  <li>Игрок согласен, что в случае его участия в пари, если информация Организатору пари передается по телефону, подтверждение о принятой ставке ему будет передано по телефону.</li>
  <li>Игрок знает и согласен, что в случае его участия в пари, если информация Организатору пари передается по телефону, его разговор по телефону с посредником Организатора пари записывается, а запись разговора хранится у Организатора пари. Игрок не возражает, что в случае возникновения спора между Игроком и Организатором пари, запись разговора может быть использована в качестве доказательства.</li>
  <li>Игрок согласен авансовые платежи для пари платить только со своих личных счетов, а в платежных поручениях обязуется указать номер своего счета, обязательную в банке идентифицирующую лицо  информацию, назначение платежа.</li>
  <li>Игрок согласен, чтобы все выплаты не наличными деньгами игроку выплачивались на указанный игроком личный счет.</li>
  <li>Организатор пари, подписывая настоящий договор, обязуется не раскрывать третьим лицам известную ему информацию, связанную с исполнением настоящего договора, за исключением случаев, когда это требуется согласно действующему законодательству ЛР.</li>
  <li>Настоящий договор вступает в силу со дня его подписания и является бессрочным.</li>
  <li>Настоящий договор без какого-либо отдельно подписываемого сторонами документа заменяет все бывшие до подписания настоящего договора соглашения игрока и Организатора пари в отношении передачи информации, предназначенной для заключения пари, через компьютерную сеть и/или по телефону.</li>
  <li>Настоящий договор может быть расторгнут по инициативе любой из сторон, письменно предупредив об этом другую сторону не менее как за 7 дней.</li>
  <li>Все споры из-за исполнения настоящего договора решаются в порядке, установленном законодательством ЛР, по месту пребывания Организатора пари.</li>
  <li>Исполнение настоящего договора может быть полностью или частично остановлено из-за обстоятельств непреодолимой силы так, как это установлено в постановлении Правительства ЛР от 15 июля 1996 г. №840 «Об утверждении правил об освобождении от ответственности при  наличии обстоятельств непреодолимой силы».</li>
  <li>Настоящий договор оформлен в двух экземплярах, по одному обеим сторонам настоящего договора.</li>
  <li>Подписи сторон настоящего договора:</li>
  </ol>
  <p><span style="padding: 0 220px 0 5px;">Организатор пари</span>       Игрок <br />
    <span style="border-bottom: 1px dotted;padding: 0 215px 0 5px;">Dainius Gulbinas </span>           <span style="border-bottom: 1px dotted;padding: 0 70px 0 5px;">'.$account->data['firstname'].' '.$account->data['middlename'].' '.$account->data['surname'].'</span> <br />
    <span style="padding: 0 220px 0 5px;">имя, фамилия</span>                имя, фамилия </p></div>',
			);
			break;
		default:
			$form['markup'][] = array(
      '#type' => 'markup',
      '#markup' => '
  <div style="height: 200px;overflow-y: scroll;border: 1px solid #DDD;padding: 10px;"><p align="center"><br />
    <span style="border-bottom: 1px dotted;padding: 0 5px;">201'.substr($account->data['ContractDate'], 3, 1).'</span>  metų <span style="border-bottom: 1px dotted;padding: 0 5px;">'.account_pdf_month(format_date(strtotime($account->data['ContractDate']), 'custom', 'm')).'</span> mėnesio <span style="border-bottom: 1px dotted;padding: 0 5px;">'.format_date(strtotime($account->data['ContractDate']), 'custom', 'd').'</span> diena<br />
    UAB &bdquo;TOP SPORT&ldquo;, įm. k.  235787510, adr. S. Dariaus ir S. Girėno g. 31A, Kaunas, interneto svetainės  adresas <a href="http://www.topsport.lt/">www.topsport.lt</a>,  atstovaujama bendrovės direktoriaus Dainiaus Gulbino, veikiančio bendrovės įstatų pagrindu, toliau šioje sutartyje vadinama &bdquo;Lažybų organizatorius&ldquo;,<br />
    <strong>Ir</strong><br />
    Lošėjas <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['firstname'].' '.$account->data['middlename'].' '.$account->data['surname'].'</span>,  gimimo data  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['birthday'].'</span>,<br />
    gyv.  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['street'].' '.$account->data['house'].($account->data['flat'] ? '-'.$account->data['flat'] : '').', '.$account->data['city'].'</span>,  tel./el. paštas  <span style="border-bottom: 1px dotted;padding: 0 20px 0 10px;">'.$account->data['mobile_number'].' / '.$account->mail.'</span>, <br />
    UAB &bdquo;TOP SPORT&ldquo; lažybų  punkte, esančiame <span style="border-bottom: 1px dotted;padding: 0 250px 0 100px;"> </span> ,  sudarėme šią lažybų sutartį:</p>
  <ol>
  <li>Šia sutartimi Lažybų organizatorius suteikia teisę Lošėjui dalyvauti lažybose įmokas atliekant avansu ir perduodant informaciją apie pageidaujamus spėti įvykius per kompiuterinį tinklą ir/ar telefonu, o Lažybų organizatorius įsipareigoja šioje sutartyje ir Reglamente nustatyta tvarka priimti avansu atliekamus statymus ir įskaityti juos kaip statymus už Lošėjo per kompiuterinį tinklą ir/ar telefonu nurodytų įvykių baigtį.</li>
  <li>Informacijos perdavimo kompiuteriniu tinklu ir/ar telefonu, statymų priėmimo ir laimėjimų išmokėjimo tvarka yra nustatyta Lažybų organizatoriaus Reglamente.</li>
  <li>Lošėjas, pasirašydamas šią sutartį, patvirtina, kad jis sutinka, jog jo pateikti duomenys bus tvarkomi ir saugomi Lažybų organizatoriaus.</li>
  <li>Lošėjas, pasirašydamas šią sutartį, patvirtina, kad jam yra žinoma, ir jis neprieštarauja, kad informacija per kompiuterinį tinklą ir/ar telefonu Lažybų organizatoriaus yra priimama tik iki Lažybų organizatoriaus darbo laiko pabaigos.</li>
  <li>Lošėjas, pasirašydamas šią sutartį, sutinka, kad jo perduotos informacijos pagrindu statymai nėra įskaitomi, jeigu iki informacijos dėl statymų įskaitymo patekimo į bendrovės duomenų bazę yra keičiamas lošėjo nurodyto įvykio koeficientas ar kiti lošėjo nurodytą įvykį apibrėžiantys parametrai.</li>
  <li>Lošėjas, pasirašydamas šią sutartį, patvirtina, kad jam yra žinoma, kad visi statymai yra įskaitomi koeficientu, kuris yra nustatytas bendrovės kompiuterinėje programoje ir kuris yra nurodomas lažybų kortelėje. Lošėjas žino ir sutinka, kad lažybų koeficientai, skelbiami lažybų pasiūlos išrašuose pasiūlos lentose ir bendrovės interneto tinklapyje, nėra privalomojo pobūdžio, todėl lošėjo statymai gali būti įskaityti kitokiu koeficientu, negu nurodyta lažybų pasiūlos išrašuose.</li>
  <li>Lošėjas, pasirašydamas šią sutartį, patvirtina, kad jis prisiima visą atsakomybę už jam žinomų kodų ir slaptažodžių slaptumo išsaugojimą. Lažybų organizatorius neprisiima jokios atsakomybės už lošėjui kilusią žalą dėl pasinaudojimo lošėjui žinomais kodais ir slaptažodžiais, jeigu lošėjui žinomais kodais ir slaptažodžiais buvo pasinaudota ne dėl Lažybų organizatoriaus kaltės.</li>
  <li>Lošėjas, pasirašydamas šią sutartį, patvirtina, kad su Lažybų organizatoriaus lažybų reglamentu jis yra pilnai ir tinkamai susipažinęs, visos lažybų reglamento nuostatos jam yra suprantamos ir priimtinos.</li>
  <li>Pasirašydamas šią sutartį, lošėjas patvirtina, kad visus reikiamus kodus ir slaptažodžius, tame tarpe ir kodų kortelę Nr.   gavo.</li>
  <li>Pasirašydamas šią sutartį, lošėjas nurodo, kad jis pageidauja/nepageidauja(nereikalingą išbraukti) gauti informaciją apie jo statymo įskaitymą, o  patvirtinimas apie jo statymo įskaitymą jam turi būti siunčiamas adresu <span style="border-bottom: 1px dotted;padding: 0 50px 0 50px;"> </span>, jeigu lošėjas dalyvauja lažybose perduodamas informaciją per kompiuterinį tinklą. Pasikeitus jo elektroninio pašto adresui, lošėjas privalo nedelsdamas informuoti apie tai bendrovę.</li>
  <li>Lošėjas iki termino laimėjimams atsiimti pabaigos turi teisę prisijungęs prie tinklapio www.topsport.lt atsispausdinti jo atlikto statymo pagrindu suformuotą lažybų kortelę.</li>
  <li>Lošėjas sutinka, kad jam dalyvaujant lažybose, kai informacija Lažybų organizatoriui perduodama telefonu, patvirtinimas apie priimtą statymą jam perduodamas telefonu.</li>
  <li>Lošėjas žino ir sutinka, kad jam dalyvaujant lažybose, kai informacija Lažybų organizatoriui perduodama telefonu, jo pokalbis telefonu su Lažybų organizatoriaus lažybų tarpininku yra įrašomas, o pokalbio įrašas yra saugomas pas Lažybų organizatorių. Lošėjas neprieštarauja, kad kilus ginčui tarp Lošėjo ir Lažybų organizatoriaus, pokalbio įrašas gali būti panaudotas kaip įrodymas.</li>
  <li>Lošėjas sutinka avansines įmokas lažyboms mokėti tik iš savo asmeninių sąskaitų, o mokėjimų pavedimuose įsipareigoja nurodyti savo sąskaitos numerį, banke privalomą pateikti asmenį identifikuojančią informaciją, mokėjimo paskirtį.</li>
  <li>Lošėjas sutinka, kad visi išmokėjimai ne grynais pinigais lošėjui būtų išmokami į lošėjo nurodytą asmeninę sąskaitą.</li>
  <li>Lažybų organizatorius, pasirašydamas šią sutartį, įsipareigoja neatskleisti jam žinomos informacijos, susijusios su šios sutarties vykdymu, tretiesiems asmenims, išskyrus atvejus, kai to reikalauja galiojantys LR įstatymai.</li>
  <li>Ši sutartis įsigalioja nuo jos pasirašymo dienos ir yra neterminuota.</li>
  <li>Ši sutartis be jokio atskiro šalių pasirašomo dokumento pakeičia visus iki šios sutarties pasirašymo buvusius lošėjo ir Lažybų organizatoriaus susitarimus dėl informacijos, skirtos lažyboms sudaryti, perdavimo per kompiuterinį tinklą ir/ar telefonu.</li>
  <li>Ši sutartis gali būti nutraukta bet kurios šalies iniciatyva, įspėjus raštu apie tai kitą šalį ne mažiau, kaip prieš 7 dienas.</li>
  <li>Visi ginčai dėl šios sutarties vykdymo sprendžiami LR įstatymų nustatyta tvarka pagal Lažybų organizatoriaus buvimo vietą.</li>
  <li>Šios sutarties vykdymas gali būti visiškai ar iš dalies sustabdytas dėl nenugalimos jėgos aplinkybių taip, kaip tai yra nustatyta 1996 m. liepos mėn. 15 d. LR Vyriausybės nutarime Nr. 840 „Dėl atleidimo nuo atsakomybės esant nenugalimos jėgos aplinkybėms taisyklių patvirtinimo“.</li>
  <li>Ši sutartis sudaryta dviem egzemplioriais, po vieną abiems šios sutarties šalims.</li>
  <li>Šios sutarties šalių parašai:</li>
  </ol>
  <p><span style="padding: 0 205px 0 5px;">Lažybų organizatorius</span>     Lošėjas <br />
    <span style="border-bottom: 1px dotted;padding: 0 215px 0 5px;">Dainius Gulbinas </span>           <span style="border-bottom: 1px dotted;padding: 0 70px 0 5px;">'.$account->data['firstname'].' '.$account->data['middlename'].' '.$account->data['surname'].'</span> <br />
    <span style="padding: 0 205px 0 5px;">vardas, pavardė</span>                  vardas,  pavardė </p></div>',
			);
			break;
	}
	$form['markup'][] = array(
    '#type' => 'markup',
    '#markup' => '<br />',
	);

	$form['terms_of_use'] = array(
    '#type' => 'checkbox',
    '#title' => t("Aš sutinku su sutarties sąlygomis"),
    '#default_value' => 0,
    '#required' => TRUE,
    '#weight' => 3,
	);

	$form['cancel_action'] = array(
    '#type' => 'submit',
    '#value' => t('Atgal'),
    '#weight' => 4,
    '#submit' => array('account_agreement_form_confirm_cancel'),
    '#attributes' => array('class' => array('reset', 'btn btn-default btn-back')),
    '#limit_validation_errors' => array(),
	);

	$form['submit_action'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
    '#weight' => 5,
	);


	return $form;
}
function account_agreement_form_confirm_cancel($form, &$form_state){
	$account = $form['#user'];
	$edit['data']['agreement_step'] = 1;
	user_save($account, $edit);
}
function account_agreement_form_confirm_submit($form, &$form_state){
	$account = $form['#user'];
	//   drupal_set_message(t('Sutarties pasirašymas laikinai sustabdytas'), 'error');
	//   return;
	if($account->data['UserCardNumber'] === '000000'){
		$key = 'variable_account_userPinNumbers';
		$userPinNumbers = variable_get($key, 100000);
		variable_set($key, --$userPinNumbers);
		$account->data['UserCardNumber'] = $userPinNumbers;
		$account->data['PinCardNumber'] = $userPinNumbers;
	}
	$xml = account_createContractXML($account);

	$rez = topsport_saveNewIBetContract($xml);
	if(isset($rez['Succeed']) && $rez['Succeed'] == 'true' && isset($rez['ClientUserId'])){
		//   $rez = topsport_validateNewContractData($xml);
		//   if(isset($rez['Succeed']) && $rez['Succeed'] == 'true'){
		$edit['data']['agreement_step'] = 3;
		$edit['data']['tsuid'] = $rez['ClientUserId'];
		$edit['roles'] = array(variable_get('account_roles_topsport_contract', '') => 1);
		$account = user_save($account, $edit, 'account');
		acccount_updateUser($account);
		$form_state['redirect'] = 'account/deposits';
		drupal_set_message(t('Sutartis pasirašyta. Dabar jūs galite naudotis visomis lažybų svetainės paslaugomis išskyrus pinigų išmokėjimą, kuriam reikalinga <a href="@url">įkelti asmens tapatybę patvirtinantį dokumentą</a>.', array('@url' => url('account/withdrawals'))));
		}elseif(isset($rez['Errors']['Error'])){
			if(isset($rez['Errors']['Error']['ErrorMessage'])){
				drupal_set_message($rez['Errors']['Error']['ErrorMessage'], 'error');
			}else{
				foreach($rez['Errors']['Error'] as $error){
					drupal_set_message($error['ErrorMessage'], 'error');
				}
			}
		}else{
			drupal_set_message(t('Nepavyko nusiųsti duomenų. Pabandykite dar kartą.'), 'error');
		}
	}


	/* */
	function account_agreement_form_upload_document($form, &$form_state, $account){

		$form['#user'] = $account;
		$form['document']['d_markup'] = array(
    '#type' => 'markup',
    '#markup' => '<h3>'.t('Dokumentų įkėlimas').'</h3>',
		);

		$form['document']['f_markup'] = array(
    '#markup' => '<p>'.t('Įkeltas dokumentas privalo būti spalvotas, matytis asmens fotografija, vardas, pavardė, asmens kodas, dokumentas privalo galioti ir visi duomenys privalo aiškiai, bei vienareikšmiškai identifikuojami.').'</p>',
		);

		$form['document']['current_step'] = array('#type' => 'value', '#value' => $form['#user']->data['agreement_step']);

		$form['document']['file'] = array(
    '#type' => 'file',
    '#title' => t('Asmens dokumentas'),
    '#size' => 40,
		//     '#description' => t('Įkeltame dokumente privalo aiškiai matytis visi duomenys'),
		);
		$form['document']['document_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
		);

		return $form;

	}
	function account_agreement_form_upload_document_validate($form, &$form_state){
		$file = file_save_upload('file');
		if ($file === FALSE) {
			form_set_error('file', t("Failed to upload the file"));
		}elseif ($file !== NULL) {
			$form_state['values']['file'] = $file;
		}

	}
	function account_agreement_form_upload_document_submit($form, &$form_state){
		$file = $form_state['values']['file'];
		if($file !== NULL){
			$account = $form['#user'];
			if (!empty($file->fid)) {
				if (($file->status & FILE_STATUS_PERMANENT) == 0){
					$info = image_get_info($file->uri);
					$directory = 'private://uploaded-documents';
					file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
					$destination = file_stream_wrapper_uri_normalize($directory . '/document-' . $account->uid . '-' . REQUEST_TIME . '.' . $file->filename);
					if ($file = file_move($file, $destination, FILE_EXISTS_RENAME)){
						$file->status |= FILE_STATUS_PERMANENT;
						$file = file_save($file);
						account_log($account->uid, 'vartotojo dokumentas', 'Įkeltas naujas dokumentas.', array(), WATCHDOG_NOTICE, l(t('Dokumentas'), file_create_url($file->uri), array('attributes' => array('target' => '_blank'))));
						$account_unchanged = clone $account;
						$edit['data']['agreement_step'] = 4;
						$edit['data']['document_file'] = $file->fid;
						$edit['data']['agreement_reject_comment'] = null;
						$account = user_save($account_unchanged, $edit);
						switch($form_state['values']['current_step']){
							case 3:
								_account_mail_notify('account_pending_approval', $account);
								break;
							case 3.2:
								_account_mail_notify('account_pending_approval_upload_document', $account);
								break;
						}
					}
				}
			}
		}
	}



	/* */
	function account_agreement_form_upload_agreement($form, &$form_state, $account){

		$form['#user'] = $account;

		if(!isset($form['#user']->data['agreement_file']) OR !$form['#user']->data['agreement_file']){
			$form['agreement']['a_markup'] = array(
      '#type' => 'markup',
      '#markup' => '<br />'.t('Sutartis suformuota.').' '.l(t('Parsisiųsti'), 'account/agreement-upload/pdf').'<br />'.t('Prašome atsispausdinti sutartį ir išsiųsti paštu:').'<br />'.t('UAB "Top Sport"<br />S.Dariaus ir S. Girėno g. 31A, Kaunas').'<br /><br />'.t('arba galite atspausdinti ir įkelti.'),
			);
			$form['agreement']['file'] = array(
      '#type' => 'file',
      '#title' => t('Sutartis'),
      '#size' => 40,
			);
			$form['agreement']['agreement_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm'),
			);
		}else{
			$form['agreement']['a_markup'] = array(
      '#type' => 'markup',
      '#markup' => '<br />'.t('Sutartis įkelta.'),
			);

		}

		return $form;

	}
	function account_agreement_form_upload_agreement_validate($form, &$form_state){

		$file = file_save_upload('file');
		if ($file === FALSE) {
			form_set_error('file', t("Failed to upload the file"));
		}
		elseif ($file !== NULL) {
			$form_state['values']['file'] = $file;
		}

	}
	function account_agreement_form_upload_agreement_submit($form, &$form_state){
		$file = $form_state['values']['file'];
		if($file !== NULL){
			$account = $form['#user'];
			if (!empty($file->fid)) {
				if (($file->status & FILE_STATUS_PERMANENT) == 0){
					$info = image_get_info($file->uri);
					$directory = 'private://uploaded-documents';
					file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
					$destination = file_stream_wrapper_uri_normalize($directory . '/agreement-' . $account->uid . '-' . REQUEST_TIME . '.' . $file->filename);
					if ($file = file_move($file, $destination, FILE_EXISTS_RENAME)){
						$file->status |= FILE_STATUS_PERMANENT;
						$file = file_save($file);
						//           $category = 'account';
						$account_unchanged = clone $account;
						//           form_state_values_clean($form_state);
						//           entity_form_submit_build_entity('user', $account, $form, $form_state);
						//           $edit = array_intersect_key((array) $account, $form_state['values']);
						$edit['data']['agreement_file'] = $file->fid;
						$account = user_save($account_unchanged, $edit);
						drupal_set_message(t('Sutartis sėkmingai įkelta'));
						$form_state['redirect'] = 'account';
					}
				}
			}
		}
	}

	/* */
	function account_agreement_form_waiting ($form, &$form_state){

		$form['text1'] = array(
    '#type' => 'markup',
    '#markup' =>
      '<div class="messages status">
        '.t('Jūsų dokumentas įkeltas sėkmingai, mes kuo skubiau peržiūrėsime, įvertinsime ir iškarto informuosime apie išmokėjimo operacijų aktyvavimą Jus elektroniniu paštu.').'
      </div>',
		);
		$form['text2'] = array(
    '#type' => 'markup',
    '#markup' => '<p><small>'.t('* Dokumentų peržiūra ir patvirtinimas gali užtrukti iki kelių darbo valandų (darbo dienomis), priklausomai nuo pateiktų dokumentų kiekio esamu momentu.').'</small></p>',
		);
		return $form;
	}


	function account_reject_validate(&$form, &$form_state){
		if($form_state['values']['reject']['comment'] == ''){
			form_set_error('reject][comment', 'Įveskite atmetimo komentarą');
		}
	}
	function account_reject_submit(&$form, &$form_state){
		$function = 'account_reject_'.$form_state['values']['reject']['type'];
		$function($form, $form_state);
	}
	function account_reject_update_personal_info(&$form, &$form_state){
		$account = user_load($form['#user']->uid);
		$edit['data']['agreement_step'] = 3.1;
		$edit['data']['agreement_reject_comment'] = $form_state['values']['reject']['comment']['value'];
		$account = user_save($account, $edit);
		account_log($account->uid, 'atmetimo priežastis', 'Patikslinkite asmeninius duomenis. Priežastis: !comment', array('!comment' => $form_state['values']['reject']['comment']['value']), WATCHDOG_NOTICE);
		_account_mail_notify('account_reject_update_personal_info', $account);
	}
	function account_reject_incorrect_document(&$form, &$form_state){
		$account = user_load($form['#user']->uid);
		$edit['data']['agreement_step'] = 3.2;
		$edit['data']['document_file'] = null;
		$edit['data']['agreement_reject_comment'] = $form_state['values']['reject']['comment']['value'];

		$document_file = null;
		if($account->data['document_file']){
			$file_object = file_load($account->data['document_file']);
			if($file_object){
				$document_file = l(t('Dokumentas'), file_create_url($file_object->uri), array('attributes' => array('target' => '_blank')));
			}
		}
		$account = user_save($account, $edit);
		account_log($account->uid, 'atmetimo priežastis', 'Netinkamas dokumentas. Priežastis: !comment', array('!comment' => $form_state['values']['reject']['comment']['value']), WATCHDOG_NOTICE, $document_file);
		_account_mail_notify('account_reject_incorrect_document', $account);
	}
	/*
	 function account_approve_validate(&$form, &$form_state){

	 if($form_state['values']['approve']['pin_id'] == ''){
	 form_set_error('approve][pin_id', 'Neįvestas PIN ID');
	 }
	 if($form_state['values']['approve']['card_id'] == ''){
	 form_set_error('approve][card_id', 'Neįvestas Kortelės ID');
	 }
	 if($form_state['values']['approve']['pin_id'] AND $form_state['values']['approve']['card_id']){
	 $xml = account_createContractXMLFromFormValues($form_state['values']);
	 $rez = topsport_validateNewContractData($xml);
	 if(isset($rez['Succeed']) && $rez['Succeed'] == 'true'){
	 }elseif(isset($rez['Errors']['Error'])){
	 form_set_error('', 'Duomenų patvirtinimas nepavyko');
	 if(isset($rez['Errors']['Error']['ErrorMessage'])){
	 form_set_error($rez['Errors']['Error']['ErrorId'], $rez['Errors']['Error']['ErrorMessage']);
	 }else{
	 foreach($rez['Errors']['Error'] as $error){
	 form_set_error($error['ErrorId'], $error['ErrorMessage']);
	 }
	 }
	 }elseif(isset($rez['Message'])){
	 form_set_error('', $rez['Message']);
	 }else{
	 form_set_error('', t('Nepavyko nusiųsti duomenų. Pabandykite dar kartą.'));
	 }
	 }
	 }*/
	function account_approve_submit(&$form, &$form_state){

		$edit['roles'] = array(variable_get('account_roles_topsport_full') => 1);
		$edit['data']['agreement_step'] = 5;
		$account = $form_state['user'];

		//   $form_state['rebuild'] = TRUE;
		$rez = _account_mail_notify('account_approval_confirm', $account);		
		if($rez){
			$form_state['user'] = user_save($account, $edit);
			account_log($account->uid, 'vartotojas patvirtintas', 'Vartotojo įkeltas dokumentas buvo patvirtintas', array(), WATCHDOG_NOTICE);
		}else{
			drupal_set_message(t('Nepavyko aktyvuoti vartotojo, dėl galimų priežasčių: el.pašto adresas nebegalioja arba nepavyksta išsiųsti laiško.'), 'error');
		}

		//   $xml = account_createContractXMLFromFormValues($form_state['values']);
		//   $rez = topsport_saveNewIBetContract($xml);
		//   $form_state['rebuild'] = TRUE;
		//   if(isset($rez['Succeed']) && $rez['Succeed'] == 'true' && isset($rez['ClientUserId'])){
		//     $edit['data']['agreement_step'] = 5;
		//     $edit['data']['tsuid'] = $rez['ClientUserId'];
		//     $edit['roles'] = array(4 => 1);
		//     $account = user_load($form['#user']->uid);
		//     $category = 'account';
		//     $account = user_save($account, $edit, $category);
		//     acccount_updateUser($account);
		//     _account_mail_notify('account_approval_confirm', $account);
		//     $form_state['rebuild'] = FALSE;
		//   }elseif(isset($rez['Errors']['Error'])){
		//     drupal_set_message('Duomenų patvirtinimas nepavyko', 'error');
		//     if(isset($rez['Errors']['Error']['ErrorMessage'])){
		//       drupal_set_message($rez['Errors']['Error']['ErrorMessage'], 'error');
		//     }else{
		//       foreach($rez['Errors']['Error'] as $error){
		//         drupal_set_message($error['ErrorMessage'], 'error');
		//       }
		//     }
		//   }else{
		//     drupal_set_message(t('Nepavyko nusiųsti duomenų. Pabandykite dar kartą.'), 'error');
		//   }

		}
		function account_pause_submit(&$form, &$form_state){
			$edit['roles'] = array(variable_get('account_roles_topsport_paused') => 1);
			$account = $form_state['user'];
			$result = topsport_updateClientUserState($account->data['tsuid'], 'PAUSE');
			if(in_array('true', $result)){
				$form_state['user'] = user_save($account, $edit);
				drupal_set_message('Vartotojas apribotos sėkmingai.');
			}else{
				drupal_set_message('Nepavyko apriboti vartotojo, pamėginkite dar kartą.', 'error');
			}
		}

		function account_resume_submit(&$form, &$form_state){
			$edit['roles'] = array(variable_get('account_roles_topsport_contract') => 1);
			$account = $form_state['user'];
			$result = topsport_updateClientUserState($account->data['tsuid'], 'START');
			if(in_array('true', $result)){
				$form_state['user'] = user_save($account, $edit);
				drupal_set_message('Vartotojas apribojimas atšauktas.');
			}else{
				drupal_set_message('Nepavyko atšaukti apribojimo, pamėginkite dar kartą.', 'error');
			}
		}


		function account_agreement_form_update(&$form, &$form_state/*, $account*/){

			//   $form['#user'] = $account;

			//   account_account_form($form, $form_state);

			$form['account']['#access'] = FALSE;

			$form['personal_info']['data']['personalId']['#access'] = TRUE;
			$form['personal_info']['data']['personalId']['#disabled'] = TRUE;
			$form['personal_info']['data']['personal_country']['#access'] = TRUE;
			$form['personal_info']['data']['personal_country']['#disabled'] = TRUE;
			$form['personal_info']['data']['sex']['#access'] = FALSE;
			$form['personal_info']['data']['firstname']['#disabled'] = TRUE;
			$form['personal_info']['data']['middlename']['#disabled'] = TRUE;
			$form['personal_info']['data']['surname']['#disabled'] = TRUE;
			$form['personal_info']['data']['mobile_number']['#disabled'] = FALSE;
			$form['personal_info']['data']['home_number']['#disabled'] = FALSE;
			$form['personal_info']['data']['work_number']['#disabled'] = FALSE;

			$form['address_info']['#access'] = TRUE;
			$form['address_info']['data']['street']['#access'] = TRUE;
			$form['address_info']['data']['flat']['#access'] = TRUE;
			$form['address_info']['data']['house']['#access'] = TRUE;
			$form['address_info']['data']['zip']['#access'] = TRUE;
			$form['address_info']['data']['city']['#access'] = TRUE;
			$form['address_info']['data']['country']['#access'] = TRUE;
			$form['address_info']['data']['street']['#disabled'] = FALSE;
			$form['address_info']['data']['flat']['#disabled'] = FALSE;
			$form['address_info']['data']['house']['#disabled'] = FALSE;
			$form['address_info']['data']['zip']['#disabled'] = FALSE;
			$form['address_info']['data']['city']['#disabled'] = FALSE;
			$form['address_info']['data']['country']['#disabled'] = FALSE;
			unset($form['address_info']['data']['country']['#ajax']);

			$form['confirm_info']['#access'] = FALSE;
			$form['confirm_info']['pin']['index'] = array('#type' => 'value', '#value' => '0');
			$form['confirm_info']['pin']['value'] = array('#type' => 'value', '#value' => '000000');
			$form['confirm_info']['current_pass']['#access'] = FALSE;

			$form['topsport_info']['#access'] = FALSE;

			$form['current_step'] = array('#type' => 'value', '#value' => $form['#user']->data['agreement_step']);

			$form['#submit'][] = 'account_agreement_form_update_submit';

			$form['timezone']['#access'] = FALSE;
			$form['locale']['#access'] = FALSE;

		}

		function account_agreement_form_update_submit(&$form, &$form_state){
			global $language;
			if(isset($form_state['update_status']) AND $form_state['update_status']){
				$account = $form_state['user'];
				$category = $form['#user_category'];
				$edit['data']['agreement_step'] = 4;
				$edit['data']['agreement_reject_comment'] = null;
				$account = user_save($account, $edit, $category);
				account_log($account->uid, 'duomenų atnaujinimas', 'Vartotojas atnaujino savo duomenis.', array(), WATCHDOG_NOTICE);
				switch($form_state['values']['current_step']){
					case 3:
						_account_mail_notify('account_pending_approval', $account);
						break;
					case 3.1:
						_account_mail_notify('account_pending_approval_update', $account);
						break;
				}
			}
			/*
			 $account = $form['#user'];
			 $category = 'account';

			 form_state_values_clean($form_state);
			 entity_form_submit_build_entity('user', $account, $form, $form_state);
			 $edit = array_intersect_key((array) $account, $form_state['values']);
			 $account = user_save($account, $edit, $category);

			 $xml = account_createContractXML($account);
			 $rez = topsport_validateNewContractData($xml);
			 if(isset($rez['Succeed']) && $rez['Succeed'] == 'true'){
			 $edit['data']['agreement_step'] = 4;
			 $edit['data']['agreement_reject_comment'] = null;
			 $account = user_save($account, $edit, $category);
			 switch($form_state['values']['current_step']){
			 case 3:
			 _account_mail_notify('account_pending_approval', $account);
			 break;
			 case 3.1:
			 _account_mail_notify('account_pending_approval_update', $account);
			 break;
			 }
			 }elseif(isset($rez['Errors']['Error'])){
			 if(isset($rez['Errors']['Error']['ErrorMessage'])){
			 drupal_set_message($rez['Errors']['Error']['ErrorMessage'], 'error');
			 }else{
			 foreach($rez['Errors']['Error'] as $error){
			 drupal_set_message($error['ErrorMessage'], 'error');
			 }
			 }
			 }else{
			 drupal_set_message(t('Nepavyko nusiųsti duomenų. Pabandykite dar kartą.'), 'error');
			 }*/
		}


		function account_generateContractIdentifier($betcenter, $ContractNumber = false){
			if(!$ContractNumber){
				$key = 'variable_account_contract_'.$betcenter;
				$ContractNumber = variable_get($key, variable_get('variable_account_contract'));
				variable_set($key, ++$ContractNumber);
			}
			return '8'.sprintf('%04d', $betcenter).'-'.sprintf('%02d', $ContractNumber);
		}

		function account_createContractXML($account){
			$xml = '<?xml version="1.0" encoding="UTF-8" ?>
  <iContract>
    <FirstName>'.$account->data['firstname'].'</FirstName>
    <MiddleName>'.$account->data['middlename'].'</MiddleName>
    <LastName>'.$account->data['surname'].'</LastName>
    <BirthDate>'.$account->data['birthday'].'</BirthDate>
    <PersonalCode>'.$account->data['personalId'].'</PersonalCode>
    <UserCountryId>'.country_GetIdByCode($account->data['personal_country']).'</UserCountryId>
    <ContractIdentifier>'.$account->data['ContractIdentifier'].'</ContractIdentifier>
    <ContractDate>'.$account->data['ContractDate'].'</ContractDate>
    <UserCardNumber>'.(isset($account->data['UserCardNumber']) ? $account->data['UserCardNumber'] : '000000').'</UserCardNumber>
    <PinCardNumber>'.(isset($account->data['PinCardNumber']) ? $account->data['PinCardNumber'] : '000000').'</PinCardNumber>
    <AddressCountryId>'.country_GetIdByCode($account->data['country']).'</AddressCountryId>
    <AddressCityOrVillage>'.$account->data['city'].'</AddressCityOrVillage>
    <AddressPostalCode>'.$account->data['zip'].'</AddressPostalCode>
    <AddressStreet>'.$account->data['street'].'</AddressStreet>
    <AddressBuilding>'.$account->data['house'].'</AddressBuilding>
    <AddressApartment>'.$account->data['flat'].'</AddressApartment>
    <DayTimePhone1>'.(isset($account->data['work_number']) ? $account->data['work_number'] : '').'</DayTimePhone1>
    <DayTimePhone2></DayTimePhone2>
    <EveningPhone1>'.(isset($account->data['home_number']) ? $account->data['home_number'] : '').'</EveningPhone1>
    <EveningPhone2></EveningPhone2>
    <CellularPhone1>'.$account->data['mobile_number'].'</CellularPhone1>
    <CellularPhone2></CellularPhone2>
    <Email>'.$account->mail.'</Email>
    <UserOfficeId>'.$account->data['betcenter'].'</UserOfficeId>
    <LanguageId>'.topsport_LangCodes($account->language).'</LanguageId>
  </iContract>';

			return $xml;
		}
	

		/* deposits form */
		function account_deposits_form($form, &$form_state, $account){

			if(isset($form_state['storage']['form'])){
				return $form_state['storage']['form'];
			}
			return account_deposits_form_data($form, $form_state, $account);

		}


		function account_PaymentGroups(){
			return array(
    'banklink' => t('Bankiniai mokėjimai (bank link)'),
    'ewallet' => t('E-piniginė'),
    'credit' => t('Kreditinė/Debetinė kortelė'),
    'banktransfer' => t('Bankinis pavedimas'),
    'cash' => t('Grynaisiais'),
			);
		}

	function account_deposits_form_step2($form, &$form_state,  $account){
	    $payment_form = array();
	    $payment_form['#user'] = $account;
	    $payment_form['#action'] = $form['#action'];
	    $payment_form['currency'] = array('#type'=>'hidden', '#value' =>$form_state['values']['currency']);
	    $payment_form['payment_method'] = array('#type'=>'hidden', '#value' =>$form_state['values']['payment_method']);
	    $is_submit_action = true;	    
				
	    $payment_form['payment_method_icon'] = array(
            '#markup' => _account_payment_method_data($form_state['values']['payment_method'], 'title'),
            '#prefix' => '<div>',
            '#suffix' => '</div>',
		);	    
	    
		$meth_name = $form_state['values']['payment_method'];
		if($viewonly = _account_payment_method_data($form_state['values']['payment_method'] , 'viewonly'))
		{
			$payment_form['payment_method_description'] = 
			array(
				'#markup' => '<p>'.	$viewonly . '</p>',
				'#prefix' => '<div class="form-item">',
                '#suffix' => '</div>',
			);
		}
		else
		{
            $payment_form['payment_method_v'] = array(
                '#markup' =>  '<strong>'.t('Įmokos būdas:').'</strong> '.$meth_name,
                '#prefix' => '<div class="form-item">',
                '#suffix' => '</div>',
            );

            // komisiniai
            $payment_form['komisiniai'] = array(
                '#markup' => t('Komisiniai').': '._account_payment_method_data($form_state['values']['payment_method'], 'komisiniai'),
                '#prefix' => '<div class="form-item">',
                '#suffix' => '</div>',
            );
            $payment_form['payment_update'] = array(
                '#markup' => t('Įmokos įskaitymo trukmė').': '._account_payment_method_data($form_state['values']['payment_method'], 'update'),
                '#prefix' => '<div class="form-item">',
                '#suffix' => '</div>',
            );

            $payment_form['amount'] = array(
                '#type' => 'textfield',
                '#title' => t('Papildymo suma'),
                '#default_value' => '',
                '#size' => 5,
                '#maxlength' => 10,
                '#required' => TRUE,
                '#field_suffix' => account_get_currency($account->uid) . ' ( ' . t('Min.').' '.account_currency_convert_string($account->uid, _account_payment_method_data($form_state['values']['payment_method'], 'limit_min'), 'LTL', false) . ' ) ',
            );

            $payment_form['amounts_predefined'] = array(
              '#markup' =>  t('Greitas įvedimas').'<div class="btn-group btn-group-quicktype"><a class="btn" href="javascript:;">20</a> <a class="btn" href="javascript:;">50</a> &nbsp; <a class="btn" href="javascript:;">100</a> <a class="btn" href="javascript:;">200</a> <a class="btn" href="javascript:;">500</a></div>',
              '#prefix' => '<div class="form-item amount-selector" style="margin-bottom:20px;">',
              '#suffix' => '</div>',
            );
		}
		
	    $payment_form['back'] = array(
            '#markup' => '<a href="'.url('account/deposits').'" class="btn btn-default btn-back">'.t('Atgal').'</a>',
            '#weight' => '20',
		);
		
		if(!$viewonly)
	    $payment_form['submit_action'] = array(
            '#type' => 'submit',
            '#value' => t('Continue'),
            '#weight' => '21',
            '#access' => $is_submit_action,
            '#attributes' => array('class' => array('btn', 'btn-primary'))
        );
	    
		$payment_form['#attached']['js'] = array("(function($){
			$(document).ready(function(){
			if (_gaq)
			_gaq.push([ '_trackEvent',
			    'Sąskaitos papildymas',
			    'Metodo pasirinkimas',
				'$meth_name'
			     ]);			


			$('.amount-selector a').click(function(){				
				$('#edit-amount').val($(this).text());
				 if (_gaq)
			_gaq.push([ '_trackEvent',
			    'Sąskaitos papildymas',
			    'Greitas sumos pasirinkimas',
			    $(this).text() ]);
		});
		});
		})(jQuery);" => array('type' => 'inline'));
		
	    return $payment_form;
	}
		
		function account_deposits_form_data($form, &$form_state,  $account){

			if(isset($form_state['storage']['form'])){
				return $form_state['storage']['form'];
			}

			$form['#user'] = $account;
			$form['#step'] = 1;

			$form['currency'] = array(
                '#type' => 'value',
                '#value' => account_get_currency($account->uid),
			);

			

			$methods = _account_payment_method_list();
			
			$paymentMethods = array();
			$options = array();
			foreach($methods as $method){
				$paymentMethods[$method['id']] = $method;
				$options[$method['id']] = $method['title'];
			}
			$form['payment_method'] = array(
                '#type' => 'radios',
                '#title' => '',/*t('Įmokos būdas'),*/
                '#options' => $options,
                '#attributes' => array('style' => 'display: none;'),
                '#default_value' => key($options), 
			);
			$form['#paymentMethods'] = $paymentMethods;
			$form['submit_action'] = array(
                '#type' => 'submit',
                '#value' => t('Continue'),
                '#attributes' => array('style'=>'display: none;')				
			);

			$form['#theme'] = 'deposits_form';

			$form['#programmed'] = $form['#redirect'] = FALSE;

			$form['#attached']['js'] = array(
                "(function ($) {

                $(document).ready(function(){		

                    if (_gaq)
            _gaq.push([ '_trackEvent',
                'Sąskaitos papildymas',
                'Sąrašas',
                 ]);

                   $('.pay-meth-blk').mouseover(function(){
                    $(this).addClass('active');
                   }).mouseout(function(){
                   $(this).removeClass('active');
                   });
                });
                  Drupal.tableRowActive = function(elem){
                    $(elem).find('input').attr('checked', 'checked');
                    $('table.deposits-list-table tr').removeClass('selected');
                    $('input:checked', $('table.deposits-list-table tr')).parents('tr').addClass('selected');
                $('#account-deposits-form').submit();
                  }
                })(jQuery);" => array('type' => 'inline')
			);

			return $form;
		}
		function theme_deposits_methods($variables)
		{
		    $output = '';
		    $first = true;
		    foreach ($variables['rows'] as $row)
		    {
			if(array_key_exists('data', $row) && is_array($row['data']))
			{
			   
			    $output .= '<div class="pay-meth-blk" onclick="'.$row['onclick'].'">'
				.'<div class="btn btn-default">'.$row['data']['payment_method'].'</div>'
				//.$row['data']['name']
				.'</div>';
			}
			else
			{
			    $output .= '<div style="clear:both;'.(!$first?'height:15px;':'').'"></div>';
			    $output .= '<div>'.$row[0]['data'].'</div>';
			    $output .= '<div style="clear:both;"></div>';
			    $first = false;
			}
		    }
		    
		    $output .= '<div style="clear:both;height:20px;"></div>';
		    
		    return $output;
		}
		
		function theme_deposits_form($variables){
			$form = $variables['form'];
			$paymentMethods = $form['#paymentMethods'];
			$output = '';

			/*$output .= drupal_render($form['amount']);*/
			$account = $form['#user'];

			$paymentGroups = account_PaymentGroups();

			$lastMethods = account_getUserLastPaymentMethods($account->uid);
			
			$header = array(
                'title' => array('data' => t('Įmokos būdas'), 'colspan' => 2),
                'komisiniai' => t('Komisiniai'),
                'update' => t('Balanso įskaitymas'),
                'limit' => t('Limitas'),
			);
			
			if(count($lastMethods)){
			    $rows = array();
			    foreach ($lastMethods as $methodKey)
			    if(isset($paymentMethods[$methodKey])){				
				$ttmeth = $form['payment_method'][$methodKey];
				$ttmeth['#id'] .= '_last';
				$row = array('onclick' => 'Drupal.tableRowActive(this);');
				$row['data']['payment_method'] = drupal_render($ttmeth);
				$row['data']['name'] = $paymentMethods[$methodKey]['name'];
				$row['data']['komisiniai'] = $paymentMethods[$methodKey]['komisiniai'];
				$row['data']['update'] = $paymentMethods[$methodKey]['update'];
				$row['data']['limits']['class'] = array('limits-nowrap');
				$row['data']['limits']['data'] = t('Min.').' '.account_currency_convert_string($account->uid, $paymentMethods[$methodKey]['limit_min'], 'LTL', false);
				$rows[] = $row;
			    }
			    
				$position_methods =  array(
				'#theme' => 'fieldset',
				'#title' => t('Jūsų paskutiniai naudoti įmokų būdai'),
				'#tree' => FALSE,
				'#collapsible' => TRUE,
				'#collapsed' => FALSE,
				'#attached' => array(
				    'js' => array(
				    'misc/form.js',
				    'misc/collapse.js',
					),
				    ),
				'#attributes' => array(
				    'class' => array('collapsible'),
				    'onclick' => 'Drupal.tableRowActive(this);'
				    ),
				 );
				 
								
				$position_methods['#children'] = theme('deposits_methods', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('deposits-list-table'))));
				
				$output .= drupal_render($position_methods);
			} 

			
			
			foreach(array('main', 'another') as $position){
				$rows = array();
				foreach($paymentGroups as $key => $group){
					$groupTitle = array(array('data' => '<h1 class="payment-group-label">'.$group.'</h1>', 'colspan' => 5));
					$groupRows = array();
					foreach($paymentMethods as $methodKey => $method){
						switch($position){
							case 'main':
								if(!empty($method['countries']) AND !in_array($account->data['country'], $method['countries'])){ continue 2; }
								break;
							case 'another':
								if(empty($method['countries']) OR in_array($account->data['country'], $method['countries'])){ continue 2; }
								break;
						}
						if($method['category'] == $key){
							$row = array('onclick' => 'Drupal.tableRowActive(this);');
							$row['data']['payment_method'] = drupal_render($form['payment_method'][$methodKey]);
							$row['data']['name'] = $paymentMethods[$methodKey]['name'];
							$row['data']['komisiniai'] = $paymentMethods[$methodKey]['komisiniai'];
							$row['data']['update'] = $paymentMethods[$methodKey]['update'];
							$row['data']['limits']['class'] = array('limits-nowrap');
							$row['data']['limits']['data'] = t('Min.').' '.account_currency_convert_string($account->uid, $paymentMethods[$methodKey]['limit_min'], 'LTL', false);
							$groupRows[] = $row;						
						
					}
					}
					if(!empty($groupRows)){
						$rows[] = $groupTitle;
						foreach($groupRows as $row){
							$rows[] = $row;
						}
					}
					}
				
				
				
				
				$position_methods =  array(
                    '#theme' => 'fieldset',
                    '#title' => t('Kiti mokėjimo būdai'),
                    '#tree' => FALSE,
                    '#collapsible' => TRUE,
                    '#collapsed' => TRUE,
                    '#attached' => array(
                      'js' => array(
                        'misc/form.js',
                        'misc/collapse.js',
                              ),
                              ),
                    '#attributes' => array(
                      'class' => array('collapsible', 'collapsed'),
                              ),
				);
				
				
				
				if($position == 'main'){
                                  
                                            
					$position_methods['#title'] = t('Pagrindiniai mokėjimo būdai');
					$position_methods['#collapsed'] = FALSE;
					$position_methods['#attributes']['class'] = array('collapsible');
				}
				
				$position_methods['#children'] = theme('deposits_methods', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('deposits-list-table'))));
				
				$output .= drupal_render($position_methods);
			}	    
			
			$output .= drupal_render_children($form);
			return $output;
		}

		function account_deposits_form_validate(&$form, &$form_state){
			if(!$form_state['values']['payment_method']){
				form_set_error('payment_method', t('Pasirinkite įmokos būdą'));
			}else{
				$payment_method = $form_state['values']['payment_method'];
				$payment_method_id = _account_payment_method_data($payment_method, 'id');
				if($payment_method_id !== NULL){
				    if($form['#step'] == 2) 
				    {
					$form_state['values']['amount'] = str_replace(',', '.', $form_state['values']['amount']);
					$amount = floatval($form_state['values']['amount']);
					if((string)$amount == (string)$form_state['values']['amount']){
						$limit_min = account_currency_convert($form['#user']->uid, _account_payment_method_data($payment_method, 'limit_min'), 'LTL', false);
						$limit_max = account_currency_convert($form['#user']->uid, _account_payment_method_data($payment_method, 'limit_max'), 'LTL', false);
						if($amount < $limit_min || $amount > $limit_max) {
							form_set_error('amount', t('Suma turi būti tarp @min @curr ir @max @curr', array('@min' => account_currency_string($limit_min, account_get_currency($form['#user']->uid)), '@max' => account_currency_string($limit_max, account_get_currency($form['#user']->uid)), '@curr' => '')));
						}
					}else{
						form_set_error('amount', t('Suma turi būti skaičius'));
					}
				    }
				}else{
					form_set_error('payment_method', t('Pasirinktas mokėjimo būdas nėra galimas'));
				}
			}
		}

		function account_deposits_form_submit($form, &$form_state){
			
			$payment_method =  $form_state['values']['payment_method'];
			if($form['#step'] == 1)
			{
			    $form_state['storage']['form'] = account_deposits_form_step2($form, $form_state, $form['#user']);
			    $form_state['storage']['form']['#step'] = 2;			   
			    $form_state['rebuild'] = TRUE;
			}
			else
			{
			   
                $func = _account_payment_method_data($payment_method, 'callback');
                if (function_exists($func))
                {
                    $result = $func($form, $form_state);
                    if ($result === TRUE)
                    {
                    drupal_set_message(t('Your deposit has been updated.'));
                    return TRUE;
                    }
                    elseif(is_array($result))
                    {
                        $form_state['storage']['form'] = $result;
                        $form_state['storage']['form']['#step'] = 3;
                        drupal_set_message(t('<h4>Dėmesio!</h4>').
                                        '<p>'.t('Atliekamas įmokėjimas privalo būti vykdomas iš <strong><u>@name @surname</u></strong> sąskaitos', array('@name' => $form['#user']->data['firstname'].' '.$form['#user']->data['middlename'], '@surname' => $form['#user']->data['surname'])).'</p>'.
                                        '<p>'.t('Jei mokėtojas nesutaps su @sitename klientu, mokėjimas nebus įskaitytas į Jūsų balansą.', array('@sitename' => variable_get('site_name'))).'</p>','info');
                        
                        $_SESSION['pay_method'] = $meth_name = $payment_method;
                        $_SESSION['pay_amount'] = $amount = $form_state['values']['amount'];

                        $_SESSION['ga_push'][] = array(
                            '_trackEvent','Sąskaitos papildymas',
                            'Sumos įvedimas',
                            $meth_name,
                            $amount
                        );
                        $form_state['storage']['form']['#attributes']['class'][] = 'deposit-setp-'.$form_state['storage']['form']['#step'];
                        $form_state['storage']['form']['back']['#markup'] = '<a href="'.url('account/deposits').'" class="btn btn-default btn-back">'.t('Atgal').'</a>';
                        $form_state['storage']['form']['submit_action']['#attributes']['class'][] = 'btn-primary';
                        $form_state['storage']['form']['#attached']['js'] = array(
                            "(function ($) {
                            $(document).ready(function(){
                                $('#account-deposits-form').submit(function(e){					
                                            if (_gaq)
                                            _gaq.push([ '_trackEvent',
                                                'Sąskaitos papildymas',
                                                'Patvirtintas mokėjimas',
                                                '$meth_name',
                                                '$amount'
                                                ]);
                                            });
                                });
                            })(jQuery);" => array('type' => 'inline')
                        );

                        $form_state['rebuild'] = TRUE;
                    }
                }
                else
                {
                    drupal_set_message(t('Payment can\'t be done'), 'error');
                    return FALSE;
                }
		    }
		}


		/* withdrawals forms */
		function account_withdrawals_form($form, &$form_state, $account){
			if(isset($form_state['storage']['form'])){
				return $form_state['storage']['form'];
			}
			return account_withdrawals_form_data($form, $form_state, $account);
		}
		function account_withdrawals_form_data($form, &$form_state, $account){

			$form['#user'] = $account;
			$form['#step'] = 1;
			$options = array();
			$bankaccounts = account_getbankaccounts($account->uid);
			foreach($bankaccounts as $bankaccount){
				$options[$bankaccount->baid] = $bankaccount->bankname.' - '.$bankaccount->iban.' -   '.$bankaccount->swift;
			}
			if(empty($options)){
				$form['no_account_bank'] = array(
                    '#markup' => t('Jūs neturite registruotos banko sąskaitos.').' '.l(t('Registruoti sąskaitą'), 'account/withdrawals/bank-transfer/bank-accounts').'<br /><br />',
				);
			}else{
                if (user_is_logged_in()) {
                    $Wallets = account_user_data($form['#user']->uid);
                    $Wallets->real_amount;
                } else {
                    $Wallets = new stdClass();
                    $Wallets->real_amount = 0;
                }

				$countryCode = $account->data['country'];
				if(!empty($form_state['input']['bank_account'])){
					$bankaccount = account_getbankaccounts($form['#user']->uid,  $form_state['input']['bank_account']);
					include_once drupal_get_path('module', 'account') . '/iban/php-iban.php';
					$countryCode = iban_get_country_part($bankaccount->iban);
				}
				$form['#countryCode'] = $countryCode;
                $type = 'bank-transfer';
				$maxDepositOutSum = account_get_withdrawal_max_amount($countryCode, $type);
				$maxDepositOutSum = $maxDepositOutSum > $Wallets->real_amount ? $Wallets->real_amount : $maxDepositOutSum;
                $fee = account_get_withdrawal_fee_percent($countryCode, $type);
                $min_amount = account_get_withdrawal_min_amount($countryCode, $type);                             
				
                $form['amount'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Suma'),
                    '#default_value' => '',
                    '#size' => 5,
                    '#maxlength' => 10,
                    '#required' => TRUE,
                    '#field_suffix' => account_get_currency($account->uid),
                    '#description' =>
                              t('(Minimali išmokėjimo suma @value)', array('@value' => account_currency_convert_string($account->uid, $min_amount))).'<br/>'.
                              t('(Maksimali išmokėjimo suma @value)', array('@value' => account_currency_convert_string($account->uid, $maxDepositOutSum))).'<br/>'.
                              t('Tranzakcijos mokestis @value', array('@value' => $fee.'%'))
                );

				$form['bank_account'] = array(
                    '#type' => 'select',
                    '#title' => t('Banko sąskaita'),
                    '#options' => $options,
                    '#default_value' => (count($options) == 1 ? key($options) : null),
                    '#required' => TRUE,
                    '#description' => ($options ? l(t('Koreguoti sąskaitas'), 'account/withdrawals/bank-transfer/bank-accounts') : t('Jūs neturite registruotos banko sąskaitos.').' '.l(t('Registruoti sąskaitą'), 'account/withdrawals/bank-transfer/bank-accounts')),
				);

				$form['swift'] = array(
                    '#type' => 'hidden',
                    '#title' => t('Swift'),
				);
				$form['bankName'] = array(
                    '#type' => 'hidden',
                    '#title' => t('bankName'),
				);
				$form['iban'] = array(
                    '#type' => 'hidden',
                    '#title' => t('iban'),
				);
				
				drupal_set_message('- '.t('Užsakymas išmokėti pinigus į banko  sąskaitą įvykdomas per 2 darbo dienas, nuo užsakymo pateikimo').'<br/>'.t('
    - Vienas išmokėjimas per 28 dienas yra nemokamas.<br />
    - Dažniau nei per 28 dienas mokėjimai apmokestinamas į Lietuvoje esančią banko sąskaitą mokestis - 1,40 LTL, į užsienio banko sąskaitą - 50 LTL', array('1,40 LTL' => account_currency_convert_string($account->uid, 1.40), '50 LTL' => account_currency_convert_string($account->uid, 50))), 'warning');
                $form['actions'] = array('#type' => 'actions', '#prefix' => '<div class="form-group">', '#suffix' => '</div>',);
                $form['actions']['go-back'] = array(
                    '#type' => 'markup',
                    '#markup' => l(t('Grįžti atgal'), 'account/withdrawals', array('attributes' => array('class' => array('btn btn-default btn-go-back'))))
                );
				$form['actions']['submit_action'] = array(
                    '#type' => 'submit',
                    '#value' => t('Continue'),
                    '#disabled' => (empty($options)),
                    '#attributes' => array('class' => array('btn btn-primary')),
				);
			}
			$form['#redirect'] = TRUE;

			return $form;
		}
		function account_withdrawals_form_validate($form, &$form_state){

			if (isset($form_state['storage']['values'])) {
				return;
			}

			$bankaccount = account_getbankaccounts($form['#user']->uid,  $form_state['values']['bank_account']);
			include_once drupal_get_path('module', 'account') . '/iban/php-iban.php';
			$countryCode = iban_get_country_part($bankaccount->iban);            
			$form_state['values']['amount'] = str_replace(',', '.', $form_state['values']['amount']);
			$amount = floatval($form_state['values']['amount']);
			// if((string)$amount === (string)$form_state['values']['amount']){
			if(is_numeric($form_state['values']['amount'])){
				if($amount < account_currency_convert($form['#user']->uid, variable_get('account_withdrawals_bank-transfer_'.$countryCode.'_min', variable_get('account_withdrawals_bank-transfer_default_min', 0)))
				|| $amount > account_currency_convert($form['#user']->uid, variable_get('account_withdrawals_bank-transfer_'.$countryCode.'_max', variable_get('account_withdrawals_bank-transfer_default_max', 0)))
				) {
					form_set_error('amount', t('Minimali išmokėjimo suma @value', array('@value' => account_currency_convert_string($form['#user']->uid, variable_get('account_withdrawals_bank-transfer_'.$countryCode.'_min', variable_get('account_withdrawals_bank-transfer_default_min', 0))))));
				}
				if($amount >  userinfo_get_balance($form['#user']->uid)){
					form_set_error('amount', t('Balansas nepakankamas'));
				}
			}else{
				form_set_error('amount', t('Išmokėjimo suma ne skaičius'));
			}
		}
function account_withdrawals_form_submit($form, &$form_state) {
    
    if (isset($form_state['storage']['values'])) {
        $bankaccount = account_getbankaccounts($form['#user']->uid, $form_state['storage']['values']['bank_account']);
        $amount = account_currency_convert_back($form['#user']->uid, str_replace(',', '.', $form_state['storage']['values']['amount']));
        $fee = account_get_withdrawal_fee_percent($form['#user']->data['country'], 'bank-transfer');
        
        if(account_withdrawals_bank_UseFee($bankaccount->iban)){
            $fee_amount = $amount * ($fee/100);
            $amount = $amount - $fee_amount;            
        }else {
            // For lithuanian bank accounts we avoiding extra fee
            $fee_amount = 0;
        }
        $amount = round($amount, 2, PHP_ROUND_HALF_DOWN);
        $fee_amount = round($fee_amount, 2, PHP_ROUND_HALF_DOWN);
        $params = array(
          'user_id' => userinfo_get_topsportId($form['#user']),
          'amount' => $amount,
          'extra_amount' => $fee_amount,
          'swift' => $bankaccount->swift,
          'bank_name' => $bankaccount->bankname,
          'iban' => $bankaccount->iban,
          'pin_index' => $form_state['values']['pin']['index'],
          'pin_value' => $form_state['values']['pin']['value'],
        );
        unset($_SESSION['pin_index']);
        $result = topsport_saveDepositOut($params, $form['#user']);
        userinfo_updateUser($form['#user']);
        account_logWithdrawals($form['#user'], $params, $result);
        if ($result['Code'] != 0) {
            drupal_set_message($result['Description']['Default'], 'error');
        } else {
            drupal_set_message('Pinigų išmokėjimo prašymas priimtas' . ' ' . account_currency_string($form_state['storage']['values']['amount'], account_get_currency()));
            cache_clear_all('account_page_history:' . $params['user_id'], 'cache');
            drupal_goto('account/history');
        }
    } else {
        if (!isset($_SESSION['pin_index'])) {
            $_SESSION['pin_index'] = rand(1, 24);
        }
        $form_state['storage']['values'] = $form_state['values'];
        $bankaccount = account_getbankaccounts($form['#user']->uid, $form_state['values']['bank_account']);
        $fee = account_get_withdrawal_fee_percent($form['#countryCode'], 'bank-transfer');
        $fee_amount = $form_state['values']['amount']*$fee/100;
        $form_state['storage']['form'] = array(
          'bank_account' => array(
            '#type' => 'item',
            '#title' => t('Banko sąskaita'),
            '#markup' => $bankaccount->bankname . ' - ' . $bankaccount->iban . ' -   ' . $bankaccount->swift,
          ),
          'fee' => array(
            '#type' => 'item',
            '#title' => t('Tranzakcijos mokestis'),
            '#markup' => account_currency_string($fee_amount, account_get_currency()).' ('.$fee.'%)',
          ),
          'amount' => array(
            '#type' => 'item',
            '#title' => t('Išmokama suma'),
            '#markup' => account_currency_string($form_state['values']['amount']-$fee_amount, account_get_currency()),
          ),          
          'pin' => array(
            '#tree' => TRUE,
            'index' => array(
              '#type' => 'value',
              '#value' => $_SESSION['pin_index'],
            ),
            'value' => array(
              '#type' => 'password',
              '#title' => t('PIN kodo nr. %index reikšmė', array('%index' => $_SESSION['pin_index'])),
              '#description' => t('Neturite PIN kodų kortelės?') . ' ' . l('Spausti čia', 'account/info/pins'),
              '#default_value' => '',
              '#size' => 40,
              '#maxlength' => 255,
              '#required' => TRUE,
              '#weight' => 6,
              '#element_validate' => array('account_validate_pin_value'),
            ),
          ),
          'actions' => array(
            '#type' => 'actions',
            '#prefix' => '<div class="form-group">',
            '#suffix' => '</div>',
            'back' => array(
              '#markup' => '<a href="'.url('account/withdrawals/bank-transfer').'" class="btn btn-default btn-back">'.t('Atgal').'</a>',
              '#weight' => 20,
            ),
            'submit_action' => array(
              '#type' => 'submit',
              '#attributes' => array('class' => array('form-submit', 'btn btn-primary')),
              '#value' => t('Confirm'),
              '#weight' => 30,
            )
          )
        );
        $form_state['storage']['form']['#step'] = 2;
        $form_state['storage']['form']['#user'] = $form['#user'];
        $form_state['rebuild'] = TRUE;
    }
}

/* history filter form */
function account_history_filter($form, &$form_state) {
    global $user;
    $session = isset($_SESSION['account_history_filter']) ? $_SESSION['account_history_filter'] : array();
    $form['#attributes']['class'][] = 'inline-form';
    $form['filters']['payment_type'] = array(
      '#type' => 'select',
      '#title' => '',
      '#options' => array(
        'all' => t('Visi mokėjimai'),
        'income' => t('Įmokos'),
        'outcome' => t('Išmokos'),
      ),
      '#default_value' => (isset($session['payment_type']) ? $session['payment_type'] : 'all'),
    );

    $form['filters']['date_type'] = array(
      '#type' => 'select',
      '#title' => '',
      '#options' => array('today' => t('Šiandien'), 'yesterday' => t('Vakar'), '7days' => t('7 dienų'), '30days' => t('30 dienų'), 'period' => t('Periodas')),
      '#default_value' => (isset($session['date_type']) ? $session['date_type'] : '30days'),
    );

    $form['filters']['date_from'] = array(
      '#type' => 'date_popup',
      '#title' => t('Nuo'),
      '#default_value' => (isset($session['date_from']) ? $session['date_from'] : date('Y-m-d', strtotime('-30 days'))),
      '#date_type' => DATE_DATETIME,
      '#date_format' => 'Y-m-d',
      '#date_increment' => 1,
      '#date_year_range' => '-1:+0',
      '#size' => 10,
      '#states' => array(
        'visible' => array(
          'select[name="date_type"]' => array('value' => 'period'),
        ),
      ),
    );

    $form['filters']['date_to'] = array(
      '#type' => 'date_popup',
      '#title' => t('iki'),
      '#default_value' => (isset($session['date_to']) ? $session['date_to'] : date('Y-m-d')),
      '#date_type' => DATE_DATETIME,
      '#date_format' => 'Y-m-d',
      '#date_increment' => 1,
      '#date_year_range' => '-1:+0',
      '#size' => 10,
      '#states' => array(
        'visible' => array(
          'select[name="date_type"]' => array('value' => 'period'),
        ),
      ),
    );

    $form['filters']['status']['actions']['submit_action'] = array(
      '#type' => 'submit',
      '#value' => t('Filtruoti'),
      '#attributes' => array('class' => array('btn-primary'))
    );

    return $form;
}

function account_history_filter_submit($form, &$form_state){

			$_SESSION['account_history_filter'] = $form_state['values'];

		}


		/* bets filter form */

function account_bets_filter($form, &$form_state) {
    global $user;
    $filter = account_bets_filter_result();

    $form['#attributes']['class'][] = 'inline-form';
    
    $form['filters']['bet_type'] = array(
      '#type' => 'select',
      '#title' => '',
      '#options' => array('all' => t('Visi statymai'), '0' => t('Paprastas'), '1' => t('Kombinuotas'), '2' => t('Sisteminis')),
      '#default_value' => $filter['bet_type'],
    );

    $form['filters']['bet_state'] = array(
      '#type' => 'select',
      '#title' => '',
      '#options' => array('0' => t('Visi'), '3' => t('Laimėta'), '5' => t('Pralaimėta'), '2' => t('Laukiama')),
      '#default_value' => $filter['bet_state'],
    );

    $form['filters']['date_type'] = array(
      '#type' => 'select',
      '#title' => '',
      '#options' => array('today' => t('Šiandien'), 'yesterday' => t('Vakar'), '7days' => t('7 dienų'), '30days' => t('30 dienų'), 'period' => t('Periodas')),
      '#default_value' => (isset($filter['date_type']) ? $filter['date_type'] : '30days'),
    );

    $form['filters']['date_from'] = array(
      '#type' => 'date_popup',
      '#title' => t('Nuo'),
      '#default_value' => (isset($filter['date_from']) ? $filter['date_from'] : date('Y-m-d', strtotime('-30 days'))),
      '#date_type' => DATE_DATETIME,
      '#date_format' => 'Y-m-d',
      '#date_increment' => 1,
      '#date_year_range' => '-1:+0',
      '#size' => 10,
      '#states' => array(
        'visible' => array(
          'select[name="date_type"]' => array('value' => 'period'),
        ),
      ),
    );

    $form['filters']['date_to'] = array(
      '#type' => 'date_popup',
      '#title' => t('iki'),
      '#default_value' => (isset($filter['date_to']) ? $filter['date_to'] : date('Y-m-d')),
      '#date_type' => DATE_DATETIME,
      '#date_format' => 'Y-m-d',
      '#date_increment' => 1,
      '#date_year_range' => '-1:+0',
      '#size' => 10,
      '#states' => array(
        'visible' => array(
          'select[name="date_type"]' => array('value' => 'period'),
        ),
      ),
    );

    $form['filters']['status']['actions']['submit_action'] = array(
      '#type' => 'submit',
      '#value' => t('Filtruoti'),
      '#attributes' => array('class' => array('btn-primary'))
    );

    return $form;
}

function account_bets_filter_submit($form, &$form_state) {
    account_bets_filter_result($form_state['values']);
    //$form_state['rebuild'] = true;
}

function account_bets_filter_validate($form, &$form_state) {
    $from = strtotime($form_state['values']['date_from']);
    $till = strtotime($form_state['values']['date_to']);
    $is_choosed = $form_state['values']['date_type'] == 'period';
    if ($is_choosed && $till - $from > 60 * 60 * 24 * 31) {
        form_set_error('date_from', t("Laiko intervalas privalo būti neilgesnis nei 31 dienų"));
        drupal_add_css('div.container-inline-date{display:inline !important;}', 'inline');
    }
}

function account_bets_filter_result($values = null) {
    $filter = &drupal_static(__FUNCTION__);

    if ($values) {
        $filter = $values;
        $_SESSION[__FUNCTION__] = $filter;
    } else {
        if (isset($_SESSION[__FUNCTION__])) {
            $filter = $_SESSION[__FUNCTION__];
        }
    }

    return isset($filter) ? $filter : array('date_type' => '7days', 'bet_type' => 'all', 'bet_state' => '0', 'bet_year' => '');
}

/* preferences form */
		function account_preferences_form($form, &$form_state){
			global $user;

			$form['#user'] = $user;
			$form['#user_category'] = 'account';

			locale_language_selector_form($form, $form_state, $form['#user']);
			system_user_timezone($form, $form_state);
			unset($form['locale']['#type']);
			unset($form['timezone']['#type']);
			$form['locale']['language']['#type'] = 'select';

			$form['data'] = array('#tree' => TRUE);

			$form['data']['betamount'] = array(
    '#type' => 'textfield',
    '#title' => t('Statymo suma pagal nutylėjimą'),
    '#size' => 5,
    '#maxlength' => 15,
    '#default_value' => (isset($user->data['betamount']) ? $user->data['betamount'] : '0.00'),
			);

			$form['data']['betdoneemail'] = array(
    '#type' => 'radios',
    '#title' => t('Siųsti statymų patvirtinimus į mano el. paštą'),
    '#default_value' => (isset($user->data['betdoneemail']) ? $user->data['betdoneemail'] : 1),
    '#options' => array(1 => t('Taip'), 0 => t('Ne')),
			);

			/*$form['data']['europeview'] = array(
    '#type' => 'select',
    '#title' => t('Pasiūlos atvaizdavimas'),
    '#default_value' => (isset($user->data['europeview']) ? $user->data['europeview'] : null),
    '#options' => array(1 => t('Supaprastintas atvaizdavimas'), 0 => t('Klasikinis atvaizdavimas')),
    '#empty_value' => '',
    '#empty_title' => '- '.t('Pasirinkti').' -',
    '#required' => TRUE,
			);*/

			$currency_list = currency_api_get_list();
			$currency_enabled = explode(',', variable_get('account_currency_enabled', 'LTL'));
			foreach($currency_list as $key => $desc){
				if(!in_array($key, $currency_enabled)){
					unset($currency_list[$key]);
				}
			}

			$form['data']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Valiuta'),
    '#default_value' => (isset($user->data['currency']) ? $user->data['currency'] : variable_get('account_currency_default', 'LTL')),
    '#options' => $currency_list,
    '#description' => t('Visos piniginės operacijos vykdomos LTL valiuta.'),
			);

			$form['submit_action'] = array(
                '#type' => 'submit',
                '#value' => t('Saugoti'),
                '#weight' => 10,
                '#attributes' => array('class' => array('btn-primary'))
			);

			/*$form['reset'] = array(
    '#markup' => '<input class="form-reset btn btn-default" type="reset" value="'.t('Atšaukti').'" onClick="javascript:void(0);" />',
    '#weight' => 10,
			);*/

			return $form;
		}

		function account_preferences_form_submit($form, &$form_state){
			$account = $form['#user'];
			$category = 'account';
			form_state_values_clean($form_state);
			$account_unchanged = clone $account;
			entity_form_submit_build_entity('user', $account, $form, $form_state);
			$edit = array_intersect_key((array) $account, $form_state['values']);
			user_save($account_unchanged, $edit, $category);
			$form_state['values']['uid'] = $account->uid;
			drupal_set_message(t('The changes have been saved.'));
		}


		function account_bank_accounts($form, $form_state, $account, $bankaccount = false){

			$form['#user'] = $account;
			$edit = false;
			if($bankaccount){
				$form['#bankaccount'] = $bankaccount;
				$edit = true;
			}
			$form['info'] = array(
    '#markup' => '<p>'.t('Norėdami užregistruoti naują sąskaitą prašome užpildyti visus žemiau pateiktus laukus').'</p>',
    '#access' => (!$edit),
			);

			$form['iban'] = array(
    '#type' => 'textfield',
    '#title' => t('Banko sąskaitos nr.'),
    '#default_value' => ($edit ? $form['#bankaccount']->iban : ''),
    '#size' => 40,
    '#required' => TRUE,
    '#element_validate' => array('account_isValidIBAN'),
    '#ajax' => array('wrapper' => 'account_bankinfo', 'callback' => 'account_bank_accounts_callback', 'keypress' => TRUE, 'event' => 'blur', 'progress' => array('type' => null)),
			);


			$bankinfo = false;
			if(isset($form_state['values']['iban'])){
				$iban = $form_state['values']['iban'];
				if(account_valid_isValidIBAN($iban)){
					$bankinfo = account_getBankInfo($iban);
				}
			}
			$form['bankinfo'] = array(
    '#tree' => false,
    '#prefix' => '<div id="account_bankinfo">',
    '#suffix' => '</div>',
			);
			$form['bankinfo']['bankname'] = array(
    '#type' => 'textfield',
    '#title' => t('Banko pavadinimas'),
			//     '#default_value' => ($edit ? $form['#bankaccount']->bankname : ''),
    '#default_value' => ($bankinfo ? $bankinfo->bankname : ($edit ? $form['#bankaccount']->bankname : '')),
			//     '#disabled' => (bool)$bankinfo,
    '#size' => 40,
    '#required' => TRUE,
			);
			$form['bankinfo']['swift'] = array(
    '#type' => 'textfield',
    '#title' => t('SWIFT'),
			//     '#default_value' => ($edit ? $form['#bankaccount']->swift : ''),
    '#default_value' => ($bankinfo ? $bankinfo->swift : ($edit ? $form['#bankaccount']->swift : '')),
			//     '#disabled' => (bool)$bankinfo,
    '#size' => 40,
    '#required' => TRUE,
    '#element_validate' => array('account_isValidSWIFT'),
			);

			if(isset($form_state['values']['iban']) AND $bankinfo){
				if(!($form_state['values']['bankname'])){
					$form['bankinfo']['bankname']['#value'] = ($bankinfo ? $bankinfo->bankname : ($edit ? $form['#bankaccount']->bankname : ''));
				}
				if(!($form_state['values']['swift'])){
					$form['bankinfo']['swift']['#value'] = ($bankinfo ? $bankinfo->swift : ($edit ? $form['#bankaccount']->swift : ''));
				}
			}

			$form['i_accept'] = array(
                '#type' => 'checkbox',
                '#title' => t("Tvirtinu, kad duomenys teisingi ir @name @surname yra šios banko sąskaitos savininkas", array('@name' => $form['#user']->data['firstname'].' '.$form['#user']->data['middlename'], '@surname' => $form['#user']->data['surname'])),
                '#default_value' => 0,
                '#required' => TRUE,
			);
			if($edit){
				$form['back'] = array(
                    '#markup' => l(t('Atšaukti'), 'account/withdrawals/bank-transfer/bank-accounts', array('attributes' => array('class' => array('form-submit', 'btn btn-default btn-back')))),
				);
			}
			$form['submit_action'] = array(
                '#type' => 'submit',
                '#value' => t('Save'),
			);

			return $form;
		}

		function account_libc(){

			return array (  "AD","AT","BA","BE","BG","CH","CY","CZ","DE","DK","EE","ES","FI","FO","FR","GB","GI","GL","GR",
      "HR","HU","IE","IL","IS","IT","LI","LT","LU","LV","MC","ME","MK","MT","MU","NL","NO","PL","PT",
      "RO","RS","SE","SI","SK","SM","TN","TR",
			24,  20,  20,  16,  22,  21,  28,  24,  22,  18,  20,  24,  18,  18,  27,  22,  23,  18,  27,
			21,  28,  22,  23,  26,  27,  21,  20,  20,  21,  27,  22,  19,  31,  30,  18,  15,  28,  25,
			24,  22,  24,  19,  24,  27,  24,  26,
      "n", "y", "n", "y", "y", "n", "y", "y", "y", "y", "y", "y", "y", "n", "y", "y", "y", "n", "y",
      "n", "y", "y", "n", "y", "y", "y", "y", "y", "y", "n", "n", "n", "y", "n", "y", "y", "y", "y",
      "y", "n", "y", "y", "y", "n", "n", "n"
      ,"AD1200012030200359100100"
      ,"AT611904300234573201"
      ,"BA391290079401028494"
      ,"BE68539007547034"
      ,"BG80BNBG96611020345678"
      ,"CH9300762011623852957"
      ,"CY17002001280000001200527600"
      ,"CZ6508000000192000145399"
      ,"DE89370400440532013000"
      ,"DK5000400440116243"
      ,"EE382200221020145685"
      ,"ES9121000418450200051332"
      ,"FI2112345600000785"
      ,"FO7630004440960235"
      ,"FR1420041010050500013M02606"
      ,"GB29NWBK60161331926819"
      ,"GI75NWBK000000007099453"
      ,"GL4330003330229543"
      ,"GR1601101250000000012300695"
      ,"HR1210010051863000160"
      ,"HU42117730161111101800000000"
      ,"IE29AIBK93115212345678"
      ,"IL620108000000099999999"
      ,"IS140159260076545510730339"
      ,"IT60X0542811101000000123456"
      ,"LI21088100002324013AA"
      ,"LT121000011101001000"
      ,"LU280019400644750000"
      ,"LV80BANK0000435195001"
      ,"MC1112739000700011111000h79"
      ,"ME25505000012345678951"
      ,"MK07300000000042425"
      ,"MT84MALT011000012345MTLCAST001S"
      ,"MU17BOMM0101101030300200000MUR"
      ,"NL91ABNA0417164300"
      ,"NO9386011117947"
      ,"PL27114020040000300201355387"
      ,"PT50000201231234567890154"
      ,"RO49AAAA1B31007593840000"
      ,"RS35260005601001611379"
      ,"SE3550000000054910000003"
      ,"SI56191000000123438"
      ,"SK3112000000198742637541"
      ,"SM86U0322509800000000270100"
      ,"TN5914207207100707129648"
      ,"TR330006100519786457841326",
      '/\d{8}[a-zA-Z0-9]{12}/' ,' /\d{16}/' , '/\d{16}/' , '/\d{12}/' , '/[A-Z]{4}\d{6}[a-zA-Z0-9]{8}/' , '/\d{5}[a-zA-Z0-9]{12}/' ,
      '/\d{8}[a-zA-Z0-9]{16}/' , '/\d{20}/' ,'/\d{18}/' , '/\d{14}/' , '/\d{16}/' , '/\d{20}/' , '/\d{14}/ , /\d{14}/' ,
      '/\d{10}[a-zA-Z0-9]{11}\d\d/' , '/[A-Z]{4}\d{14}/' , '/[A-Z]{4}[a-zA-Z0-9]{15}/' , '/\d{14}/' , '/\d{7}[a-zA-Z0-9]{16}/' ,
      '/\d{17}/' , '/\d{24}/' , '/[A-Z]{4}\d{14}/' , '/\d{19}/' , '/\d{22}/' , '/[A-Z]\d{10}[a-zA-Z0-9]{12}/' , '/\d{5}[a-zA-Z0-9]{12}/' ,
      '/\d{16}/' , '/\d{3}[a-zA-Z0-9]{13}/' , '/[A-Z]{4}[a-zA-Z0-9]{13}/' , '/\d{10}[a-zA-Z0-9]{11}\d\d/' , '/\d{18}/' ,
      '/\d{3}[a-zA-Z0-9]{10}\d\d/' , '/[A-Z]{4}\d{5}[a-zA-Z0-9]{18}/' , '/[A-Z]{4}\d{19}[A-Z]{3}/' , '/[A-Z]{4}\d{10}/' , '/\d{11}/' ,
      '/\d{8}[a-zA-Z0-9]{16}/' , '/\d{21}/' , '/[A-Z]{4}[a-zA-Z0-9]{16}/' , '/\d{18}/' , '/\d{20}/' , '/\d{15}/' , '/\d{20}/' ,
      '/[A-Z]\d{10}[a-zA-Z0-9]{12}/' , '/\d{20}/' , '/\d{5}[a-zA-Z0-9]{17}/');
		}

		function account_isValidIBAN($element, &$form_state) {
			if (!empty($element['#value'])) {
				include_once drupal_get_path('module', 'account') . '/iban/php-iban.php';
				$element['#value'] = iban_to_machine_format($element['#value']);//str_replace(' ', '', trim($element['#value']));
				form_set_value($element, $element['#value'], $form_state);
				if (!account_valid_isValidIBAN($element['#value'])){
					form_error($element, t('Banko sąskaitos numeris neteisingas'));
				}
			}
		}
		function account_valid_isValidIBAN($value){

			include_once drupal_get_path('module', 'account') . '/iban/php-iban.php';
			return verify_iban($value);

			//   $libc = account_libc();
			//   $countriesCount = count($libc) / 5;
			//   $country = strtoupper(substr($value, 0, 2));
			//   $rawCode = substr($value, 4, strlen($value) - 4);
			//   for ($i = 0; $i < $countriesCount && $country != $libc[$i]; $i++) {}
			//   return ($libc[$i] == $country && preg_match($libc[$i+4*$countriesCount+1], $rawCode) && strlen($value) == $libc[$i+1*$countriesCount+1]);
		}

		function account_isValidSWIFT($element, &$form_state) {
			if(isset($element['#value']) AND $element['#value']){
				if(strlen($element['#value']) > 3 && preg_match("/[0-9A-Z]+/", $element['#value'])){
				}else{
					form_error($element, t('SWIFT neteisingas'));
				}
			}
		}

		function account_getBankInfo($iban){
			return db_select('bankslist', 'bl')
			->fields('bl')
			->condition('code', substr($iban, 4, 5))
			->condition('country', drupal_strtolower(substr($iban, 0, 2)))
			->execute()
			->fetchObject();
		}



		function account_bank_accounts_callback(&$form, &$form_state){
			return $form['bankinfo'];

		}

		function account_bank_accounts_submit(&$form, &$form_state){

			if(isset($form['#bankaccount'])){
				db_update('users_bankaccounts')
				->fields(array(
      'iban' => $form_state['values']['iban'],
      'bankname' => $form_state['values']['bankname'],
      'swift' => $form_state['values']['swift'],
				))
				->condition('uid', $form['#user']->uid)
				->condition('baid', $form['#bankaccount']->baid)
				->execute();
			}else{
				db_insert('users_bankaccounts')
				->fields(array(
      'uid' => $form['#user']->uid,
      'iban' => $form_state['values']['iban'],
      'bankname' => $form_state['values']['bankname'],
      'swift' => $form_state['values']['swift'],
				))
				->execute();
			}
			$form_state['redirect'] = 'account/withdrawals/bank-transfer/bank-accounts';
		}


		function account_get_pins_form($form, &$form_state, $account){

			$form['#user'] = $account;

			$form['text'] = array(
                '#markup' => t('Norėdami gauti PIN kodų kortelę įveskite dabartinį slaptažodį ir paspauskite Patvirtinti.'),
			);
			$form['current_pass'] = array(
                '#type' => 'password',
                '#title' => t('Dabartinis slaptažodis'),
                '#default_value' => '',
                '#size' => 40,
                '#maxlength' => 255,
                '#required' => TRUE,
			);
			$form['submit_action'] = array(
                '#type' => 'submit',
                '#value' => t('Patvirtinti'),
                '#attributes' => array('class' => array('btn-primary'))
			);

			return $form;

		}
		function account_get_pins_form_validate($form, &$form_state){
			$account = $form['#user'];
			require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
			$current_pass_failed = empty($form_state['values']['current_pass']) || !user_check_password($form_state['values']['current_pass'], $account);
			if ($current_pass_failed) {
				form_set_error('current_pass', t("Slaptažodis neteisingas"));
			}
		}

		function account_get_pins_form_submit($form, &$form_state){

			$account = $form['#user'];
			$rez = _account_mail_notify('account_get_pins', $account);
			if($rez){
				drupal_set_message(t('Jūsų kliento ir PIN kodų kortelės išsiųstos el. pašto adresu: %email.', array('%email' => $account->mail)));
			}else{
				drupal_set_message(t('Nepavyko išsiųsti "Kliento" ir "PIN kodų" kortelių. Pabandykite dar kartą.'), 'error');
			}
		}


		function account_form_user_admin_settings_alter(&$form, &$form_state){

			$form['anonymous_settings']['#access'] = FALSE  ;
			$form['admin_role']['#access'] = FALSE;
			$form['registration_cancellation']['#access'] = FALSE;
			$form['personalization']['#access'] = FALSE;

			$form['email_admin_created']['#access'] = FALSE;
			$form['email_pending_approval']['#access'] = FALSE;
			$form['email_no_approval_required']['#access'] = FALSE;


			$form['account_administrator_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Pranešimus dėl sutarties pasirašymo siųsti:'),
    '#default_value' => variable_get('account_administrator_mail', variable_get('site_mail')),
    '#maxlength' => 180,
    '#weight' =>  -10,
			);

			$form['account_blacklisted_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Blokuojami el. pašto tiekėjai:'),
    '#default_value' => variable_get('account_blacklisted_mail', ''),
    '#description' => t('Kiekvieną tiekėją atskirkite kableliu (,). pvz: one.lt, valla.ru'),
    '#maxlength' => 180,
    '#weight' =>  -8,
			);

			$roles = user_roles(TRUE); unset($roles['3']);

			$form['account_roles_topsport_new'] = array(
    '#type' => 'select',
    '#title' => t('Naujo TopSport vartotojo rolė'),
    '#default_value' => variable_get('account_roles_topsport_new', ''),
    '#options' => $roles,
    '#description' => t(''),
    '#weight' =>  -7,
			);

			$form['account_roles_topsport_contract'] = array(
    '#type' => 'select',
    '#title' => t('Pasirašiusio sutartį TopSport vartotojo rolė'),
    '#default_value' => variable_get('account_roles_topsport_contract', ''),
    '#options' => $roles,
    '#description' => t(''),
    '#weight' =>  -6,
			);

			$form['account_roles_topsport_full'] = array(
    '#type' => 'select',
    '#title' => t('Pilnaverčio TopSport vartotojo rolė'),
    '#default_value' => variable_get('account_roles_topsport_full', ''),
    '#options' => $roles,
    '#description' => t(''),
    '#weight' =>  -5,
			);


			$form['account_roles_topsport_paused'] = array(
    '#type' => 'select',
    '#title' => t('Apriboto TopSport vartotojo rolė'),
    '#default_value' => variable_get('account_roles_topsport_paused', ''),
    '#options' => $roles,
    '#description' => t(''),
    '#weight' =>  -4,
			);

			$form['account_registered'] = array(
    '#type' => 'fieldset',
    '#title' => t('Paskyra užregistruota'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Edit the e-mail messages sent to user on registration process finish'),
    '#group' => 'email',
    '#weight' => -10,
    'token_tree' => array(
        '#theme' => 'token_tree',
        '#token_types' => array('user'),
        '#show_restricted' => TRUE,
        '#weight' => 100,
			),
			);
			$form['account_registered']['account_mail_account_registered_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_registered_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_registered']['account_mail_account_registered_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_registered_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);

			$form['account_pending_approval'] = array(
    '#type' => 'fieldset',
    '#title' => t('Naujas vartotojas laukia patvirtinimo'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
			//     '#description' => t('Edit the e-mail messages sent to administrator when user submit they documents to activate their accounts.'),
    '#group' => 'email',
    'token_tree' => array(
        '#theme' => 'token_tree',
        '#token_types' => array('user'),
        '#show_restricted' => TRUE,
        '#weight' => 100,
			),
			);
			$form['account_pending_approval']['account_mail_account_pending_approval_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_pending_approval_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_pending_approval']['account_mail_account_pending_approval_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_pending_approval_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);


			$form['account_pending_approval_update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vartotojas atnaujino informaciją'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
			//     '#description' => t('Edit the e-mail messages sent to administrator when user submit they documents to activate their accounts.'),
    '#group' => 'email',
    'token_tree' => array(
        '#theme' => 'token_tree',
        '#token_types' => array('user'),
        '#show_restricted' => TRUE,
        '#weight' => 100,
			),
			);
			$form['account_pending_approval_update']['account_mail_account_pending_approval_update_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_pending_approval_update_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_pending_approval_update']['account_mail_account_pending_approval_update_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_pending_approval_update_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);


			$form['account_pending_approval_upload_document'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vartotojas įkėlė naują dokumentą'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
			//     '#description' => t('Edit the e-mail messages sent to administrator when user submit they documents to activate their accounts.'),
    '#group' => 'email',
    'token_tree' => array(
        '#theme' => 'token_tree',
        '#token_types' => array('user'),
        '#show_restricted' => TRUE,
        '#weight' => 100,
			),
			);
			$form['account_pending_approval_upload_document']['account_mail_account_pending_approval_upload_document_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_pending_approval_upload_document_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_pending_approval_upload_document']['account_mail_account_pending_approval_upload_document_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_pending_approval_upload_document_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);



			$form['account_approval_confirm'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vartotojas patvirtintas'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
			//     '#description' => t('Edit the e-mail messages sent to user when administrator activates their accounts.'),
    '#group' => 'email',
    'token_tree' => array(
        '#theme' => 'token_tree',
        '#token_types' => array('user'),
        '#show_restricted' => TRUE,
        '#weight' => 100,
			),
			);
			$form['account_approval_confirm']['account_mail_account_approval_confirm_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_approval_confirm_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_approval_confirm']['account_mail_account_approval_confirm_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_approval_confirm_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);

			$form['account_approval_reject'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vartotojas atmestas'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Edit the e-mail messages sent to user when administrator rejects their accounts.'),
    '#group' => 'email',
    'token_tree' => array(
        '#theme' => 'token_tree',
        '#token_types' => array('user'),
        '#show_restricted' => TRUE,
        '#weight' => 100,
			),
			);
			$form['account_approval_reject']['account_mail_account_approval_reject_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_approval_reject_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_approval_reject']['account_mail_account_approval_reject_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_approval_reject_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);

			$form['account_reject_incorrect_document'] = array(
    '#type' => 'fieldset',
    '#title' => t('Netinkamas dokumentas'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Laiškas, siunčiamas vartotojui, kai administratorius pažymėjo, kad įkeltas netinkamas dokumentas'),
    '#group' => 'email',
    'token_tree' => array(
      '#theme' => 'token_tree',
      '#token_types' => array('user'),
      '#show_restricted' => TRUE,
      '#weight' => 100,
			),
			);
			$form['account_reject_incorrect_document']['account_mail_account_reject_incorrect_document_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_reject_incorrect_document_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_reject_incorrect_document']['account_mail_account_reject_incorrect_document_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_reject_incorrect_document_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);

			$form['account_reject_update_personal_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Patikslinkite asmeninius duomenis'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Laiškas, siunčiamas vartotojui, kai administratorius pažymėjo, kad reikia patikslinti asmeninius duomenis'),
    '#group' => 'email',
    'token_tree' => array(
      '#theme' => 'token_tree',
      '#token_types' => array('user'),
      '#show_restricted' => TRUE,
      '#weight' => 100,
			),
			);
			$form['account_reject_update_personal_info']['account_mail_account_reject_update_personal_info_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_reject_update_personal_info_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_reject_update_personal_info']['account_mail_account_reject_update_personal_info_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_reject_update_personal_info_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);



			$form['account_get_pins'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vartotojo PIN kodai'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Laiškas, siunčiamas vartotojui, kai inicijuoja PIN kodų kortelės gavimą'),
    '#group' => 'email',
    'token_tree' => array(
      '#theme' => 'token_tree',
      '#token_types' => array('user'),
      '#show_restricted' => TRUE,
      '#weight' => 100,
			),
			);
			$form['account_get_pins']['account_mail_account_get_pins_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _account_mail_text('account_get_pins_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
    '#element_validate' => array('token_element_validate'),
			);
			$form['account_get_pins']['account_mail_account_get_pins_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _account_mail_text('account_get_pins_body', NULL, array(), FALSE),
    '#rows' => 5,
    '#element_validate' => array('token_element_validate'),
			);


		}

		/* ACCOUNT FORMS END */



		/* ACCOUNT PAYMENTS BEGIN */

		function _account_payment_method_data($method_id, $key) {
			$methods = _account_payment_method_list();
			foreach ($methods as $method) {
				if ($method['id'] == $method_id) {
					return isset($method[$key]) ? $method[$key] : NULL;
				}
			}
		}

		function _account_payment_method_list($action = NULL) {
			static $methods;			
			if (count($methods) > 0 && $action !== 'rebuild') {
				return $methods;
			}

			$methods = module_invoke_all('account_payment_method');
			usort($methods, 'account_weight_sort');
			
			return $methods;
		}

		function account_createOrderUser($form, $form_state){
			$account = $form['#user'];
			return db_insert('users_orders')
			->fields(array(
    'uid' => $account->uid,
    'tsuid' => $account->data['tsuid'],
    'firstname' => $account->data['firstname'].' '.$account->data['middlename'],
    'surname' => $account->data['surname'],
    'email' => $account->mail,
    'amount' => $form_state['values']['amount'],
    'currency' => $form_state['values']['currency'],
    'payment' => $form_state['values']['payment_method'],
    'status' => 'created',
    'timestamp' => REQUEST_TIME,
			))
			->execute();
		}

		function account_logDeposits($params, $result){
			$oid = $params['order_id'];
			$account = $params['account'];
            
			$edit = array(
    'pay_firstname' => $params['client_name'],
    'pay_surname' => $params['client_surename'],
    'pay_amount' => $params['amount'],
    'pay_currency' => $params['currency'],
    'status' => ((isset($result['Description']) AND $result['Description'] === 'Ok') ? 'done' : 'error'),
    'result' => serialize($result),
    'errorcode' => $result['Code'],
    'errormessage' => (isset($result['ErrorMessage']) ? $result['ErrorMessage'] : ''),
    'errordescription' => (isset($result['Description']) ? ($result['Code'] == 0 ? $result['Description'] : $result['Description']['Default']) : ''),
    'done_timestamp' => REQUEST_TIME,
			);

			account_log($account->uid, 'sąskaitos papildymas', 'Sąskaitos papildymas. Užsakymo numeris: !oid. <br/>Duomenys: <pre>!data</pre>', array('!oid' => $oid, '!data' => print_r($edit, true)), WATCHDOG_NOTICE);
			account_updateOrderData($oid, $edit);
		}

		function account_updateOrderData($oid, $edit){
			return db_update('users_orders')
			->fields($edit)
			->condition('oid', $oid)
			->execute();
		}

		function account_getOrderUser($oid){
			return db_select('users_orders', 'o')
			->fields('o', array('uid'))
			->condition('oid', $oid)
			->execute()
			->fetchField(0);
		}


		function account_getUserLastPaymentMethods($uid){
			$r = db_select('users_orders', 'o')				
			->fields('o', array('payment'))			
			->condition('uid', $uid)
			->condition('status', 'done')
			->orderBy('timestamp', 'DESC')
			//->range(0, 1)
			->execute()
			->fetchAll();
			$res = array();
			foreach ($r as $v)
			{
			    $res[$v->payment] = $v->payment;
			}
			return $res;
		}


		function account_payment_done(&$account, $params){
			$result = topsport_saveDepositIn($params, $account);
			userinfo_updateUser($account);
			$params['account'] = $account;
			account_logDeposits($params, $result);
		}

		function account_getCorrectName($str, $lower_str_end = true){

			if ($lower_str_end) {
				$str = drupal_strtolower($str);
			}
			$delimeters = array(' ', '-');
			foreach($delimeters as $delimeter){
				$words = explode($delimeter, $str);
				$new_words = array();
				foreach ($words as $word) {
					$first_letter = drupal_strtoupper(drupal_substr($word, 0, 1));
					$word_end = drupal_substr($word, 1, drupal_strlen($word));
					$new_words[] = $first_letter . $word_end;
				}
				$str = implode($delimeter, $new_words);
			}
			return $str;

			/*
			 $words = explode(' ', $str);
			 $new_words = array();
			 foreach ($words as $word) {
			 $first_letter = drupal_strtoupper(drupal_substr($word, 0, 1));
			 $word_end = "";
			 if ($lower_str_end) {
			 $word_end = drupal_strtolower(drupal_substr($word, 1, drupal_strlen($word)));
			 }else {
			 $word_end = drupal_substr($word, 1, drupal_strlen($word));
			 }
			 $new_words[] = $first_letter . $word_end;
			 }
			 return implode(' ', $new_words);
			 */
		}
		/* ACCOUNT PAYMENTS END */





		function acccount_updateUser(&$account){
			userinfo_updateUser($account);
		}

		/*
		 function userinfo_update_balance($uid, $action = 'add', $amount = '0'){
		 if(!$uid){ drupal_set_message('UID is not set', 'error'); return; }
		 $account = user_load($uid);
		 $balance = userinfo_get_balance($uid);
		 switch ($action){
		 case 'add':
		 $value = $balance + $amount;
		 break;
		 case 'remove':
		 $value = $balance - $amount;
		 break;
		 case 'update':
		 $value = $amount;
		 break;
		 default:
		 drupal_set_message('Illegal action', 'error');
		 return;
		 break;
		 }
		 $edit['data']['balance'] = number_format($value, 2, '.', '');
		 user_save($account, $edit);
		 }*/

		function userinfo_get_balance($uid = false, $update = false){
			if(!$uid){ global $user; $uid = $user->uid; }
			$account = user_load($uid);
			$balance = 0.00;
			if($account){				
				$user_data = account_user_data($uid);
				$balance = (isset($user_data->real_amount) ? $user_data->real_amount : 0);
			}
			return account_currency_convert($uid, $balance);
		}

		function account_balance_string($uid = false, $update = false){
			$balance = userinfo_get_balance($uid, $update);
			$currency = account_get_currency($uid);
			return account_currency_string($balance, $currency);
		}
        
        function account_balance_discount_string($amount){
            global $user;
			$currency = account_get_currency();
			return account_currency_string(account_currency_convert($user->uid, $amount), $currency);
		}

		function account_get_currency($uid = false){
			$currencies = &drupal_static(__FUNCTION__);
			if(!$uid){ global $user; $uid = $user->uid; $account = clone $user; }
			if(!isset($currencies[$uid])){
				if(!isset($account)){ $account = user_load($uid); }
				if($account AND isset($account->data['currency']) AND currency_api_get_desc($account->data['currency'])){
					$currencies[$uid] = $account->data['currency'];
				}else{
					$currencies[$uid] = variable_get('account_currency_default', 'LTL');
				}
			}
			return $currencies[$uid];
		}

		function account_get_currency_symbol($uid = false){
			$currency = account_get_currency($uid);
			return currency_api_get_symbol($currency);
		}

		function account_currency_convert($uid = false, $amount = 1, $currency_from = 'LTL', $decimals = 2){
			$currency_to = account_get_currency($uid);
			$converted = account_currency_api_convert($currency_from, $currency_to, $amount, false);
			if($decimals){
				if($currency_from != $currency_to){
					$converted = account_round($converted, $decimals);
				}else{
					$converted = round($converted, $decimals);
				}
			}
			return $converted;
		}

		function account_currency_convert_string($uid = false, $amount = 1, $currency_from = 'LTL', $decimals = 2){
			$value = account_currency_convert($uid, $amount, $currency_from, $decimals);
			$currency_to = account_get_currency($uid);
			return account_currency_string($value, $currency_to);
		}

		function account_currency_string($amount, $currency = FALSE){
			if(!$currency){ $currency = account_get_currency(); }
			$symbol = currency_api_get_symbol($currency);
			if(is_numeric($amount)){ $amount = number_format($amount, 2, '.', ' '); }
			switch($currency){
				case 'EUR':
					return t('!code !amount', array('!symbol' => $symbol, '!amount' => $amount, '!code' => $currency));
					break;
				default:
					return t('!amount !code', array('!symbol' => $symbol, '!amount' => $amount, '!code' => $currency));
					break;
			}
		}

		function account_currency_api_convert($currency_from, $currency_to, $amount = 1, $decimals = 2){
			$converted = currency_api_convert($currency_from, $currency_to, $amount, $decimals);
			return $converted['value'];
		}

		function account_currency_convert_back($uid, $amount = 1, $currency_to = 'LTL', $decimals = 2){
			$currency_from = account_get_currency($uid);
			$converted = account_currency_api_convert($currency_from, $currency_to, $amount, $decimals);
			return $converted;
		}

		/**
		 * Apvalinimo mechanizmas, kuris grąžina finalinę konvertuotą sumą ir 
		 * išsprendžia standartinės round() funkcijos apvalinimo problemas.
		 * @param numeric $x
		 * @param integer $prec
		 */
		function account_round($x, $prec) {	
			return number_format((floor(abs($x) * pow(10, $prec) +  0.5) / pow(10, $prec)) * ($x > 0 ? 1 : -1), $prec, '.', '');
		}


		function userinfo_get_topsportId($account){
			return ((isset($account->data['tsuid']) AND $account->data['tsuid'] != '') ? (int)$account->data['tsuid'] : null);
		}

		function userinfo_updateUser(&$account, $clear = true, $force = false){
			$updated = &drupal_static(__FUNCTION__);
			if(!isset($updated[$account->uid]) OR $force){
				$updated[$account->uid] = true;
				if($tsuid = userinfo_get_topsportId($account)){
					if($clear){
						cache_clear_all('account_page_history:'.$tsuid, 'cache', true);
						cache_clear_all('account_page_bets:'.$tsuid, 'cache', true);
					}
					$userData = topsport_searchClientUser($tsuid);
					if($userData){                       
						account_updateUserData($account, $userData);
					}
					if(isset($userData['0']) OR empty($userData) /*OR !isset($userData['details'])*/){
						drupal_set_message(t('Apgailestaujame, tačiau Jūsų duomenys laikinai nepasiekiami, mūsų techninis  skyrius sprendžia šią problemą, kai kurios paslaugos gali laikinai neveikti. Bandykite vėliau...'), 'error');
					}
				}
			}
		}

		function account_updateUserData(&$account, $userData){
			if($account){
				$edit = array(
      'data' => array(
        'firstname' => (isset($userData['PersonalData']['FirstName']) ? $userData['PersonalData']['FirstName'] : ''),
        'middlename' => (isset($userData['PersonalData']['MiddleName']) ? $userData['PersonalData']['MiddleName'] : ''),
        'surname' => (isset($userData['PersonalData']['LastName']) ? $userData['PersonalData']['LastName'] : ''),
        'birthday' => (isset($userData['PersonalData']['BirthDate']) ? $userData['PersonalData']['BirthDate'] : ''),
        'personalId' => (isset($userData['PersonalData']['PersonalCode']) ? $userData['PersonalData']['PersonalCode'] : ''),
        'personal_country' => (isset($userData['PersonalData']['NationalityCountry']['CountryId']) ? country_GetCodeById($userData['PersonalData']['NationalityCountry']['CountryId']) : ''),
        'UserCardNumber' => (isset($userData['ContractData']['UserCardNumber']) ? $userData['ContractData']['UserCardNumber'] : ''),
        'PinCardNumber' => (isset($userData['ContractData']['PinCardNumber']) ? $userData['ContractData']['PinCardNumber'] : ''),
        'ContractIdentifier' => (isset($userData['ContractData']['ContractIdentifier']) ? $userData['ContractData']['ContractIdentifier'] : ''),
        'ContractDate' => (isset($userData['ContractData']['ContractDate']) ? $userData['ContractData']['ContractDate'] : ''),
        'betcenter' => (isset($userData['ContractData']['Office']['OfficeId']) ? $userData['ContractData']['Office']['OfficeId'] : ''),
        'street' => (isset($userData['Contacts']['Address']['Street']) ? $userData['Contacts']['Address']['Street'] : ''),
        'house' => (isset($userData['Contacts']['Address']['Building']) ? $userData['Contacts']['Address']['Building'] : ''),
        'flat' => (isset($userData['Contacts']['Address']['Apartment']) ? $userData['Contacts']['Address']['Apartment'] : ''),
        'zip' => (isset($userData['Contacts']['Address']['PostalCode']) ? $userData['Contacts']['Address']['PostalCode'] : ''),
        'city' => (isset($userData['Contacts']['Address']['CityOrVillage']) ? $userData['Contacts']['Address']['CityOrVillage'] : ''),
        'country' => (isset($userData['Contacts']['Address']['Country']['CountryId']) ? country_GetCodeById($userData['Contacts']['Address']['Country']['CountryId']) : ''),
        'mobile_number' => (isset($userData['Contacts']['Phones']['MobilePhone1']) ? $userData['Contacts']['Phones']['MobilePhone1'] : ''),
        'work_number' => (isset($userData['Contacts']['Phones']['WorkPhone1']) ? $userData['Contacts']['Phones']['WorkPhone1'] : ''),
        'home_number' => (isset($userData['Contacts']['Phones']['HomePhone1']) ? $userData['Contacts']['Phones']['HomePhone1'] : ''),
        //[DISCOUNT]'balance' => floatval(isset($userData['details']->Currencies->RealMoney->Amount) ? number_format($userData['details']->Currencies->RealMoney->Amount, 2, '.', '') : 0.00),
      	'balance' => floatval(isset($userData['Money']['Balance']) ? number_format($userData['Money']['Balance'], 2, '.', '') : 0.00),
      	'maxBetAmount' => floatval(isset($userData['ContractData']['MaxBetAmount']) ? number_format($userData['ContractData']['MaxBetAmount'], 2, '.', '') : 500.00),
        'isvip' => ((isset($userData['ContractData']['ContractState']['UserIsVIP']) AND $userData['ContractData']['ContractState']['UserIsVIP'] === 'true') ? true : false),
        //[DISCOUNT]'details' => $userData['details']
				),
				);
				if(isset($userData['ContractData']['ContractState']['ContractStateId'])){
					if($userData['ContractData']['ContractState']['ContractStateId'] == 2){
						$edit['status'] = 0;
						$edit['roles'] = array(variable_get('account_roles_topsport_paused') => 1);
					}elseif($userData['ContractData']['ContractState']['ContractStateId'] == 3){
						$edit['roles'] = array(variable_get('account_roles_topsport_paused') => 1);
					}
				}
				$account = user_save($account, $edit);
				account_updateUserData2($account->uid, $userData);
			}
		}
		
		function account_updateUserData2($uid, $userData){
			db_query('UPDATE ts_users_data SET real_amount = :balance WHERE uid = :uid', array(
				':uid' => $uid,
				':balance' => isset($userData['Money']['Balance']) ? $userData['Money']['Balance'] : 0,
			));
		}
		
		function userinfo_updaterData($account = false){
            if($account){
                $user = $account;
            } else {
                global $user;
            }
			
			$tsuid = userinfo_get_topsportId($user);
			
			if($tsuid > 0) {
                $inc_path = get_include_path(). PATH_SEPARATOR . 'front'. PATH_SEPARATOR. '..'. DIRECTORY_SEPARATOR . 'front';
				set_include_path($inc_path);	
				require_once 'front/libs/DB.php';
				require_once 'front/libs/Config.php';
				require_once 'front/libs/_config.php';
				require_once 'front/modules/User/code/User.php';
				User::UpdateUserData($tsuid);				
			}
		}
		
		function account_user_data($uid){
			$data = db_query('SELECT * FROM ts_users_data  WHERE uid = :uid', array(':uid' => $uid))->fetch();
			return $data;
		}


		function account_getbankaccounts($uid, $baid = false){
			$accounts = db_select('users_bankaccounts', 'uba')->fields('uba')->condition('uid', $uid);
			if($baid){
				$accounts->condition('baid', $baid);
				return $accounts->execute()->fetchObject();
			}
			return $accounts->execute()->fetchAll();
		}

		function account_removeBankAccount($uid, $baid){
			db_delete('users_bankaccounts')
			->condition('uid', $uid)
			->condition('baid', $baid)
			->execute();
		}


		function account_user_presave(&$edit, $account, $category) {
			// Only assign role if this is a new account.
			if (isset($account->is_new) && !empty($account->is_new)) {
				$user_roles = user_roles(TRUE);
				$rid = variable_get('account_roles_topsport_new', NULL);
				if ($rid && array_key_exists($rid, $user_roles)) {
					$edit['roles'][$rid] = $user_roles[$rid];
				}
			}
		}


		function account_user_load($users){
			foreach($users as $user){
				if(isset($user->data['ContractIdentifier']) AND is_numeric($user->data['ContractIdentifier']) AND isset($user->data['betcenter'])){
					$user->data['ContractIdentifier'] = account_generateContractIdentifier($user->data['betcenter'], $user->data['ContractIdentifier']);
				}
			}
		}

		function account_user_login($edit, &$account){
			if($account->uid AND count($account->roles) == 1){
				$user_roles = user_roles(TRUE);
				$rid = variable_get('account_roles_topsport_new', NULL);
				if ($rid && array_key_exists($rid, $user_roles)) {
					$edit['roles'][$rid] = $user_roles[$rid];
				}               
                foreach (module_implements('user_login') as $module) {
                    $function = $module . '_user_login';
                    $function($edit, $user);
                 }                  
				$account = user_save($account, $edit);
			}
			if($account->uid){
				if(!isset($account->data['currency'])){
					$edit['data']['currency'] = variable_get('account_currency_default', 'LTL');
					$account = user_save($account, $edit);
				}				
				userinfo_updateUser($account);
				userinfo_updaterData($account);
				
				$Wallets = account_user_data($account->uid);
				if(isset($Wallets->discount_current_amount) && $Wallets->discount_current_amount > 0){
					drupal_set_message(t('
						<h3>Papildyk savo balansą ir gauk @DiscountPercent% nuolaidą statymams atlikti</h3>
						<p>Pasiūlymas galioja iki: <strong>@ValidUntil</strong><br>
	                            Minimalus bendras kortelės statymo koeficientas: <strong>@MinOdds</strong><br>
	                            Nuolaidos nustos galioti po <strong>@UsedCountLeft</strong> statymų arba išnaudojus <strong>@LeftAmount LTL</strong> nuolaidų vertę, arba pasibaigus nurodytam terminui.</p>
						<p class="small">Nuolaidos galioja tik sporto lažyboms iki varžybų pradžios. Nuolaidų sąlygas bendrovė pasilieka teisę keisti be įspėjimo.</p>',array('@DiscountPercent' => $Wallets->discount_max_cover_percent, '@MinOdds' => $Wallets->discount_min_total_coef, '@ValidUntil' => $Wallets->discount_valid_to, '@UsedCountLeft' => $Wallets->discount_max_used_count - $Wallets->discount_used_count, '@LeftAmount' => $Wallets->discount_current_amount)), 'warning');
				}
			}
		}

		function account_page_build(&$page){
			global $user;
			
			/*if($user->uid)
			{
				drupal_add_js('/front/modules/Account/files/js/ts.js');
				drupal_add_js('
function TSIsClubMember(d){
	if(d.status == "ok" && !d.membership)
	{		
		var html = \'<div class="messages warning">'.t('Jūs dar nesate Lažybų klubo narys, kviečiame juo tapti ir pasinaudoti klubo privilegijomis. <a href="@url">Daugiau informacijos čia</a>.', array('@url'=>'/front/Club/signup')).'</div>\';
			jQuery("div#content").prepend(html);
	}
}
TopSport.onToken("Account/ismember",TSIsClubMember);' , 'inline');
			}*/
			
			if(isset($user->data['agreement_reject_comment']) AND $user->data['agreement_reject_comment']){
				switch($user->data['agreement_step']){
					case 3.1:
						drupal_set_message(t('Jums reikia patikslinti savo duomenis. Priežastis: %comment. <a href="@url">Atnaujinkite informaciją.</a>', array('@url' => url('account/withdrawals'), '%comment' => strip_tags($user->data['agreement_reject_comment']))), 'warning', FALSE);
						break;
					case 3.2:
						drupal_set_message(t('Jūsų įkeltas dokumentas buvo atmestas. Atmetimo priežastis: %comment. <a href="@url">Įkelkite naują dokumentą.</a>', array('@url' => url('account/withdrawals'), '%comment' => strip_tags($user->data['agreement_reject_comment']))), 'warning', FALSE);
						break;
				}
			}
		}


		function account_logWithdrawals($user, $params, $result){
			db_insert('users_withdrawals')
			->fields(array(
    'uid' => $user->uid,
    'tsuid' => $params['user_id'],
    'firstname' => $user->data['firstname'].' '.$user->data['middlename'],
    'surname' => $user->data['surname'],
    'amount' => $params['amount'],
    'extra_amount' => $params['extra_amount'],
    'iban' => $params['iban'],
    'bankname' => $params['bank_name'],
    'swift' => $params['swift'],
    'result' => serialize($result),
    'errorcode' => $result['Code'],
    'errormessage' => (isset($result['ErrorMessage']) ? $result['ErrorMessage'] : ''),
    'errordescription' => (isset($result['Description']) ? ($result['Code'] == 0 ? $result['Description'] : $result['Description']['Default']) : ''),
    'timestamp' => REQUEST_TIME,
			))
			->execute();
		}

		function account_report_search_form($form, &$form_state){

			//   $_SESSION['account_report_search_filter'] = array();
			$form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter log messages'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($_SESSION['account_report_search_filter']),
			);
			$form['search']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Paieškos frazė'),
    '#default_value' => (!empty($_SESSION['account_report_search_filter']['value']) ? $_SESSION['account_report_search_filter']['value'] : ''),
			);

			$form['search']['action'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
			);
			$form['search']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
			);

			return $form;
		}

		function account_report_search_form_submit($form, &$form_state) {
			$op = $form_state['values']['op'];
			$filters = array('value' => t('Paieškos frazė'));
			switch ($op) {
				case t('Filter'):
					foreach ($filters as $name => $filter) {
						if (isset($form_state['values'][$name])) {
							$_SESSION['account_report_search_filter'][$name] = $form_state['values'][$name];
						}
					}
					break;
				case t('Reset'):
					$_SESSION['account_report_search_filter'] = array();
					break;
			}
			return $_GET['q'];
		}

		function account_updateClientUserInfo($form, &$form_state){
			$account = $form['#user'];
			$account = $form_state['user'];

			$category = $form['#user_category'];
			form_state_values_clean($form_state);
			$account_unchanged = clone $account;
			//   entity_form_submit_build_entity('user', $account, $form, $form_state);
			$edit = array_intersect_key((array) $account, $form_state['values']);
			$xml = account_makeClientUpdateXML($form_state['values']);
			$result = topsport_updateClientUserInfo($xml);
			if(isset($result['Succeed']) AND $result['Succeed'] == 'true'){
				$account = user_save($account_unchanged, $edit, $category);
				$form_state['values']['uid'] = $account->uid;
				userinfo_updateUser($account);
				drupal_set_message(t('The changes have been saved.'));
			}else{
				if(isset($result['Errors']['Error'])){
					if(isset($result['Errors']['Error']['ErrorId'])){
						$result['Errors']['Error'] = array($result['Errors']['Error']);
					}
					foreach($result['Errors']['Error'] as $error){
						drupal_set_message($error['ErrorMessage'], 'error');
					}
				}else{
					drupal_set_message(t('Pakeitimų išsaugoti nepavyko, pamėginkite dar kartą.'), 'error');
				}
			}
			if ($category == 'account' && !empty($edit['pass'])) {
				unset($_SESSION['pass_reset_' . $account->uid]);
			}
			unset($_SESSION['pin_index']);
			//   cache_clear_all();
		}

		function account_makeClientUpdateXML($values){
			global $language;
			$xml = '<?xml version="1.0" encoding="UTF-8" ?>
  <UserInfo>
    <UserId>'.$values['data']['tsuid'].'</UserId>
    <LanguageId>'.topsport_LangCodes($language->language).'</LanguageId>
    <Pin>
      <Index>'.$values['pin']['index'].'</Index>
      <Value>'.$values['pin']['value'].'</Value>
    </Pin>
    <NewData>
      <AddressCountryId>'.country_GetIdByCode($values['data']['country']).'</AddressCountryId>
      <AddressCityOrVillage>'.$values['data']['city'].'</AddressCityOrVillage>
      <AddressPostalCode>'.$values['data']['zip'].'</AddressPostalCode>
      <AddressStreet>'.$values['data']['street'].'</AddressStreet>
      <AddressBuilding>'.$values['data']['house'].'</AddressBuilding>
      <AddressApartment>'.$values['data']['flat'].'</AddressApartment>
      <CellularPhone1>'.$values['data']['mobile_number'].'</CellularPhone1>
      <DayTimePhone1>'.$values['data']['work_number'].'</DayTimePhone1>
      <EveningPhone1>'.$values['data']['home_number'].'</EveningPhone1>
    </NewData>
  </UserInfo>';
			//   <Email>'.$values['mail'].'</Email>
			return $xml;
		}

		function account_form_user_filter_form_alter(&$form, &$form_state){
			unset($form['filters']['status']['filters']['permission']);
		}


		function account_menu_site_status_alter(&$menu_site_status, $path) {
			if (user_is_logged_in()) {
				if ($path == 'user/login' OR $path == 'user/register') {
					if (isset($_GET['destination'])) {
						drupal_goto($_GET['destination']);
					}else{
						drupal_goto('account');
					}
				}
			}
			if($path == 'user/'.$GLOBALS['user']->uid.'/edit'){
				if(!user_access('administer users')){
					drupal_goto('account');
				}
			}
		}


		function account_search_elements() {
			$form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Search'),
    '#description' => (!module_exists('search')) ? t('Keyword search requires the !search module to be installed.', array('!search' => l(t('Search'), 'admin/modules'))) : '',
			);

			if (module_exists('search')) {
				$keys = trim(arg(3));

				// Include validate and submit search form handlers
				module_load_include('inc', 'search', 'search.pages');

				$form = array_merge($form, drupal_get_form('search_form', 'admin/people/search', $keys, 'user'));

				// Move search fields into fieldset
				$form['search']['basic'] = $form['basic'];
				unset($form['basic']);

				// Collect the search results.
				if ($keys) {
					$results = search_data($keys, 'account');
					$form['search']['basic']['#suffix'] = drupal_render($results);
				}
			}
			return $form;
		}

		function account_preprocess_search_results(&$variables) {
			if($variables['module'] == 'account'){
				$variables['pager'] = '';
			}
		}

		function account_search_execute($keys = NULL, $conditions = NULL) {
			$find = array();
			// Replace wildcards with MySQL/PostgreSQL wildcards.
			$keys = preg_replace('!\*+!', '%', $keys);
			$query = db_select('users');/*->extend('PagerDefault');*/
			$query->fields('users', array('uid'));

			$query->fields('users', array('mail'));
			$query->condition(db_or()
			->condition('name', '%' . db_like($keys) . '%', 'LIKE')
			->condition('mail', '%' . db_like($keys) . '%', 'LIKE')
			->where('data LIKE \'%"' . db_like($keys) . '"%\'')
			);
			$query->condition('uid', 1, '!=');
			//   $page = (isset($_GET['page']) ? $_GET['page'] : 0) * 15;
			$uids = $query
			//     ->range($page, 15)
			->execute()
			->fetchCol();
			$accounts = user_load_multiple($uids);

			$results = array();
			foreach ($accounts as $account) {
				$result = array(
      'title' => format_username($account),
      'link' => url('user/' . $account->uid, array('absolute' => TRUE)),
				);
				if (user_access('administer users')) {
					$result['title'] .= ' (' . $account->mail . ')';
					if(isset($account->data['tsuid'])){
						$result['title'] .= ' (' . $account->data['tsuid'] . ')';
					}
				}
				$results[] = $result;
			}

			return $results;
		}

		function account_dblog_overview() {
			$filter = dblog_build_filter_query();
			$rows = array();
			$classes = array(
			WATCHDOG_DEBUG => 'dblog-debug',
			WATCHDOG_INFO => 'dblog-info',
			WATCHDOG_NOTICE => 'dblog-notice',
			WATCHDOG_WARNING => 'dblog-warning',
			WATCHDOG_ERROR => 'dblog-error',
			WATCHDOG_CRITICAL => 'dblog-critical',
			WATCHDOG_ALERT => 'dblog-alert',
			WATCHDOG_EMERGENCY => 'dblog-emerg',
			);

			$build['dblog_search_form'] = drupal_get_form('account_report_search_form');
			$build['dblog_search_form']['search']['#title'] = t('Paieška log žinutėse');

			$build['dblog_filter_form'] = drupal_get_form('dblog_filter_form');
			$build['dblog_clear_log_form'] = drupal_get_form('dblog_clear_log_form');

			$header = array(
    '', // Icon column.
			array(
      'data' => t('Type'),
      'field' => 'w.type',
			),
			array(
      'data' => t('Date'),
      'field' => 'w.wid',
      'sort' => 'desc',
			),
			t('Message'),
			array(
      'data' => t('User'),
      'field' => 'u.name',
			),
			array('data' => t('Operations')),
			);

			$query = db_select('watchdog', 'w')->extend('PagerDefault')->extend('TableSort');
			$query->leftJoin('users', 'u', 'w.uid = u.uid');
			$query
			->fields('w', array('wid', 'uid', 'severity', 'type', 'timestamp', 'message', 'variables', 'link'))
			->addField('u', 'name');
			if (!empty($filter['where'])) {
				$query->where($filter['where'], $filter['args']);
			}
			if(!empty($_SESSION['account_report_search_filter']['value'])){
				$value = $_SESSION['account_report_search_filter']['value'];
				$query->condition(db_or()->where('u.name LIKE \'%' . db_like($value) . '%\'')->where('w.variables LIKE \'%"' . db_like($value) . '"%\''));
			}
			$result = $query
			->limit(50)
			->orderByHeader($header)
			->execute();

			foreach ($result as $dblog) {
				$rows[] = array(
      'data' => array(
				// Cells
				array('class' => 'icon'),
				t($dblog->type),
				format_date($dblog->timestamp, 'short'),
				theme('dblog_message', array('event' => $dblog, 'link' => TRUE)),
				theme('username', array('account' => $dblog)),
				$dblog->link,
				),
				// Attributes for tr
      'class' => array(drupal_html_class('dblog-' . $dblog->type), $classes[$dblog->severity]),
				);
			}

			$build['dblog_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('id' => 'admin-dblog'),
    '#empty' => t('No log messages available.'),
			);
			$build['dblog_pager'] = array('#theme' => 'pager');

			return $build;
		}


function account_withdrawals_methods_table($page = false, $countryCode = null) {
    global $base_url, $user;
    $header = array(
      array('data' => t('Išmokėjimo būdas'), 'colspan' => 2),
      t('Mokestis'),
      t('Limitas'),
    );

    $icons_path = $base_url . '/' . drupal_get_path('module', 'account') . '/icons/';

    if (!$countryCode) {
        $countryCode = isset($user->data['country']) ? $user->data['country'] : variable_get('site_default_country');
    }

    $rows = array();
    if (user_is_logged_in()) {
        $Wallets = account_user_data($user->uid);
        $Wallets->real_amount;
    } else {
        $Wallets = new stdClass();
        $Wallets->real_amount = 0;
    }    
    
    $bnkt_min = account_get_withdrawal_min_amount($countryCode, 'bank-transfer');
    $show_bank_transfer = true /*($bnkt_min <= $Wallets->real_amount)*/;
    $rows[] = array(
      'data' => array(
        '<div class="pay-meth-minsize"><img src="' . $icons_path . 'bank-by-mb.gif" title="' . t('Bankinis pavedimas') . '" /></div>',
        t('Bankinis pavedimas'),
        account_get_withdrawal_fee_percent($countryCode, 'bank-transfer') . '%',
        t('Min.') . ' ' . account_currency_convert_string($user->uid, $bnkt_min)
      ),
      'onclick' => $show_bank_transfer ? "window.location='/account/withdrawals/bank-transfer'" : '',
      'style' => $show_bank_transfer   ? 'cursor: pointer' : 'zoom: 1;-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)"; filter:alpha(opacity=50);opacity:.5;',
    );

    $mb_min = account_get_withdrawal_min_amount($countryCode, 'moneybookers');
    $show_moneybookers = true/*($mb_min <= $Wallets->real_amount)*/;
    $rows[] = array(
      'data' => array(
        '<div class="pay-meth-minsize"><img src="' . $icons_path . 'moneybookers-skrill-logo.png" title="' . t('Moneybookers') . '"  /></div>',
        t('Moneybookers'),
         account_get_withdrawal_fee_percent($countryCode, 'bank-transfer') . '%',
        t('Min.') . ' ' . account_currency_convert_string($user->uid, $mb_min)
      ),
      'onclick' => $show_moneybookers ? "window.location='/account/withdrawals/moneybookers'" : '',
      'style'   => $show_moneybookers ? 'cursor: pointer' : 'zoom: 1;-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";filter:alpha(opacity=50);opacity:.5;',
    );


    if (!$page AND empty($rows)) {
        drupal_set_message(t('Jūsų balanse šiuo metu nėra pakankamai pinigų išmokėjimo užsakymui.'), 'warning');
        if ($Wallets->real_amount > 0 AND $user->data['country'] == 'LT') {
            drupal_set_message(t('Išsigryninti mažą sumą Jūs galite bet kuriame mūsų lažybų punkte.'), 'warning');
        }
    }

    if ($page) {
        return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('Galimų išmokėjimo būdų nėra.')));
    } else {
        return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('Galimų išmokėjimo būdų nėra.'), 'attributes' => array('class' => array('deposits-list-table'))));
    }
}

function account_withdrawals_config($form, &$form_state, $methodType = 'bank-transfer'){

			$methods = array('bank-transfer' => t('Bankinis pavedinimas'), 'moneybookers' => t('Moneybookers'));
			$form['#methodType'] = $methodType;

			$form['title'] = array(
    '#markup' => '<h3>'.$methods[$methodType].'</h3>',
			);

			$form['options-elements'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="method_options" style="clear: both;">',
    '#suffix' => '</div>',
			);

			$countries = array_merge(array('default' => t('Numatytoji').' ('.t('Jeigu valstybei nenurodyta, naudojama numatytoji').')'), country_get_list());
			$form['#countries'] = $countries;

			$rows = array();
			foreach($countries as $code => $name){
				$form['options-elements']['countries'][$code] = array(
      '#type' => 'fieldset',
      '#title' => $name,
      '#collapsible' => false,
      '#collapsed' => false,
      'fee' => array(
        '#type' => 'textfield',
        '#title' => t('Mokestis (%)'),
        '#default_value' => variable_get('account_withdrawals_'.$form['#methodType'].'_'.$code.'_fee', ''),
        '#required' => ($code == 'default'),
        '#size' => 5,
				),
      'min' => array(
        '#type' => 'textfield',
        '#title' => t('Min (Lt)'),
        '#default_value' => variable_get('account_withdrawals_'.$form['#methodType'].'_'.$code.'_min', ''),
        '#required' => ($code == 'default'),
        '#size' => 5,
				),
      'max' => array(
        '#type' => 'textfield',
        '#title' => t('Max (Lt)'),
        '#default_value' => variable_get('account_withdrawals_'.$form['#methodType'].'_'.$code.'_max', ''),
        '#required' => ($code == 'default'),
        '#size' => 5,
				),
				);
			}

			$form['actions_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
			);

			$form['#theme'] = 'withdrawals_config_form';

			return $form;

		}

		function theme_withdrawals_config_form($variables){
			$form = $variables['form'];
			if(!empty($form['options-elements']['countries'])){
				$output = '';
				$output .= drupal_render($form['title']);
				$header = array(
				t('Valstybė'),
				t('Mokestis (%)'),
				t('Min (Lt)'),
				t('Max (Lt)'),
				);
				$rows = array();
				$countries =  $form['#countries'];
				foreach($countries as $code => $country){
					$fee = $form['options-elements']['countries'][$code]['fee'];$fee['#title'] = '';
					$min = $form['options-elements']['countries'][$code]['min'];$min['#title'] = '';
					$max = $form['options-elements']['countries'][$code]['max'];$max['#title'] = '';
					$rows[] = array(
					$country,
					drupal_render($fee),
					drupal_render($min),
					drupal_render($max),
					);
					$fieldset = drupal_render($country);
				}

				$form['options-elements'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => 'nera'
      );

      $output .= drupal_render_children($form);
      return $output;
			}
		}

		function account_withdrawals_config_submit($form, &$form_state) {
			foreach($form_state['values']['options-elements']['countries'] as $code => $data){
				foreach($data as $key => $value){
					if($form['options-elements']['countries'][$code][$key]['#default_value'] != $value){
						if($value === ''){
							variable_del('account_withdrawals_'.$form['#methodType'].'_'.$code.'_'.$key);
						}else{
							variable_set('account_withdrawals_'.$form['#methodType'].'_'.$code.'_'.$key, $value);
						}
					}
				}
			}
			drupal_set_message(t('Nustatymai išsaugoti'));
		}

        


		/* withdrawals forms */
		function account_withdrawals_moneybookers_form($form, &$form_state, $account){
			if(isset($form_state['storage']['form'])){
				return $form_state['storage']['form'];
			}
			return account_withdrawals_moneybookers_form_data($form, $form_state, $account);
		}
		function account_withdrawals_moneybookers_form_data($form, &$form_state, $account){

			drupal_set_message(t('Užsakymas išmokėti pinigus į banko  sąskaitą įvykdomas per 2 darbo dienas, nuo užsakymo pateikimo'), 'warning');

			$form['#user'] = $account;
			$form['#step'] = 1;

			$form['mbacc_email'] = array(
                '#type' => 'textfield',
                '#title' => t('Moneybookers el. pašto adresas'),
                '#default_value' => $account->mail,
                '#size' => 60,
                '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
                '#required' => TRUE,
                '#disabled' => TRUE,
			);

			$countryCode = $account->data['country'];
			$form['#countryCode'] = $countryCode;
            
            if (user_is_logged_in()) {
                $Wallets = account_user_data($form['#user']->uid);
                $Wallets->real_amount;
            } else {
                $Wallets = new stdClass();
                $Wallets->real_amount = 0;
            }
            
            $type = 'moneybookers';
			$maxDepositOutSum = account_get_withdrawal_max_amount($form['#user']->data['country'], $type);
			$maxDepositOutSum = $maxDepositOutSum > $Wallets->real_amount ? $Wallets->real_amount : $maxDepositOutSum;
            $fee = account_get_withdrawal_fee_percent($countryCode, 'moneybookers');
            
            $min_amount = account_get_withdrawal_min_amount($countryCode, $type);
            
			$form['amount'] = array(
                '#type' => 'textfield',
                '#title' => t('Suma'),
                '#default_value' => '',
                '#size' => 5,
                '#maxlength' => 10,
                '#required' => TRUE,
                '#field_suffix' => account_get_currency($account->uid),
                '#description' =>
                        t('(Minimali išmokėjimo suma @value)', array('@value' => account_currency_convert_string($account->uid, $min_amount))).'<br/>'.
                        t('(Maksimali išmokėjimo suma @value)', array('@value' => account_currency_convert_string($account->uid, $maxDepositOutSum))).'<br/>'.
                        t('Tranzakcijos mokestis @value', array('@value' => $fee.'%'))
                        );
            $form['actions'] = array('#type' => 'actions', '#prefix' => '<div class="form-group">', '#suffix' => '</div>',);
            $form['actions']['go-back'] = array(
              '#type' => 'markup',
              '#markup' => l(t('Grįžti atgal'), 'account/withdrawals', array('attributes' => array('class' => array('btn btn-default btn-go-back'))))
            );
            
			$form['actions']['submit_action'] = array(
                '#type' => 'submit',
                '#value' => t('Continue'),
                '#attributes' => array('class' => array('btn-primary'))
			);

			$form['#redirect'] = TRUE;

			return $form;
		}
		function account_withdrawals_moneybookers_form_validate($form, &$form_state){

			if (isset($form_state['storage']['values'])) {
				return;
			}

			$countryCode = $form['#countryCode'];

			$form_state['values']['amount'] = str_replace(',', '.', $form_state['values']['amount']);
			$amount = floatval($form_state['values']['amount']);
            $type = 'moneybookers';
			$min_amount = account_get_withdrawal_min_amount($countryCode, $type);
            $max_amount = account_get_withdrawal_max_amount($countryCode, $type);
			if(is_numeric($form_state['values']['amount'])){
				if($amount < account_currency_convert($form['#user']->uid, $min_amount)){
					form_set_error('amount', t('Minimali išmokėjimo suma @value', array('@value' => account_currency_convert_string($form['#user']->uid, account_get_withdrawal_min_amount($countryCode, $type)))));
				}
                if($amount > account_currency_convert($form['#user']->uid, $max_amount)) {
					form_set_error('amount', t('Maksimali išmokėjimo suma @value', array('@value' => account_currency_convert_string($form['#user']->uid, account_get_withdrawal_max_amount($countryCode, $type)))));
				}
				if($amount >  userinfo_get_balance($form['#user']->uid)){
					form_set_error('amount', t('Balansas nepakankamas'));
				}
			}else{
				form_set_error('amount', t('Išmokėjimo suma ne skaičius'));
			}

			if(!account_moneybookers_validate_email($form_state['values']['mbacc_email']) && $form['#user']->uid !=1){
				form_set_error('mbacc_email', t('Jūsų el. pašto adresas (xxx@yyy.com) nėra registruotas Skrill (Moneybookers) sistemoje. Jei Skrill (Moneybookers) sistemoje turite paskyrą su kitu el. pašto adresu, pakeiskite el. pašto adresą i-lažybų sistemoje.', array('xxx@yyy.com' => $form_state['values']['mbacc_email'])));
			}
		}


		function account_moneybookers_validate_email($email = ''){
			//$url = 'https://www.moneybookers.com/app/email_check.pl?';
			
			$url = 'https://topsport-proxy.data.lt/skrill/email_check.pl?';
			$secret = md5(AC_MONEYBOOKERS_SECRET_WORD);
			$url .= 'email=' . $email . '&';
			$url .= 'password=' . $secret . '&';
			$url .= 'cust_id=18643264';

			$response = drupal_http_request($url, array('headers' => array('Content-Type' => 'application/x-www-form-urlencoded'), 'timeout' => 30, 'data' => '', 'method' => 'GET'));
			$check = substr($response->data, 0, 2);
			return ($check == 'OK');
		}

function account_withdrawals_moneybookers_form_submit($form, &$form_state) {

    if (isset($form_state['storage']['values'])) {
        $amount = account_currency_convert_back($form['#user']->uid, str_replace(',', '.', $form_state['storage']['values']['amount']));
        $fee_percent = account_get_withdrawal_fee_percent($form['#user']->data['country'], 'moneybookers');
        $fee_amount = str_replace(',', '.',$amount * ($fee_percent / 100));
        $params = array(
          'user_id' => userinfo_get_topsportId($form['#user']),
          'amount' => str_replace(',', '.',round($amount-$fee_amount,2, PHP_ROUND_HALF_DOWN)),
          'extra_amount' => $fee_percent > 0 ? round($fee_amount,2,PHP_ROUND_HALF_DOWN) : 0,
          'currency' => 'LTL',
          'mbacc_email' => $form_state['storage']['values']['mbacc_email'],
          'pin_index' => $form_state['values']['pin']['index'],
          'pin_value' => $form_state['values']['pin']['value'],
          'iban' => $form_state['storage']['values']['mbacc_email'],
          'bank_name' => 'MoneyBookers',
          'swift' => 'SKRILL',
        );
        unset($_SESSION['pin_index']);
        $result = topsport_saveMbDepositOut($params, $form['#user']);
        userinfo_updateUser($form['#user']);
        account_logWithdrawals($form['#user'], $params, $result);
        $edit['data']['mbacc_mail'] = $form_state['storage']['values']['mbacc_email'];
        $account = $form['#user'];
        user_save($account, $edit);
        if ($result['Code'] != 0) {
            drupal_set_message($result['Description']['Default'], 'error');
        } else {
            drupal_set_message('Pinigų išmokėjimo prašymas priimtas' . ' ' . account_currency_string($form_state['storage']['values']['amount'], account_get_currency()));
            cache_clear_all('account_page_history:' . $params['user_id'], 'cache');
            drupal_goto('account/history');
        }
    } else {
        if (!isset($_SESSION['pin_index'])) {
            $_SESSION['pin_index'] = rand(1, 24);
        }
        $amount = $form_state['values']['amount'];
        $fee = account_get_withdrawal_fee_percent($form['#user']->data['country'], 'moneybookers');
        $fee_amount = $amount*$fee/100;
        $form_state['storage']['values'] = $form_state['values'];
        $form_state['storage']['form'] = array(
          'mm_email' => array(
            '#type' => 'item',
            '#title' => t('Moneybookers el. pašto adresas'),
            '#markup' => $form_state['values']['mbacc_email'],
          ),
          'fee' => array(
            '#type' => 'item',
            '#title' => t('Tranzakcijos mokestis'),
            '#markup' => account_currency_string($fee_amount, account_get_currency()).' ('.$fee.'%)',
          ),
          'amount' => array(
            '#type' => 'item',
            '#title' => t('Išmokama suma'),
            '#markup' => account_currency_string($amount-$fee_amount, account_get_currency()),
          ),
          'pin' => array(
            '#tree' => TRUE,
            'index' => array(
              '#type' => 'value',
              '#value' => $_SESSION['pin_index'],
            ),
            'value' => array(
              '#type' => 'password',
              '#title' => t('PIN kodo nr. %index reikšmė', array('%index' => $_SESSION['pin_index'])),
              '#default_value' => '',
              '#size' => 40,
              '#maxlength' => 255,
              '#required' => TRUE,
              '#weight' => 6,
              '#element_validate' => array('account_validate_pin_value'),
            ),
          ),
          'back' => array(
            '#markup' => '<a href="'.url('account/withdrawals/moneybookers').'" class="btn btn-default btn-back">'.t('Atgal').'</a>',
            '#weight' => 20,
          ),
          'submit_action' => array(
            '#type' => 'submit',
            '#value' => t('Confirm'),
            '#weight' => 21,
            '#attributes' => array('class' => array('form-submit', 'btn-primary'))
          ),
        );
        $form_state['storage']['form']['#step'] = 2;
        $form_state['storage']['form']['#user'] = $form['#user'];
        $form_state['rebuild'] = TRUE;
    }
}

function  account_deposit_is_active($method_id, $message_args = array()){
	global $user;
	$obj = db_query('SELECT * FROM ts_users_deposits_blocked WHERE tsuid = :tsuid AND method_id = :method_id', 
			array(':tsuid' => $user->data['tsuid'], ':method_id'=> $method_id))->fetch();
	if($obj){
		$description = 'Šis įmokos būdas Jums buvo laikinai sustabdytas gavus nurodymą iš <strong>@PaymentName</strong> dėl įtartinos veiklos. <br>Jei tai yra klaida, prašome susisiekti su įmokos tiekėju.';
		if(strlen($obj->reason_description)){
			$description = t($obj->reason_description, $message_args);
		}
		drupal_set_message(
		'<h1>'.t('Dėmesio!').'</h1>'.
		'<p>'.t($description, $message_args), 'warning').'</p>';
		drupal_goto('account/deposits');
	}
}

function account_deposit_blocked_show($account){
	$tsuid = $account->data['tsuid'];
	$form['blocked-payments'] = array(
			'#type' => 'fieldset',
			'#title' => t('Vartotojui užblokuoti įmokų šaltiniai'),
			'#weight' => -1,
			'#collapsible' => FALSE,
			'#collapsed' => TRUE,
			'#tree' => TRUE
	);
	$header = array(t('Blokavimo data'), t('Šaltinio pavadinimas'));
	$rows = array();
	$objs = db_query('SELECT * FROM ts_users_deposits_blocked WHERE tsuid = :tsuid ORDER BY created DESC',
			array(':tsuid' => $tsuid))->fetchAll();
	if($objs){
		foreach ($objs as $item){
			$rows[]['data'] =array(
				$item->created,
				$item->method_id
			);
		}
	}
	$html = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('Blokuotų įmokų nėra.')));
	$html .= l('Blokuoti įmokų šaltinius', 'user/'.$account->uid.'/blockpayment', array('attributes' => array('class' => array('add'))));
	
	$form['blocked-payments']['data'][] = array(
        '#markup' => $html,
        '#weight' => 1,
        );
	
	return $form;
}
function account_deposit_block($account = null, $type = null){
	$form = drupal_get_form('account_deposit_block_form', $account);
	return drupal_render($form);
}
function account_deposit_block_form($form, &$form_state, $account){
	$form['#user'] = $account;
	$form['depo'] = array(	
			'#type' => 'fieldset',	
			'#weight' => -1,	
			'#collapsible' => TRUE,	
			'#collapsed' => FALSE,	
			'data' => array(
					'#tree' => TRUE,
			),
	);
	$form['depo']['deposits_gateways'] = array(
       '#type' => 'select',
       '#title' => t('Blokuoti šaltinį'),
       '#options' => account_get_available_deposits_gateways($account->data['tsuid']),
       '#description' => t('DĖMESIO: prieš atliekant šį veiskmą privalote gauti sutikimą iš finansų skyriaus.'),
	   '#multiple' => true,
			'#weight' => -1,
   );	
	
	$form['depo']['data']['actions_blocksubmit'] = array(
    '#type' => 'submit',
    '#value' => t('Blokuoti'),
			'#weight' => 1,
	);
	return $form;
}

function account_deposit_block_form_submit($form, &$form_state){
	$account = $form['#user'];
	$block_list = $form_state['values']['deposits_gateways'];
	$allowed = account_get_deposits_gateways();
	$inserts = array();
	if(count($block_list)){
		foreach ($block_list as $key => $val){
			if(isset($allowed[$key])){
				$inserts[] = $key;
			}		
		}
	}
	if(count($inserts) && isset($account->data['tsuid']) && $account->data['tsuid'] > 0){		
		foreach ($inserts as $source){
			$ins = db_insert('users_deposits_blocked');
			$ins->fields(array(
				'method_id' => $source,
				'tsuid' => $account->data['tsuid']
			))->execute();
		}
		drupal_set_message('Operacija įvykdyta sėkimingai', 'status');
	} else {
		drupal_set_message('Operacija nepavyko', 'error');
	}
	drupal_goto('user/'.$account->uid.'/edit');
}

function account_get_deposits_gateways(){
	$sources = array(
			'neteller' => 'neteller',
			'moneybookers' => 'moneybookers',
			'monetaru' => 'monetaru',
			'webmoney' => 'webmoney',
			'swedbank' => 'swedbank',
			'mokejimalt' => 'mokejimalt'
	);

	return $sources;
}

function account_get_available_deposits_gateways($tsuid){
	$list = account_get_deposits_gateways();
	$objs = db_query('SELECT * FROM ts_users_deposits_blocked WHERE tsuid = :tsuid ORDER BY created DESC',
			array(':tsuid' => $tsuid))->fetchAll();
	if($objs){
		foreach ($objs as $item){
			if(isset($list[$item->method_id])){
				unset($list[$item->method_id]);
			}
		}
	}
	return $list;
}

function account_admin_paths() {
	$paths = array(
			'user/*/blockpayment' => TRUE,
	);
	return $paths;
}

function account_get_withdrawal_min_amount($countryCode, $type) {
    switch ($type) {
        case 'moneybookers':
            $type = 'moneybookers';
            break;
        case 'bank-transfer':
            $type = 'bank-transfer';
            break;
        default:
            return 35;
    }
    return variable_get('account_withdrawals_'.$type.'_'.$countryCode.'_min', variable_get('account_withdrawals_'.$type.'_default_min', 35));
}

function account_get_withdrawal_max_amount($countryCode, $type) {
    switch ($type) {
        case 'moneybookers':
            $type = 'moneybookers';
            break;
        case 'bank-transfer':
            $type = 'bank-transfer';
            break;
        default:
            return 0;
    }
    return variable_get('account_withdrawals_'.$type.'_'.$countryCode.'_max', variable_get('account_withdrawals_'.$type.'_default_max', 0));
}

function account_get_withdrawal_fee_percent($countryCode, $type) {
    switch ($type) {
        case 'moneybookers':
            $type = 'moneybookers';
            break;
        case 'bank-transfer':
            $type = 'bank-transfer';
            break;
        default:
            return 0;
    }
    return variable_get('account_withdrawals_'.$type.'_' . $countryCode . '_fee', variable_get('account_withdrawals_'.$type.'_default_fee', 0));
}

function account_withdrawals_bank_UseFee($iban){
    if(strtoupper(substr($iban, 0, 2)) === 'LT'){
        return false;
    }
    return true;
}