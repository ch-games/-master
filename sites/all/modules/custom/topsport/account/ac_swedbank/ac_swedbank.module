<?php

// $Id$

define('AC_SWEDBANK_VK_SND_ID', 'TOPSPORT');


function ac_swedbank_menu(){
	$items['payment-swedbank-callback'] = array(
    'title' => 'Payment Swedbank Callback',
    'access callback' => TRUE,
    'page callback' => 'ac_swedbank_payment_callback',
    'type' => MENU_CALLBACK,
	);

	return $items;
}

function ac_swedbank_account_payment_method(){
	global $base_url;
	$icons = $base_url.'/'.drupal_get_path('module', 'ac_swedbank').'/icons/';

	$methods['swedbank'] = array(
    'id' => 'swedbank',
    'name' => t('SwedBank el. banko sistema (interneto bankas)'),
    'title' => '<img src="'.$icons.'swedbank-bankas-logo.png" title="'.t('SwedBank el. banko sistema (interneto bankas)').'" />',
    'komisiniai' => '0%',
    'update' => t('Iš karto'),
    'limit' => t('Min. 10 Lt').'<br/>'.t('Max.&nbsp;50&nbsp;000&nbsp;Lt'),
    'limit_min' => 10,
    'limit_max' => 50000,
    'callback' => 'ac_swedbank_payment_start',
    'weight' => -5,
    'category' => 'banklink',
    'countries' => array('LT'),
	);

	return $methods;

}

function ac_swedbank_payment_start($form, &$form_state){
	return ac_swedbank_payment_form($form, $form_state);
}

function ac_swedbank_payment_form($form, $form_state){

	$payment_form['#action'] = 'https://ib.swedbank.lt/banklink/bl-lt';
	$account = $form['#user'];
	
	// adding check for blocked from user payment gateway
	$method = 'swedbank';
	$title = t('SwedBank');
	account_deposit_is_active($method, array('@PaymentName' => $title));
	
	$request = ac_swedbank_build_request($form, $form_state);

	foreach($request as $key => $value){
		$payment_form[$key] = array('#type' => 'hidden', '#value' =>  htmlspecialchars($value));
	}

	$payment_form[] = array(
    'payment_method_icon' => array(
		'#markup' => _account_payment_method_data($form_state['values']['payment_method'], 'title'),
		'#prefix' => '<div>',
		'#suffix' => '</div>',
		),
		
    'payment_method' => array(
      '#markup' =>  '<strong>'.t('Įmokos būdas:').'</strong> '._account_payment_method_data($form_state['values']['payment_method'], 'name'),
      '#prefix' => '<div class="form-item">',
      '#suffix' => '</div>',
	),
    'payment_update' => array(
      '#markup' => t('Įmokos įskaitymo trukmė').': '._account_payment_method_data($form_state['values']['payment_method'], 'update'),
	),
    'amount' => array(
      '#markup' =>  '<strong>'.t('Suma:').'</strong> '.account_currency_string($form_state['values']['amount'], $form_state['values']['currency']),
      '#prefix' => '<div class="form-item">',
      '#suffix' => '</div>',
	),
	);

	$payment_form['back'] = array(
    '#markup' => l(t('Atgal'), 'account/deposits', array('attributes' => array('class' => array('form-submit', 'reset')))),
    '#weight' => '20',
	);
	$payment_form['submit_action'] = array(
    '#type' => 'submit',
    '#value' => t('Patvirtinti'),
    '#weight' => '21',
    '#states' => array(
      'enabled' => array(
        ':input[name="info_danger"]' => array('checked' => TRUE),
	),
	),
	);
	return $payment_form;

}

function ac_swedbank_payment_callback(){
	global $language;
	watchdog('swedbank_payment_callback', print_r($_REQUEST, true));
	if (ac_swedbank_checkPaymentStatus() === true){
		//if (topsport_areDepositOperationsAllowed() === true) {
		if($_REQUEST['VK_AUTO'] == 'N'){
			drupal_goto('account/deposits/accept');
		}elseif($_REQUEST['VK_AUTO'] == 'Y'){
			$pos = strpos($_REQUEST['VK_SND_NAME'], ' ');
			$name = substr($_REQUEST['VK_SND_NAME'], 0, $pos);
			$surname = substr($_REQUEST['VK_SND_NAME'], $pos+1);

			$uid = account_getOrderUser($_REQUEST['VK_REF']);
			$account = user_load($uid);
			$params = array(
        'user_id'       => userinfo_get_topsportId($account),
        'amount'        => account_currency_api_convert($_REQUEST['VK_CURR'], 'LTL', $_REQUEST['VK_AMOUNT']),
        'extra_amount'  => 0,
        'order_id'      => $_REQUEST['VK_REF'],
        'merchant_id'   => '0',
        'language'      => $_REQUEST['VK_LANG'],
        'currency'      => 'LTL',//$_REQUEST['VK_CURR'],
        'pay_text'      => $_REQUEST['VK_MSG'],
        'payment'       => 'swedbank',
        'status'        => 'done',
        'error'         => '',
        'client_name'   => account_getCorrectName($name),
        'client_surename' => account_getCorrectName($surname),
			);
			account_payment_done($account, $params);
		}
		//} else {
		//	echo 'Deposit operations are not allowed';
		//}
	}else{
		if(isset($_REQUEST['VK_REF'])){
			account_updateOrderData((int)$_REQUEST['VK_REF'], array('status' => 'cancelled'));
		}
		drupal_goto('account/deposits/cancel');
	}
}


function ac_swedbank_build_request($form, $form_state){
	global $base_url, $language;
	$account = $form['#user'];
	$oid = account_createOrderUser($form, $form_state);

	$RequestURLarray = array();
	$RequestURLarray['VK_SERVICE'] = '1002';
	$RequestURLarray['VK_VERSION'] = '008';
	$RequestURLarray['VK_SND_ID'] = AC_SWEDBANK_VK_SND_ID;
	$RequestURLarray['VK_STAMP'] = 'Order'.$oid;
	$RequestURLarray['VK_AMOUNT'] = number_format(account_currency_api_convert($form_state['values']['currency'], 'LTL', floatval($form_state['values']['amount'])), 2, '.', '');
	$RequestURLarray['VK_CURR'] = 'LTL';//$form_state['values']['currency'];
	$RequestURLarray['VK_REF'] = $oid;
	$RequestURLarray['VK_MSG'] = 'UAB TOP SPORT įmoka Nr.: '.$oid;

	$vk_mac_no = array();
	$vk_mac_no[] = $RequestURLarray['VK_SERVICE'];
	$vk_mac_no[] = $RequestURLarray['VK_VERSION'];
	$vk_mac_no[] = $RequestURLarray['VK_SND_ID'];
	$vk_mac_no[] = $RequestURLarray['VK_STAMP'];
	$vk_mac_no[] = $RequestURLarray['VK_AMOUNT'];
	$vk_mac_no[] = $RequestURLarray['VK_CURR'];
	$vk_mac_no[] = $RequestURLarray['VK_REF'];
	$vk_mac_no[] = $RequestURLarray['VK_MSG'];

	$vk_mac = ac_swedbank_generateMac($vk_mac_no);
	$signature = ac_swedbank_generateSignature(drupal_get_path('module', 'ac_swedbank').'/crtshop/new_private_key.pem', $vk_mac);

	list($lang_code) = explode('-', $language->language);
	
	$RequestURLarray['VK_MAC'] 		= $signature;
	$RequestURLarray['VK_RETURN'] 	= /*$account->data['tsuid'] == 726 ?*/ 'https://api.topsport.lt/payments/swedbank/'.$lang_code.'/' ;//: url('payment-swedbank-callback', array('absolute' => TRUE));
	$RequestURLarray['VK_LANG'] 	= 'LIT';
	$RequestURLarray['VK_ENCODING'] = 'UTF-8';

	foreach ($RequestURLarray as $key => $param) {
		$urlParams[] = $key.'='.$param;
	}

	return $RequestURLarray;
}

function ac_swedbank_generateSignature($file_priv, $vk_mac) {
	$fp = fopen($file_priv, "r");
	$priv_key = fread($fp, 8192);
	fclose($fp);
	$pkeyid = openssl_get_privatekey($priv_key);
	openssl_sign($vk_mac, $signature, $pkeyid);
	$signature = base64_encode($signature);
	$signature = preg_replace("/[\r|\n]/", "", $signature);
	openssl_free_key($pkeyid);
	return $signature;
}

function ac_swedbank_generateMac($arrayStr) {
	$ret = "";
	foreach($arrayStr as $str ) {
		$sl = ac_swedbank_utf8_strlen($str);
		if($sl > 0 && $sl < 10) {
			$ret .= "00".$sl.$str;
		}
		if($sl > 9 && $sl < 100) {
			$ret .= "0".$sl.$str;
		}
		if($sl > 99 && $sl < 1000) {
			$ret .= $sl.$str;
		}
	}
	return $ret;
}

function ac_swedbank_utf8_strlen($str){
	$count = 0;
	for($i = 0; $i < strlen($str); $i++){
		$value = ord($str[$i]);
		if($value > 127){
			if($value >= 192 && $value <= 223){
				$i++;
			}elseif($value >= 224 && $value <= 239){
				$i = $i + 2;
			}elseif($value >= 240 && $value <= 247){
				$i = $i + 3;
			}else{
				watchdog('swedbank_utf8_strlen', "Not a UTF-8 compatible string. ".$str, array(), WATCHDOG_WARNING);
				die('Not a UTF-8 compatible string');
			}
		}
		$count++;
	}
	return $count;
}

function ac_swedbank_checkPaymentStatus(){
	if(isset($_REQUEST['VK_MAC']) AND isset($_REQUEST['VK_SERVICE'])){
		if (ac_swedbank_check()){
			if($_REQUEST['VK_SERVICE'] != '1101' || $_REQUEST['VK_SERVICE'] == '1901'){
				return false;
			}
			return true;
		}else{
			//       drupal_set_message("Not a bank. Incorrect signature.", 'error');
			watchdog('swedbank_payment_callback', "Not a bank. Incorrect signature.".print_r($_REQUEST, true), array(), WATCHDOG_WARNING);
			return false;
		}
	}else{
		//     drupal_set_message("no MAC or/and SERVICE.", 'error');
		watchdog('swedbank_payment_callback', "no MAC or/and SERVICE.".print_r($_REQUEST, true), array(), WATCHDOG_WARNING);
		return false;
	}
}

function ac_swedbank_check(){
	$VK_variableOrder = Array(
	1101 => Array(
      'VK_SERVICE','VK_VERSION','VK_SND_ID',
      'VK_REC_ID','VK_STAMP','VK_T_NO','VK_AMOUNT','VK_CURR',
      'VK_REC_ACC','VK_REC_NAME','VK_SND_ACC','VK_SND_NAME',
      'VK_REF','VK_MSG','VK_T_DATE'
      ),
      1901 => Array(
      'VK_SERVICE','VK_VERSION','VK_SND_ID',
      'VK_REC_ID','VK_STAMP','VK_REF','VK_MSG'
      ),
      );
      $macFields = Array ();
      foreach ((array)$_REQUEST as $f => $v) {
      	if (substr ($f, 0, 3) == 'VK_') {
      		$macFields[$f] = $v;
      	}
      }
      $file_cert = drupal_get_path('module', 'ac_swedbank').'/crtbank/rsa_new.crt';
      $fp = fopen($file_cert, "r");
      $cert = fread($fp, 8192);
      fclose($fp);
      $pkey = openssl_pkey_get_public($cert);
      $requestNum = $macFields['VK_SERVICE'];
      $data = '';
      foreach((array)$VK_variableOrder[$requestNum] as $key){
      	$v = $macFields[$key];
      	$data .= str_pad(ac_swedbank_utf8_strlen($v), 3, '0', STR_PAD_LEFT) . $v;
      }
      if (!$ok = openssl_verify($data, base64_decode ($macFields['VK_MAC']), $pkey)){
      	return false;
      }
      return true;
}