<?php

function betslip_log($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {
	
	global $user, $base_root;

	static $in_error_state = FALSE;

	// It is possible that the error handling will itself trigger an error. In that case, we could
	// end up in an infinite loop. To avoid that, we implement a simple static semaphore.
	if (!$in_error_state && function_exists('module_implements')) {
		$in_error_state = TRUE;

		// Prepare the fields to be logged
		$log_entry = array(
      'type' => $type,
      'message' => $message,
      'variables' => $variables,
      'severity' => $severity,
      'link' => $link,
      'user' => $user,
      'request_uri' => $base_root . request_uri(),
      'referer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '',
      'ip' => ip_address(),
      'timestamp' => REQUEST_TIME,
		);
		/*
		 // Call the logging hooks to log/process the message
		 foreach (module_implements('betslip_log') as $module) {
		 module_invoke($module, 'betslip_log', $log_entry);
		 }
		 */
		betslip_log_betslip_log($log_entry);

		// It is critical that the semaphore is only cleared here, in the parent
		// betslip_log() call (not outside the loop), to prevent recursive execution.
		$in_error_state = FALSE;
	}
}

/**
 * Implements hook_betslip_log().
 *
 * Note some values may be truncated for database column size restrictions.
 */
function betslip_log_betslip_log(array $log_entry) {
	
// TURNING OFF to save DB size
	return;
	
	if($log_entry['user']->uid){
		Database::getConnection('default', 'default')->insert('betslip_log')
		->fields(array(
      'uid' => $log_entry['user']->uid,
      'type' => substr($log_entry['type'], 0, 64),
      'message' => $log_entry['message'],
      'variables' => serialize($log_entry['variables']),
      'severity' => $log_entry['severity'],
      'link' => substr($log_entry['link'], 0, 255),
      'location' => $log_entry['request_uri'],
      'referer' => $log_entry['referer'],
      'hostname' => substr($log_entry['ip'], 0, 128),
      'timestamp' => $log_entry['timestamp'],
		))
		->execute();
	}
}
/**
 * Implements hook_watchdog().
 *
 * Note some values may be truncated for database column size restrictions.
 */
function betslip_log_watchdog(array $log_entry) {
	if($log_entry['type'] == 'saveCachedCardXML-request' AND $log_entry['user']->uid > 0){
		betslip_log_betslip_log($log_entry);
	}
}


function _betslip_log_get_message_types() {
	$types = array();

	$result = db_query('SELECT DISTINCT(type) FROM {betslip_log} ORDER BY type');
	foreach ($result as $object) {
		$types[] = $object->type;
	}

	return $types;
}


/**
 * Implements hook_menu().
 */
function betslip_log_menu() {
	$items['admin/reports/betsliplog'] = array(
    'title' => 'Betslip log messages',
    'description' => 'View events that have recently been logged.',
    'page callback' => 'betslip_log_overview',
    'access arguments' => array('access site reports'),
    'weight' => -1,
	//     'file' => 'dblog.admin.inc',
	);

	$items['admin/reports/betsliplog/event/%'] = array(
    'title' => 'Details',
    'page callback' => 'betslip_log_event',
    'page arguments' => array(4),
    'access arguments' => array('access site reports'),
	//     'file' => 'dblog.admin.inc',
	);

	return $items;
}

/**
 * @file
 * Administrative page callbacks for the dblog module.
 */

/**
 * Menu callback; displays a listing of log messages.
 *
 * Messages are truncated at 56 chars. Full-length message could be viewed at
 * the message details page.
 */
function betslip_log_overview($uid = null) {
	$filter = betslip_log_build_filter_query();
	$rows = array();
	$classes = array(
	WATCHDOG_DEBUG     => 'dblog-debug',
	WATCHDOG_INFO      => 'dblog-info',
	WATCHDOG_NOTICE    => 'dblog-notice',
	WATCHDOG_WARNING   => 'dblog-warning',
	WATCHDOG_ERROR     => 'dblog-error',
	WATCHDOG_CRITICAL  => 'dblog-critical',
	WATCHDOG_ALERT     => 'dblog-alert',
	WATCHDOG_EMERGENCY => 'dblog-emerg',
	);

	$build['betslip_log_filter_form'] = drupal_get_form('betslip_log_filter_form');

	$header = array(
    '', // Icon column.
	array('data' => t('Type'), 'field' => 'w.type'),
	array('data' => t('Date'), 'field' => 'w.wid', 'sort' => 'desc'),
	t('Message'),
	array('data' => t('User'), 'field' => 'u.name'),
	array('data' => t('Operations')),
	);

	$query = db_select('betslip_log', 'w')->extend('PagerDefault')->extend('TableSort');
	$query->leftJoin('users', 'u', 'w.uid = u.uid');
	$query
	->fields('w', array('wid', 'uid', 'severity', 'type', 'timestamp', 'message', 'variables', 'link'))
	->addField('u', 'name');
	if(!empty($uid)){
		$filter['where'] .= (!empty($filter['where']) ? ' AND ' : '').'u.uid = ?';
		$filter['args'][] = intval($uid);
	}
	if (!empty($filter['where'])) {
		$query->where($filter['where'], $filter['args']);
	}
	$result = $query
	->limit(50)
	->orderByHeader($header)
	->execute();

	foreach ($result as $dblog) {
		$rows[] = array('data' =>
		array(
		// Cells
		array('class' => 'icon'),
		t($dblog->type),
		format_date($dblog->timestamp, 'custom', 'Y-m-d H:i:s'),
		theme('betslip_log_message', array('event' => $dblog, 'link' => TRUE)),
		theme('username', array('account' => $dblog)),
		$dblog->link,
		),
		// Attributes for tr
      'class' => array(drupal_html_class('dblog-' . $dblog->type), $classes[$dblog->severity]),
		);
	}

	$build['betslip_log_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('id' => 'admin-dblog'),
    '#empty' => t('No log messages available.'),
	);
	$build['betslip_log_pager'] = array('#theme' => 'pager');

	return $build;
}

/**
 * Menu callback; generic function to display a page of the most frequent events.
 *
 * Messages are not truncated because events from this page have no detail view.
 *
 * @param $type
 *   type of dblog events to display.
 */
function betslip_log_top($type) {

	$header = array(
	array('data' => t('Count'), 'field' => 'count', 'sort' => 'desc'),
	array('data' => t('Message'), 'field' => 'message')
	);
	$count_query = db_select('betslip_log');
	$count_query->addExpression('COUNT(DISTINCT(message))');
	$count_query->condition('type', $type);

	$query = db_select('betslip_log', 'w')->extend('PagerDefault')->extend('TableSort');
	$query->addExpression('COUNT(wid)', 'count');
	$query = $query
	->fields('w', array('message', 'variables'))
	->condition('w.type', $type)
	->groupBy('message')
	->groupBy('variables')
	->limit(30)
	->orderByHeader($header);
	$query->setCountQuery($count_query);
	$result = $query->execute();

	$rows = array();
	foreach ($result as $dblog) {
		$rows[] = array($dblog->count, theme('betslip_log_message', array('event' => $dblog)));
	}

	$build['betslip_log_top_table']  = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No log messages available.'),
	);
	$build['betslip_log_top_pager'] = array('#theme' => 'pager');

	return $build;
}

/**
 * Menu callback; displays details about a log message.
 */
function betslip_log_event($id) {
	$severity = watchdog_severity_levels();
	$result = db_query('SELECT w.*, u.name, u.uid FROM {betslip_log} w INNER JOIN {users} u ON w.uid = u.uid WHERE w.wid = :id', array(':id' => $id))->fetchObject();
	if ($dblog = $result) {
		$rows = array(
		array(
		array('data' => t('Type'), 'header' => TRUE),
		t($dblog->type),
		),
		array(
		array('data' => t('Date'), 'header' => TRUE),
		format_date($dblog->timestamp, 'long'),
		),
		array(
		array('data' => t('User'), 'header' => TRUE),
		theme('username', array('account' => $dblog)),
		),
		array(
		array('data' => t('Location'), 'header' => TRUE),
		l($dblog->location, $dblog->location),
		),
		array(
		array('data' => t('Referrer'), 'header' => TRUE),
		l($dblog->referer, $dblog->referer),
		),
		array(
		array('data' => t('Message'), 'header' => TRUE),
		theme('betslip_log_message', array('event' => $dblog)),
		),
		array(
		array('data' => t('Severity'), 'header' => TRUE),
		$severity[$dblog->severity],
		),
		array(
		array('data' => t('Hostname'), 'header' => TRUE),
		check_plain($dblog->hostname),
		),
		array(
		array('data' => t('Operations'), 'header' => TRUE),
		$dblog->link,
		),
		);
		$build['betslip_log_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#attributes' => array('class' => array('dblog-event')),
		);
		return $build;
	}
	else {
		return '';
	}
}

/**
 * Build query for dblog administration filters based on session.
 */
function betslip_log_build_filter_query() {
	if (empty($_SESSION['betslip_log_overview_filter'])) {
		return;
	}

	$filters = betslip_log_filters();

	// Build query
	$where = $args = array();
	foreach ($_SESSION['betslip_log_overview_filter'] as $key => $filter) {
		$filter_where = array();
		foreach ($filter as $value) {
			$filter_where[] = $filters[$key]['where'];
			$args[] = $value;
		}
		if (!empty($filter_where)) {
			$where[] = '(' . implode(' OR ', $filter_where) . ')';
		}
	}
	$where = !empty($where) ? implode(' AND ', $where) : '';

	return array(
    'where' => $where,
    'args' => $args,
	);
}


/**
 * List dblog administration filters that can be applied.
 */
function betslip_log_filters() {
	$filters = array();

	foreach (_betslip_log_get_message_types() as $type) {
		$types[$type] = t($type);
	}

	if (!empty($types)) {
		$filters['type'] = array(
      'title' => t('Type'),
      'where' => "w.type = ?",
      'options' => $types,
		);
	}

	$filters['severity'] = array(
    'title' => t('Severity'),
    'where' => 'w.severity = ?',
    'options' => watchdog_severity_levels(),
	);

	return $filters;
}


/**
 * Return form for dblog administration filters.
 *
 * @ingroup forms
 * @see betslip_log_filter_form_submit()
 * @see betslip_log_filter_form_validate()
 */
function betslip_log_filter_form($form) {
	$filters = betslip_log_filters();

	$form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter log messages'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($session),
	);
	foreach ($filters as $key => $filter) {
		$form['filters']['status'][$key] = array(
      '#title' => $filter['title'],
      '#type' => 'select',
      '#multiple' => TRUE,
      '#size' => 8,
      '#options' => $filter['options'],
		);
		if (!empty($_SESSION['betslip_log_overview_filter'][$key])) {
			$form['filters']['status'][$key]['#default_value'] = $_SESSION['betslip_log_overview_filter'][$key];
		}
	}

	$form['filters']['actions'] = array(
    '#type' => 'actions',
    '#attributes' => array('class' => array('container-inline')),
	);
	$form['filters']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
	);
	if (!empty($_SESSION['betslip_log_overview_filter'])) {
		$form['filters']['actions']['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset')
		);
	}

	return $form;
}

/**
 * Validate result from dblog administration filter form.
 */
function betslip_log_filter_form_validate($form, &$form_state) {
	if ($form_state['values']['op'] == t('Filter') && empty($form_state['values']['type']) && empty($form_state['values']['severity'])) {
		form_set_error('type', t('You must select something to filter by.'));
	}
}

/**
 * Process result from dblog administration filter form.
 */
function betslip_log_filter_form_submit($form, &$form_state) {
	$op = $form_state['values']['op'];
	$filters = betslip_log_filters();
	switch ($op) {
		case t('Filter'):
			foreach ($filters as $name => $filter) {
				if (isset($form_state['values'][$name])) {
					$_SESSION['betslip_log_overview_filter'][$name] = $form_state['values'][$name];
				}
			}
			break;
		case t('Reset'):
			$_SESSION['betslip_log_overview_filter'] = array();
			break;
	}
	return 'admin/reports/betsliplog';
}

/**
 * Implements hook_theme().
 */
function betslip_log_theme() {
	return array(
    'betslip_log_message' => array(
      'variables' => array('event' => NULL, 'link' => FALSE),
	),
	);
}
/**
 * Returns HTML for a log message.
 *
 * @param $variables
 *   An associative array containing:
 *   - event: An object with at least the message and variables properties.
 *   - link: (optional) Format message as link, event->wid is required.
 *
 * @ingroup themeable
 */
function theme_betslip_log_message($variables) {
	$output = '';
	$event = $variables['event'];
	// Check for required properties.
	if (isset($event->message) && isset($event->variables)) {
		// Messages without variables or user specified text.
		if ($event->variables === 'N;') {
			$output = $event->message;
		}
		// Message to translate with injected variables.
		else {
			$output = t($event->message, unserialize($event->variables));
		}
		if ($variables['link'] && isset($event->wid)) {
			// Truncate message to 100 chars.
			$output = truncate_utf8(filter_xss($output, array()), 100, TRUE, TRUE);
			$output = l($output, 'admin/reports/betsliplog/event/' . $event->wid, array('html' => TRUE));
		}
	}
	return $output;
}
?>